// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockOSUser creates a new instance of MockOSUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOSUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOSUser {
	mock := &MockOSUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOSUser is an autogenerated mock type for the OSUser type
type MockOSUser struct {
	mock.Mock
}

type MockOSUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOSUser) EXPECT() *MockOSUser_Expecter {
	return &MockOSUser_Expecter{mock: &_m.Mock}
}

// GetGroupNameFromID provides a mock function for the type MockOSUser
func (_mock *MockOSUser) GetGroupNameFromID(gid string, groupFilePath string) (string, error) {
	ret := _mock.Called(gid, groupFilePath)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupNameFromID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(gid, groupFilePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(gid, groupFilePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(gid, groupFilePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOSUser_GetGroupNameFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupNameFromID'
type MockOSUser_GetGroupNameFromID_Call struct {
	*mock.Call
}

// GetGroupNameFromID is a helper method to define mock.On call
//   - gid string
//   - groupFilePath string
func (_e *MockOSUser_Expecter) GetGroupNameFromID(gid interface{}, groupFilePath interface{}) *MockOSUser_GetGroupNameFromID_Call {
	return &MockOSUser_GetGroupNameFromID_Call{Call: _e.mock.On("GetGroupNameFromID", gid, groupFilePath)}
}

func (_c *MockOSUser_GetGroupNameFromID_Call) Run(run func(gid string, groupFilePath string)) *MockOSUser_GetGroupNameFromID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOSUser_GetGroupNameFromID_Call) Return(s string, err error) *MockOSUser_GetGroupNameFromID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockOSUser_GetGroupNameFromID_Call) RunAndReturn(run func(gid string, groupFilePath string) (string, error)) *MockOSUser_GetGroupNameFromID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNameFromID provides a mock function for the type MockOSUser
func (_mock *MockOSUser) GetUserNameFromID(uid string, userFilePath string) (string, error) {
	ret := _mock.Called(uid, userFilePath)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNameFromID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(uid, userFilePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(uid, userFilePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(uid, userFilePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOSUser_GetUserNameFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNameFromID'
type MockOSUser_GetUserNameFromID_Call struct {
	*mock.Call
}

// GetUserNameFromID is a helper method to define mock.On call
//   - uid string
//   - userFilePath string
func (_e *MockOSUser_Expecter) GetUserNameFromID(uid interface{}, userFilePath interface{}) *MockOSUser_GetUserNameFromID_Call {
	return &MockOSUser_GetUserNameFromID_Call{Call: _e.mock.On("GetUserNameFromID", uid, userFilePath)}
}

func (_c *MockOSUser_GetUserNameFromID_Call) Run(run func(uid string, userFilePath string)) *MockOSUser_GetUserNameFromID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOSUser_GetUserNameFromID_Call) Return(s string, err error) *MockOSUser_GetUserNameFromID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockOSUser_GetUserNameFromID_Call) RunAndReturn(run func(uid string, userFilePath string) (string, error)) *MockOSUser_GetUserNameFromID_Call {
	_c.Call.Return(run)
	return _c
}
