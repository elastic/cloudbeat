// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	"github.com/elastic/cloudbeat/internal/config"
	"github.com/elastic/cloudbeat/internal/infra/clog"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2/google"
)

// NewMockConfigProviderAPI creates a new instance of MockConfigProviderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProviderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProviderAPI {
	mock := &MockConfigProviderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigProviderAPI is an autogenerated mock type for the ConfigProviderAPI type
type MockConfigProviderAPI struct {
	mock.Mock
}

type MockConfigProviderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProviderAPI) EXPECT() *MockConfigProviderAPI_Expecter {
	return &MockConfigProviderAPI_Expecter{mock: &_m.Mock}
}

// GetGcpClientConfig provides a mock function for the type MockConfigProviderAPI
func (_mock *MockConfigProviderAPI) GetGcpClientConfig(ctx context.Context, cfg config.GcpConfig, log *clog.Logger) (*GcpFactoryConfig, error) {
	ret := _mock.Called(ctx, cfg, log)

	if len(ret) == 0 {
		panic("no return value specified for GetGcpClientConfig")
	}

	var r0 *GcpFactoryConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, config.GcpConfig, *clog.Logger) (*GcpFactoryConfig, error)); ok {
		return returnFunc(ctx, cfg, log)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, config.GcpConfig, *clog.Logger) *GcpFactoryConfig); ok {
		r0 = returnFunc(ctx, cfg, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GcpFactoryConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, config.GcpConfig, *clog.Logger) error); ok {
		r1 = returnFunc(ctx, cfg, log)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigProviderAPI_GetGcpClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGcpClientConfig'
type MockConfigProviderAPI_GetGcpClientConfig_Call struct {
	*mock.Call
}

// GetGcpClientConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg config.GcpConfig
//   - log *clog.Logger
func (_e *MockConfigProviderAPI_Expecter) GetGcpClientConfig(ctx interface{}, cfg interface{}, log interface{}) *MockConfigProviderAPI_GetGcpClientConfig_Call {
	return &MockConfigProviderAPI_GetGcpClientConfig_Call{Call: _e.mock.On("GetGcpClientConfig", ctx, cfg, log)}
}

func (_c *MockConfigProviderAPI_GetGcpClientConfig_Call) Run(run func(ctx context.Context, cfg config.GcpConfig, log *clog.Logger)) *MockConfigProviderAPI_GetGcpClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 config.GcpConfig
		if args[1] != nil {
			arg1 = args[1].(config.GcpConfig)
		}
		var arg2 *clog.Logger
		if args[2] != nil {
			arg2 = args[2].(*clog.Logger)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigProviderAPI_GetGcpClientConfig_Call) Return(gcpFactoryConfig *GcpFactoryConfig, err error) *MockConfigProviderAPI_GetGcpClientConfig_Call {
	_c.Call.Return(gcpFactoryConfig, err)
	return _c
}

func (_c *MockConfigProviderAPI_GetGcpClientConfig_Call) RunAndReturn(run func(ctx context.Context, cfg config.GcpConfig, log *clog.Logger) (*GcpFactoryConfig, error)) *MockConfigProviderAPI_GetGcpClientConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleAuthProviderAPI creates a new instance of MockGoogleAuthProviderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleAuthProviderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleAuthProviderAPI {
	mock := &MockGoogleAuthProviderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGoogleAuthProviderAPI is an autogenerated mock type for the GoogleAuthProviderAPI type
type MockGoogleAuthProviderAPI struct {
	mock.Mock
}

type MockGoogleAuthProviderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleAuthProviderAPI) EXPECT() *MockGoogleAuthProviderAPI_Expecter {
	return &MockGoogleAuthProviderAPI_Expecter{mock: &_m.Mock}
}

// FindDefaultCredentials provides a mock function for the type MockGoogleAuthProviderAPI
func (_mock *MockGoogleAuthProviderAPI) FindDefaultCredentials(ctx context.Context) (*google.Credentials, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindDefaultCredentials")
	}

	var r0 *google.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*google.Credentials, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *google.Credentials); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Credentials)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGoogleAuthProviderAPI_FindDefaultCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDefaultCredentials'
type MockGoogleAuthProviderAPI_FindDefaultCredentials_Call struct {
	*mock.Call
}

// FindDefaultCredentials is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoogleAuthProviderAPI_Expecter) FindDefaultCredentials(ctx interface{}) *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call {
	return &MockGoogleAuthProviderAPI_FindDefaultCredentials_Call{Call: _e.mock.On("FindDefaultCredentials", ctx)}
}

func (_c *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call) Run(run func(ctx context.Context)) *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call) Return(credentials *google.Credentials, err error) *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call) RunAndReturn(run func(ctx context.Context) (*google.Credentials, error)) *MockGoogleAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Return(run)
	return _c
}
