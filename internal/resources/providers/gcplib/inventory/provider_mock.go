// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package inventory

import (
	"context"

	"cloud.google.com/go/asset/apiv1/assetpb"
	"github.com/elastic/cloudbeat/internal/config"
	"github.com/elastic/cloudbeat/internal/infra/clog"
	"github.com/elastic/cloudbeat/internal/resources/providers/gcplib/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIterator creates a new instance of MockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIterator {
	mock := &MockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIterator is an autogenerated mock type for the Iterator type
type MockIterator struct {
	mock.Mock
}

type MockIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIterator) EXPECT() *MockIterator_Expecter {
	return &MockIterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function for the type MockIterator
func (_mock *MockIterator) Next() (*assetpb.Asset, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *assetpb.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*assetpb.Asset, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *assetpb.Asset); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assetpb.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockIterator_Expecter) Next() *MockIterator_Next_Call {
	return &MockIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockIterator_Next_Call) Run(run func()) *MockIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_Next_Call) Return(asset *assetpb.Asset, err error) *MockIterator_Next_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *MockIterator_Next_Call) RunAndReturn(run func() (*assetpb.Asset, error)) *MockIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceAPI creates a new instance of MockServiceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceAPI {
	mock := &MockServiceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceAPI is an autogenerated mock type for the ServiceAPI type
type MockServiceAPI struct {
	mock.Mock
}

type MockServiceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceAPI) EXPECT() *MockServiceAPI_Expecter {
	return &MockServiceAPI_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) Clear() {
	_mock.Called()
	return
}

// MockServiceAPI_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockServiceAPI_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockServiceAPI_Expecter) Clear() *MockServiceAPI_Clear_Call {
	return &MockServiceAPI_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockServiceAPI_Clear_Call) Run(run func()) *MockServiceAPI_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceAPI_Clear_Call) Return() *MockServiceAPI_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_Clear_Call) RunAndReturn(run func()) *MockServiceAPI_Clear_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceAPI_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockServiceAPI_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockServiceAPI_Expecter) Close() *MockServiceAPI_Close_Call {
	return &MockServiceAPI_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockServiceAPI_Close_Call) Run(run func()) *MockServiceAPI_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceAPI_Close_Call) Return(err error) *MockServiceAPI_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceAPI_Close_Call) RunAndReturn(run func() error) *MockServiceAPI_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ListAssetTypes provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) ListAssetTypes(ctx context.Context, assetTypes []string, out chan<- *ExtendedGcpAsset) {
	_mock.Called(ctx, assetTypes, out)
	return
}

// MockServiceAPI_ListAssetTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAssetTypes'
type MockServiceAPI_ListAssetTypes_Call struct {
	*mock.Call
}

// ListAssetTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - assetTypes []string
//   - out chan<- *ExtendedGcpAsset
func (_e *MockServiceAPI_Expecter) ListAssetTypes(ctx interface{}, assetTypes interface{}, out interface{}) *MockServiceAPI_ListAssetTypes_Call {
	return &MockServiceAPI_ListAssetTypes_Call{Call: _e.mock.On("ListAssetTypes", ctx, assetTypes, out)}
}

func (_c *MockServiceAPI_ListAssetTypes_Call) Run(run func(ctx context.Context, assetTypes []string, out chan<- *ExtendedGcpAsset)) *MockServiceAPI_ListAssetTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 chan<- *ExtendedGcpAsset
		if args[2] != nil {
			arg2 = args[2].(chan<- *ExtendedGcpAsset)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceAPI_ListAssetTypes_Call) Return() *MockServiceAPI_ListAssetTypes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_ListAssetTypes_Call) RunAndReturn(run func(ctx context.Context, assetTypes []string, out chan<- *ExtendedGcpAsset)) *MockServiceAPI_ListAssetTypes_Call {
	_c.Run(run)
	return _c
}

// ListMonitoringAssets provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) ListMonitoringAssets(ctx context.Context, out chan<- *MonitoringAsset) {
	_mock.Called(ctx, out)
	return
}

// MockServiceAPI_ListMonitoringAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMonitoringAssets'
type MockServiceAPI_ListMonitoringAssets_Call struct {
	*mock.Call
}

// ListMonitoringAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- *MonitoringAsset
func (_e *MockServiceAPI_Expecter) ListMonitoringAssets(ctx interface{}, out interface{}) *MockServiceAPI_ListMonitoringAssets_Call {
	return &MockServiceAPI_ListMonitoringAssets_Call{Call: _e.mock.On("ListMonitoringAssets", ctx, out)}
}

func (_c *MockServiceAPI_ListMonitoringAssets_Call) Run(run func(ctx context.Context, out chan<- *MonitoringAsset)) *MockServiceAPI_ListMonitoringAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan<- *MonitoringAsset
		if args[1] != nil {
			arg1 = args[1].(chan<- *MonitoringAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_ListMonitoringAssets_Call) Return() *MockServiceAPI_ListMonitoringAssets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_ListMonitoringAssets_Call) RunAndReturn(run func(ctx context.Context, out chan<- *MonitoringAsset)) *MockServiceAPI_ListMonitoringAssets_Call {
	_c.Run(run)
	return _c
}

// ListNetworkAssets provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) ListNetworkAssets(ctx context.Context, out chan<- *ExtendedGcpAsset) {
	_mock.Called(ctx, out)
	return
}

// MockServiceAPI_ListNetworkAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkAssets'
type MockServiceAPI_ListNetworkAssets_Call struct {
	*mock.Call
}

// ListNetworkAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- *ExtendedGcpAsset
func (_e *MockServiceAPI_Expecter) ListNetworkAssets(ctx interface{}, out interface{}) *MockServiceAPI_ListNetworkAssets_Call {
	return &MockServiceAPI_ListNetworkAssets_Call{Call: _e.mock.On("ListNetworkAssets", ctx, out)}
}

func (_c *MockServiceAPI_ListNetworkAssets_Call) Run(run func(ctx context.Context, out chan<- *ExtendedGcpAsset)) *MockServiceAPI_ListNetworkAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan<- *ExtendedGcpAsset
		if args[1] != nil {
			arg1 = args[1].(chan<- *ExtendedGcpAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_ListNetworkAssets_Call) Return() *MockServiceAPI_ListNetworkAssets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_ListNetworkAssets_Call) RunAndReturn(run func(ctx context.Context, out chan<- *ExtendedGcpAsset)) *MockServiceAPI_ListNetworkAssets_Call {
	_c.Run(run)
	return _c
}

// ListProjectAssets provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) ListProjectAssets(ctx context.Context, assetTypes []string, out chan<- *ProjectAssets) {
	_mock.Called(ctx, assetTypes, out)
	return
}

// MockServiceAPI_ListProjectAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectAssets'
type MockServiceAPI_ListProjectAssets_Call struct {
	*mock.Call
}

// ListProjectAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - assetTypes []string
//   - out chan<- *ProjectAssets
func (_e *MockServiceAPI_Expecter) ListProjectAssets(ctx interface{}, assetTypes interface{}, out interface{}) *MockServiceAPI_ListProjectAssets_Call {
	return &MockServiceAPI_ListProjectAssets_Call{Call: _e.mock.On("ListProjectAssets", ctx, assetTypes, out)}
}

func (_c *MockServiceAPI_ListProjectAssets_Call) Run(run func(ctx context.Context, assetTypes []string, out chan<- *ProjectAssets)) *MockServiceAPI_ListProjectAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 chan<- *ProjectAssets
		if args[2] != nil {
			arg2 = args[2].(chan<- *ProjectAssets)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceAPI_ListProjectAssets_Call) Return() *MockServiceAPI_ListProjectAssets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_ListProjectAssets_Call) RunAndReturn(run func(ctx context.Context, assetTypes []string, out chan<- *ProjectAssets)) *MockServiceAPI_ListProjectAssets_Call {
	_c.Run(run)
	return _c
}

// ListProjectsAncestorsPolicies provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) ListProjectsAncestorsPolicies(ctx context.Context, out chan<- *ProjectPoliciesAsset) {
	_mock.Called(ctx, out)
	return
}

// MockServiceAPI_ListProjectsAncestorsPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectsAncestorsPolicies'
type MockServiceAPI_ListProjectsAncestorsPolicies_Call struct {
	*mock.Call
}

// ListProjectsAncestorsPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- *ProjectPoliciesAsset
func (_e *MockServiceAPI_Expecter) ListProjectsAncestorsPolicies(ctx interface{}, out interface{}) *MockServiceAPI_ListProjectsAncestorsPolicies_Call {
	return &MockServiceAPI_ListProjectsAncestorsPolicies_Call{Call: _e.mock.On("ListProjectsAncestorsPolicies", ctx, out)}
}

func (_c *MockServiceAPI_ListProjectsAncestorsPolicies_Call) Run(run func(ctx context.Context, out chan<- *ProjectPoliciesAsset)) *MockServiceAPI_ListProjectsAncestorsPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan<- *ProjectPoliciesAsset
		if args[1] != nil {
			arg1 = args[1].(chan<- *ProjectPoliciesAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_ListProjectsAncestorsPolicies_Call) Return() *MockServiceAPI_ListProjectsAncestorsPolicies_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceAPI_ListProjectsAncestorsPolicies_Call) RunAndReturn(run func(ctx context.Context, out chan<- *ProjectPoliciesAsset)) *MockServiceAPI_ListProjectsAncestorsPolicies_Call {
	_c.Run(run)
	return _c
}

// NewMockProviderInitializerAPI creates a new instance of MockProviderInitializerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInitializerAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInitializerAPI {
	mock := &MockProviderInitializerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderInitializerAPI is an autogenerated mock type for the ProviderInitializerAPI type
type MockProviderInitializerAPI struct {
	mock.Mock
}

type MockProviderInitializerAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInitializerAPI) EXPECT() *MockProviderInitializerAPI_Expecter {
	return &MockProviderInitializerAPI_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type MockProviderInitializerAPI
func (_mock *MockProviderInitializerAPI) Init(ctx context.Context, log *clog.Logger, gcpConfig auth.GcpFactoryConfig, cfg config.GcpConfig) (ServiceAPI, error) {
	ret := _mock.Called(ctx, log, gcpConfig, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 ServiceAPI
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *clog.Logger, auth.GcpFactoryConfig, config.GcpConfig) (ServiceAPI, error)); ok {
		return returnFunc(ctx, log, gcpConfig, cfg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *clog.Logger, auth.GcpFactoryConfig, config.GcpConfig) ServiceAPI); ok {
		r0 = returnFunc(ctx, log, gcpConfig, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ServiceAPI)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *clog.Logger, auth.GcpFactoryConfig, config.GcpConfig) error); ok {
		r1 = returnFunc(ctx, log, gcpConfig, cfg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderInitializerAPI_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockProviderInitializerAPI_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - log *clog.Logger
//   - gcpConfig auth.GcpFactoryConfig
//   - cfg config.GcpConfig
func (_e *MockProviderInitializerAPI_Expecter) Init(ctx interface{}, log interface{}, gcpConfig interface{}, cfg interface{}) *MockProviderInitializerAPI_Init_Call {
	return &MockProviderInitializerAPI_Init_Call{Call: _e.mock.On("Init", ctx, log, gcpConfig, cfg)}
}

func (_c *MockProviderInitializerAPI_Init_Call) Run(run func(ctx context.Context, log *clog.Logger, gcpConfig auth.GcpFactoryConfig, cfg config.GcpConfig)) *MockProviderInitializerAPI_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *clog.Logger
		if args[1] != nil {
			arg1 = args[1].(*clog.Logger)
		}
		var arg2 auth.GcpFactoryConfig
		if args[2] != nil {
			arg2 = args[2].(auth.GcpFactoryConfig)
		}
		var arg3 config.GcpConfig
		if args[3] != nil {
			arg3 = args[3].(config.GcpConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockProviderInitializerAPI_Init_Call) Return(serviceAPI ServiceAPI, err error) *MockProviderInitializerAPI_Init_Call {
	_c.Call.Return(serviceAPI, err)
	return _c
}

func (_c *MockProviderInitializerAPI_Init_Call) RunAndReturn(run func(ctx context.Context, log *clog.Logger, gcpConfig auth.GcpFactoryConfig, cfg config.GcpConfig) (ServiceAPI, error)) *MockProviderInitializerAPI_Init_Call {
	_c.Call.Return(run)
	return _c
}
