// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package lambda

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/lambda"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ListAliases provides a mock function for the type MockClient
func (_mock *MockClient) ListAliases(context1 context.Context, listAliasesInput *lambda.ListAliasesInput, fns ...func(*lambda.Options)) (*lambda.ListAliasesOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listAliasesInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listAliasesInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListAliases")
	}

	var r0 *lambda.ListAliasesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...func(*lambda.Options)) (*lambda.ListAliasesOutput, error)); ok {
		return returnFunc(context1, listAliasesInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...func(*lambda.Options)) *lambda.ListAliasesOutput); ok {
		r0 = returnFunc(context1, listAliasesInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListAliasesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *lambda.ListAliasesInput, ...func(*lambda.Options)) error); ok {
		r1 = returnFunc(context1, listAliasesInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliases'
type MockClient_ListAliases_Call struct {
	*mock.Call
}

// ListAliases is a helper method to define mock.On call
//   - context1 context.Context
//   - listAliasesInput *lambda.ListAliasesInput
//   - fns ...func(*lambda.Options)
func (_e *MockClient_Expecter) ListAliases(context1 interface{}, listAliasesInput interface{}, fns ...interface{}) *MockClient_ListAliases_Call {
	return &MockClient_ListAliases_Call{Call: _e.mock.On("ListAliases",
		append([]interface{}{context1, listAliasesInput}, fns...)...)}
}

func (_c *MockClient_ListAliases_Call) Run(run func(context1 context.Context, listAliasesInput *lambda.ListAliasesInput, fns ...func(*lambda.Options))) *MockClient_ListAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *lambda.ListAliasesInput
		if args[1] != nil {
			arg1 = args[1].(*lambda.ListAliasesInput)
		}
		var arg2 []func(*lambda.Options)
		var variadicArgs []func(*lambda.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*lambda.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListAliases_Call) Return(listAliasesOutput *lambda.ListAliasesOutput, err error) *MockClient_ListAliases_Call {
	_c.Call.Return(listAliasesOutput, err)
	return _c
}

func (_c *MockClient_ListAliases_Call) RunAndReturn(run func(context1 context.Context, listAliasesInput *lambda.ListAliasesInput, fns ...func(*lambda.Options)) (*lambda.ListAliasesOutput, error)) *MockClient_ListAliases_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappings provides a mock function for the type MockClient
func (_mock *MockClient) ListEventSourceMappings(context1 context.Context, listEventSourceMappingsInput *lambda.ListEventSourceMappingsInput, fns ...func(*lambda.Options)) (*lambda.ListEventSourceMappingsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listEventSourceMappingsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listEventSourceMappingsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappings")
	}

	var r0 *lambda.ListEventSourceMappingsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...func(*lambda.Options)) (*lambda.ListEventSourceMappingsOutput, error)); ok {
		return returnFunc(context1, listEventSourceMappingsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...func(*lambda.Options)) *lambda.ListEventSourceMappingsOutput); ok {
		r0 = returnFunc(context1, listEventSourceMappingsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListEventSourceMappingsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...func(*lambda.Options)) error); ok {
		r1 = returnFunc(context1, listEventSourceMappingsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListEventSourceMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappings'
type MockClient_ListEventSourceMappings_Call struct {
	*mock.Call
}

// ListEventSourceMappings is a helper method to define mock.On call
//   - context1 context.Context
//   - listEventSourceMappingsInput *lambda.ListEventSourceMappingsInput
//   - fns ...func(*lambda.Options)
func (_e *MockClient_Expecter) ListEventSourceMappings(context1 interface{}, listEventSourceMappingsInput interface{}, fns ...interface{}) *MockClient_ListEventSourceMappings_Call {
	return &MockClient_ListEventSourceMappings_Call{Call: _e.mock.On("ListEventSourceMappings",
		append([]interface{}{context1, listEventSourceMappingsInput}, fns...)...)}
}

func (_c *MockClient_ListEventSourceMappings_Call) Run(run func(context1 context.Context, listEventSourceMappingsInput *lambda.ListEventSourceMappingsInput, fns ...func(*lambda.Options))) *MockClient_ListEventSourceMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *lambda.ListEventSourceMappingsInput
		if args[1] != nil {
			arg1 = args[1].(*lambda.ListEventSourceMappingsInput)
		}
		var arg2 []func(*lambda.Options)
		var variadicArgs []func(*lambda.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*lambda.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListEventSourceMappings_Call) Return(listEventSourceMappingsOutput *lambda.ListEventSourceMappingsOutput, err error) *MockClient_ListEventSourceMappings_Call {
	_c.Call.Return(listEventSourceMappingsOutput, err)
	return _c
}

func (_c *MockClient_ListEventSourceMappings_Call) RunAndReturn(run func(context1 context.Context, listEventSourceMappingsInput *lambda.ListEventSourceMappingsInput, fns ...func(*lambda.Options)) (*lambda.ListEventSourceMappingsOutput, error)) *MockClient_ListEventSourceMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctions provides a mock function for the type MockClient
func (_mock *MockClient) ListFunctions(context1 context.Context, listFunctionsInput *lambda.ListFunctionsInput, fns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listFunctionsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listFunctionsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListFunctions")
	}

	var r0 *lambda.ListFunctionsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error)); ok {
		return returnFunc(context1, listFunctionsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...func(*lambda.Options)) *lambda.ListFunctionsOutput); ok {
		r0 = returnFunc(context1, listFunctionsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionsInput, ...func(*lambda.Options)) error); ok {
		r1 = returnFunc(context1, listFunctionsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListFunctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctions'
type MockClient_ListFunctions_Call struct {
	*mock.Call
}

// ListFunctions is a helper method to define mock.On call
//   - context1 context.Context
//   - listFunctionsInput *lambda.ListFunctionsInput
//   - fns ...func(*lambda.Options)
func (_e *MockClient_Expecter) ListFunctions(context1 interface{}, listFunctionsInput interface{}, fns ...interface{}) *MockClient_ListFunctions_Call {
	return &MockClient_ListFunctions_Call{Call: _e.mock.On("ListFunctions",
		append([]interface{}{context1, listFunctionsInput}, fns...)...)}
}

func (_c *MockClient_ListFunctions_Call) Run(run func(context1 context.Context, listFunctionsInput *lambda.ListFunctionsInput, fns ...func(*lambda.Options))) *MockClient_ListFunctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *lambda.ListFunctionsInput
		if args[1] != nil {
			arg1 = args[1].(*lambda.ListFunctionsInput)
		}
		var arg2 []func(*lambda.Options)
		var variadicArgs []func(*lambda.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*lambda.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListFunctions_Call) Return(listFunctionsOutput *lambda.ListFunctionsOutput, err error) *MockClient_ListFunctions_Call {
	_c.Call.Return(listFunctionsOutput, err)
	return _c
}

func (_c *MockClient_ListFunctions_Call) RunAndReturn(run func(context1 context.Context, listFunctionsInput *lambda.ListFunctionsInput, fns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error)) *MockClient_ListFunctions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayers provides a mock function for the type MockClient
func (_mock *MockClient) ListLayers(context1 context.Context, listLayersInput *lambda.ListLayersInput, fns ...func(*lambda.Options)) (*lambda.ListLayersOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listLayersInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listLayersInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListLayers")
	}

	var r0 *lambda.ListLayersOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...func(*lambda.Options)) (*lambda.ListLayersOutput, error)); ok {
		return returnFunc(context1, listLayersInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...func(*lambda.Options)) *lambda.ListLayersOutput); ok {
		r0 = returnFunc(context1, listLayersInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayersOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *lambda.ListLayersInput, ...func(*lambda.Options)) error); ok {
		r1 = returnFunc(context1, listLayersInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListLayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayers'
type MockClient_ListLayers_Call struct {
	*mock.Call
}

// ListLayers is a helper method to define mock.On call
//   - context1 context.Context
//   - listLayersInput *lambda.ListLayersInput
//   - fns ...func(*lambda.Options)
func (_e *MockClient_Expecter) ListLayers(context1 interface{}, listLayersInput interface{}, fns ...interface{}) *MockClient_ListLayers_Call {
	return &MockClient_ListLayers_Call{Call: _e.mock.On("ListLayers",
		append([]interface{}{context1, listLayersInput}, fns...)...)}
}

func (_c *MockClient_ListLayers_Call) Run(run func(context1 context.Context, listLayersInput *lambda.ListLayersInput, fns ...func(*lambda.Options))) *MockClient_ListLayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *lambda.ListLayersInput
		if args[1] != nil {
			arg1 = args[1].(*lambda.ListLayersInput)
		}
		var arg2 []func(*lambda.Options)
		var variadicArgs []func(*lambda.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*lambda.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListLayers_Call) Return(listLayersOutput *lambda.ListLayersOutput, err error) *MockClient_ListLayers_Call {
	_c.Call.Return(listLayersOutput, err)
	return _c
}

func (_c *MockClient_ListLayers_Call) RunAndReturn(run func(context1 context.Context, listLayersInput *lambda.ListLayersInput, fns ...func(*lambda.Options)) (*lambda.ListLayersOutput, error)) *MockClient_ListLayers_Call {
	_c.Call.Return(run)
	return _c
}
