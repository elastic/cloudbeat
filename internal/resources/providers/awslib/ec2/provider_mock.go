// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateSnapshots provides a mock function for the type MockClient
func (_mock *MockClient) CreateSnapshots(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshots")
	}

	var r0 *ec2.CreateSnapshotsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.CreateSnapshotsInput, ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.CreateSnapshotsInput, ...func(*ec2.Options)) *ec2.CreateSnapshotsOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSnapshotsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.CreateSnapshotsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreateSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnapshots'
type MockClient_CreateSnapshots_Call struct {
	*mock.Call
}

// CreateSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.CreateSnapshotsInput
//   - optFns ...func(*ec2.Options)
func (_e *MockClient_Expecter) CreateSnapshots(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_CreateSnapshots_Call {
	return &MockClient_CreateSnapshots_Call{Call: _e.mock.On("CreateSnapshots",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_CreateSnapshots_Call) Run(run func(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options))) *MockClient_CreateSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.CreateSnapshotsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.CreateSnapshotsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_CreateSnapshots_Call) Return(createSnapshotsOutput *ec2.CreateSnapshotsOutput, err error) *MockClient_CreateSnapshots_Call {
	_c.Call.Return(createSnapshotsOutput, err)
	return _c
}

func (_c *MockClient_CreateSnapshots_Call) RunAndReturn(run func(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error)) *MockClient_CreateSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnapshot provides a mock function for the type MockClient
func (_mock *MockClient) DeleteSnapshot(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 *ec2.DeleteSnapshotOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSnapshotInput, ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSnapshotInput, ...func(*ec2.Options)) *ec2.DeleteSnapshotOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSnapshotOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DeleteSnapshotInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type MockClient_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.DeleteSnapshotInput
//   - optFns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DeleteSnapshot(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DeleteSnapshot_Call {
	return &MockClient_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DeleteSnapshot_Call) Run(run func(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options))) *MockClient_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DeleteSnapshotInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DeleteSnapshotInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DeleteSnapshot_Call) Return(deleteSnapshotOutput *ec2.DeleteSnapshotOutput, err error) *MockClient_DeleteSnapshot_Call {
	_c.Call.Return(deleteSnapshotOutput, err)
	return _c
}

func (_c *MockClient_DeleteSnapshot_Call) RunAndReturn(run func(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error)) *MockClient_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeFlowLogs provides a mock function for the type MockClient
func (_mock *MockClient) DescribeFlowLogs(context1 context.Context, describeFlowLogsInput *ec2.DescribeFlowLogsInput, fns ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeFlowLogsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeFlowLogsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlowLogs")
	}

	var r0 *ec2.DescribeFlowLogsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFlowLogsInput, ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error)); ok {
		return returnFunc(context1, describeFlowLogsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFlowLogsInput, ...func(*ec2.Options)) *ec2.DescribeFlowLogsOutput); ok {
		r0 = returnFunc(context1, describeFlowLogsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFlowLogsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFlowLogsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeFlowLogsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeFlowLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeFlowLogs'
type MockClient_DescribeFlowLogs_Call struct {
	*mock.Call
}

// DescribeFlowLogs is a helper method to define mock.On call
//   - context1 context.Context
//   - describeFlowLogsInput *ec2.DescribeFlowLogsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeFlowLogs(context1 interface{}, describeFlowLogsInput interface{}, fns ...interface{}) *MockClient_DescribeFlowLogs_Call {
	return &MockClient_DescribeFlowLogs_Call{Call: _e.mock.On("DescribeFlowLogs",
		append([]interface{}{context1, describeFlowLogsInput}, fns...)...)}
}

func (_c *MockClient_DescribeFlowLogs_Call) Run(run func(context1 context.Context, describeFlowLogsInput *ec2.DescribeFlowLogsInput, fns ...func(*ec2.Options))) *MockClient_DescribeFlowLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeFlowLogsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeFlowLogsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeFlowLogs_Call) Return(describeFlowLogsOutput *ec2.DescribeFlowLogsOutput, err error) *MockClient_DescribeFlowLogs_Call {
	_c.Call.Return(describeFlowLogsOutput, err)
	return _c
}

func (_c *MockClient_DescribeFlowLogs_Call) RunAndReturn(run func(context1 context.Context, describeFlowLogsInput *ec2.DescribeFlowLogsInput, fns ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error)) *MockClient_DescribeFlowLogs_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeInstances provides a mock function for the type MockClient
func (_mock *MockClient) DescribeInstances(context1 context.Context, describeInstancesInput *ec2.DescribeInstancesInput, fns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeInstancesInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeInstancesInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstances")
	}

	var r0 *ec2.DescribeInstancesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error)); ok {
		return returnFunc(context1, describeInstancesInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) *ec2.DescribeInstancesOutput); ok {
		r0 = returnFunc(context1, describeInstancesInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeInstancesInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInstances'
type MockClient_DescribeInstances_Call struct {
	*mock.Call
}

// DescribeInstances is a helper method to define mock.On call
//   - context1 context.Context
//   - describeInstancesInput *ec2.DescribeInstancesInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeInstances(context1 interface{}, describeInstancesInput interface{}, fns ...interface{}) *MockClient_DescribeInstances_Call {
	return &MockClient_DescribeInstances_Call{Call: _e.mock.On("DescribeInstances",
		append([]interface{}{context1, describeInstancesInput}, fns...)...)}
}

func (_c *MockClient_DescribeInstances_Call) Run(run func(context1 context.Context, describeInstancesInput *ec2.DescribeInstancesInput, fns ...func(*ec2.Options))) *MockClient_DescribeInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeInstancesInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeInstancesInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeInstances_Call) Return(describeInstancesOutput *ec2.DescribeInstancesOutput, err error) *MockClient_DescribeInstances_Call {
	_c.Call.Return(describeInstancesOutput, err)
	return _c
}

func (_c *MockClient_DescribeInstances_Call) RunAndReturn(run func(context1 context.Context, describeInstancesInput *ec2.DescribeInstancesInput, fns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error)) *MockClient_DescribeInstances_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeInternetGateways provides a mock function for the type MockClient
func (_mock *MockClient) DescribeInternetGateways(context1 context.Context, describeInternetGatewaysInput *ec2.DescribeInternetGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeInternetGatewaysInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeInternetGatewaysInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeInternetGateways")
	}

	var r0 *ec2.DescribeInternetGatewaysOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInternetGatewaysInput, ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error)); ok {
		return returnFunc(context1, describeInternetGatewaysInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInternetGatewaysInput, ...func(*ec2.Options)) *ec2.DescribeInternetGatewaysOutput); ok {
		r0 = returnFunc(context1, describeInternetGatewaysInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInternetGatewaysOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInternetGatewaysInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeInternetGatewaysInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeInternetGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInternetGateways'
type MockClient_DescribeInternetGateways_Call struct {
	*mock.Call
}

// DescribeInternetGateways is a helper method to define mock.On call
//   - context1 context.Context
//   - describeInternetGatewaysInput *ec2.DescribeInternetGatewaysInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeInternetGateways(context1 interface{}, describeInternetGatewaysInput interface{}, fns ...interface{}) *MockClient_DescribeInternetGateways_Call {
	return &MockClient_DescribeInternetGateways_Call{Call: _e.mock.On("DescribeInternetGateways",
		append([]interface{}{context1, describeInternetGatewaysInput}, fns...)...)}
}

func (_c *MockClient_DescribeInternetGateways_Call) Run(run func(context1 context.Context, describeInternetGatewaysInput *ec2.DescribeInternetGatewaysInput, fns ...func(*ec2.Options))) *MockClient_DescribeInternetGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeInternetGatewaysInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeInternetGatewaysInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeInternetGateways_Call) Return(describeInternetGatewaysOutput *ec2.DescribeInternetGatewaysOutput, err error) *MockClient_DescribeInternetGateways_Call {
	_c.Call.Return(describeInternetGatewaysOutput, err)
	return _c
}

func (_c *MockClient_DescribeInternetGateways_Call) RunAndReturn(run func(context1 context.Context, describeInternetGatewaysInput *ec2.DescribeInternetGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error)) *MockClient_DescribeInternetGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNatGateways provides a mock function for the type MockClient
func (_mock *MockClient) DescribeNatGateways(context1 context.Context, describeNatGatewaysInput *ec2.DescribeNatGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeNatGatewaysInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeNatGatewaysInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeNatGateways")
	}

	var r0 *ec2.DescribeNatGatewaysOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error)); ok {
		return returnFunc(context1, describeNatGatewaysInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...func(*ec2.Options)) *ec2.DescribeNatGatewaysOutput); ok {
		r0 = returnFunc(context1, describeNatGatewaysInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNatGatewaysOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeNatGatewaysInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeNatGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNatGateways'
type MockClient_DescribeNatGateways_Call struct {
	*mock.Call
}

// DescribeNatGateways is a helper method to define mock.On call
//   - context1 context.Context
//   - describeNatGatewaysInput *ec2.DescribeNatGatewaysInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeNatGateways(context1 interface{}, describeNatGatewaysInput interface{}, fns ...interface{}) *MockClient_DescribeNatGateways_Call {
	return &MockClient_DescribeNatGateways_Call{Call: _e.mock.On("DescribeNatGateways",
		append([]interface{}{context1, describeNatGatewaysInput}, fns...)...)}
}

func (_c *MockClient_DescribeNatGateways_Call) Run(run func(context1 context.Context, describeNatGatewaysInput *ec2.DescribeNatGatewaysInput, fns ...func(*ec2.Options))) *MockClient_DescribeNatGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeNatGatewaysInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeNatGatewaysInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeNatGateways_Call) Return(describeNatGatewaysOutput *ec2.DescribeNatGatewaysOutput, err error) *MockClient_DescribeNatGateways_Call {
	_c.Call.Return(describeNatGatewaysOutput, err)
	return _c
}

func (_c *MockClient_DescribeNatGateways_Call) RunAndReturn(run func(context1 context.Context, describeNatGatewaysInput *ec2.DescribeNatGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error)) *MockClient_DescribeNatGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNetworkAcls provides a mock function for the type MockClient
func (_mock *MockClient) DescribeNetworkAcls(context1 context.Context, describeNetworkAclsInput *ec2.DescribeNetworkAclsInput, fns ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeNetworkAclsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeNetworkAclsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkAcls")
	}

	var r0 *ec2.DescribeNetworkAclsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkAclsInput, ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error)); ok {
		return returnFunc(context1, describeNetworkAclsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkAclsInput, ...func(*ec2.Options)) *ec2.DescribeNetworkAclsOutput); ok {
		r0 = returnFunc(context1, describeNetworkAclsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkAclsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkAclsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeNetworkAclsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeNetworkAcls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNetworkAcls'
type MockClient_DescribeNetworkAcls_Call struct {
	*mock.Call
}

// DescribeNetworkAcls is a helper method to define mock.On call
//   - context1 context.Context
//   - describeNetworkAclsInput *ec2.DescribeNetworkAclsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeNetworkAcls(context1 interface{}, describeNetworkAclsInput interface{}, fns ...interface{}) *MockClient_DescribeNetworkAcls_Call {
	return &MockClient_DescribeNetworkAcls_Call{Call: _e.mock.On("DescribeNetworkAcls",
		append([]interface{}{context1, describeNetworkAclsInput}, fns...)...)}
}

func (_c *MockClient_DescribeNetworkAcls_Call) Run(run func(context1 context.Context, describeNetworkAclsInput *ec2.DescribeNetworkAclsInput, fns ...func(*ec2.Options))) *MockClient_DescribeNetworkAcls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeNetworkAclsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeNetworkAclsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeNetworkAcls_Call) Return(describeNetworkAclsOutput *ec2.DescribeNetworkAclsOutput, err error) *MockClient_DescribeNetworkAcls_Call {
	_c.Call.Return(describeNetworkAclsOutput, err)
	return _c
}

func (_c *MockClient_DescribeNetworkAcls_Call) RunAndReturn(run func(context1 context.Context, describeNetworkAclsInput *ec2.DescribeNetworkAclsInput, fns ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error)) *MockClient_DescribeNetworkAcls_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNetworkInterfaces provides a mock function for the type MockClient
func (_mock *MockClient) DescribeNetworkInterfaces(context1 context.Context, describeNetworkInterfacesInput *ec2.DescribeNetworkInterfacesInput, fns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeNetworkInterfacesInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeNetworkInterfacesInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkInterfaces")
	}

	var r0 *ec2.DescribeNetworkInterfacesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error)); ok {
		return returnFunc(context1, describeNetworkInterfacesInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...func(*ec2.Options)) *ec2.DescribeNetworkInterfacesOutput); ok {
		r0 = returnFunc(context1, describeNetworkInterfacesInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfacesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeNetworkInterfacesInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeNetworkInterfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNetworkInterfaces'
type MockClient_DescribeNetworkInterfaces_Call struct {
	*mock.Call
}

// DescribeNetworkInterfaces is a helper method to define mock.On call
//   - context1 context.Context
//   - describeNetworkInterfacesInput *ec2.DescribeNetworkInterfacesInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeNetworkInterfaces(context1 interface{}, describeNetworkInterfacesInput interface{}, fns ...interface{}) *MockClient_DescribeNetworkInterfaces_Call {
	return &MockClient_DescribeNetworkInterfaces_Call{Call: _e.mock.On("DescribeNetworkInterfaces",
		append([]interface{}{context1, describeNetworkInterfacesInput}, fns...)...)}
}

func (_c *MockClient_DescribeNetworkInterfaces_Call) Run(run func(context1 context.Context, describeNetworkInterfacesInput *ec2.DescribeNetworkInterfacesInput, fns ...func(*ec2.Options))) *MockClient_DescribeNetworkInterfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeNetworkInterfacesInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeNetworkInterfacesInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeNetworkInterfaces_Call) Return(describeNetworkInterfacesOutput *ec2.DescribeNetworkInterfacesOutput, err error) *MockClient_DescribeNetworkInterfaces_Call {
	_c.Call.Return(describeNetworkInterfacesOutput, err)
	return _c
}

func (_c *MockClient_DescribeNetworkInterfaces_Call) RunAndReturn(run func(context1 context.Context, describeNetworkInterfacesInput *ec2.DescribeNetworkInterfacesInput, fns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error)) *MockClient_DescribeNetworkInterfaces_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeRouteTables provides a mock function for the type MockClient
func (_mock *MockClient) DescribeRouteTables(context1 context.Context, describeRouteTablesInput *ec2.DescribeRouteTablesInput, fns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeRouteTablesInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeRouteTablesInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeRouteTables")
	}

	var r0 *ec2.DescribeRouteTablesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error)); ok {
		return returnFunc(context1, describeRouteTablesInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) *ec2.DescribeRouteTablesOutput); ok {
		r0 = returnFunc(context1, describeRouteTablesInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRouteTablesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeRouteTablesInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRouteTables'
type MockClient_DescribeRouteTables_Call struct {
	*mock.Call
}

// DescribeRouteTables is a helper method to define mock.On call
//   - context1 context.Context
//   - describeRouteTablesInput *ec2.DescribeRouteTablesInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeRouteTables(context1 interface{}, describeRouteTablesInput interface{}, fns ...interface{}) *MockClient_DescribeRouteTables_Call {
	return &MockClient_DescribeRouteTables_Call{Call: _e.mock.On("DescribeRouteTables",
		append([]interface{}{context1, describeRouteTablesInput}, fns...)...)}
}

func (_c *MockClient_DescribeRouteTables_Call) Run(run func(context1 context.Context, describeRouteTablesInput *ec2.DescribeRouteTablesInput, fns ...func(*ec2.Options))) *MockClient_DescribeRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeRouteTablesInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeRouteTablesInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeRouteTables_Call) Return(describeRouteTablesOutput *ec2.DescribeRouteTablesOutput, err error) *MockClient_DescribeRouteTables_Call {
	_c.Call.Return(describeRouteTablesOutput, err)
	return _c
}

func (_c *MockClient_DescribeRouteTables_Call) RunAndReturn(run func(context1 context.Context, describeRouteTablesInput *ec2.DescribeRouteTablesInput, fns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error)) *MockClient_DescribeRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSecurityGroups provides a mock function for the type MockClient
func (_mock *MockClient) DescribeSecurityGroups(context1 context.Context, describeSecurityGroupsInput *ec2.DescribeSecurityGroupsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeSecurityGroupsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeSecurityGroupsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeSecurityGroups")
	}

	var r0 *ec2.DescribeSecurityGroupsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error)); ok {
		return returnFunc(context1, describeSecurityGroupsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...func(*ec2.Options)) *ec2.DescribeSecurityGroupsOutput); ok {
		r0 = returnFunc(context1, describeSecurityGroupsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSecurityGroupsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeSecurityGroupsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSecurityGroups'
type MockClient_DescribeSecurityGroups_Call struct {
	*mock.Call
}

// DescribeSecurityGroups is a helper method to define mock.On call
//   - context1 context.Context
//   - describeSecurityGroupsInput *ec2.DescribeSecurityGroupsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeSecurityGroups(context1 interface{}, describeSecurityGroupsInput interface{}, fns ...interface{}) *MockClient_DescribeSecurityGroups_Call {
	return &MockClient_DescribeSecurityGroups_Call{Call: _e.mock.On("DescribeSecurityGroups",
		append([]interface{}{context1, describeSecurityGroupsInput}, fns...)...)}
}

func (_c *MockClient_DescribeSecurityGroups_Call) Run(run func(context1 context.Context, describeSecurityGroupsInput *ec2.DescribeSecurityGroupsInput, fns ...func(*ec2.Options))) *MockClient_DescribeSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeSecurityGroupsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeSecurityGroupsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeSecurityGroups_Call) Return(describeSecurityGroupsOutput *ec2.DescribeSecurityGroupsOutput, err error) *MockClient_DescribeSecurityGroups_Call {
	_c.Call.Return(describeSecurityGroupsOutput, err)
	return _c
}

func (_c *MockClient_DescribeSecurityGroups_Call) RunAndReturn(run func(context1 context.Context, describeSecurityGroupsInput *ec2.DescribeSecurityGroupsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error)) *MockClient_DescribeSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSnapshots provides a mock function for the type MockClient
func (_mock *MockClient) DescribeSnapshots(context1 context.Context, describeSnapshotsInput *ec2.DescribeSnapshotsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeSnapshotsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeSnapshotsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeSnapshots")
	}

	var r0 *ec2.DescribeSnapshotsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotsInput, ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error)); ok {
		return returnFunc(context1, describeSnapshotsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotsInput, ...func(*ec2.Options)) *ec2.DescribeSnapshotsOutput); ok {
		r0 = returnFunc(context1, describeSnapshotsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSnapshotsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSnapshotsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeSnapshotsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSnapshots'
type MockClient_DescribeSnapshots_Call struct {
	*mock.Call
}

// DescribeSnapshots is a helper method to define mock.On call
//   - context1 context.Context
//   - describeSnapshotsInput *ec2.DescribeSnapshotsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeSnapshots(context1 interface{}, describeSnapshotsInput interface{}, fns ...interface{}) *MockClient_DescribeSnapshots_Call {
	return &MockClient_DescribeSnapshots_Call{Call: _e.mock.On("DescribeSnapshots",
		append([]interface{}{context1, describeSnapshotsInput}, fns...)...)}
}

func (_c *MockClient_DescribeSnapshots_Call) Run(run func(context1 context.Context, describeSnapshotsInput *ec2.DescribeSnapshotsInput, fns ...func(*ec2.Options))) *MockClient_DescribeSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeSnapshotsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeSnapshotsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeSnapshots_Call) Return(describeSnapshotsOutput *ec2.DescribeSnapshotsOutput, err error) *MockClient_DescribeSnapshots_Call {
	_c.Call.Return(describeSnapshotsOutput, err)
	return _c
}

func (_c *MockClient_DescribeSnapshots_Call) RunAndReturn(run func(context1 context.Context, describeSnapshotsInput *ec2.DescribeSnapshotsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error)) *MockClient_DescribeSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubnets provides a mock function for the type MockClient
func (_mock *MockClient) DescribeSubnets(context1 context.Context, describeSubnetsInput *ec2.DescribeSubnetsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeSubnetsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeSubnetsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeSubnets")
	}

	var r0 *ec2.DescribeSubnetsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error)); ok {
		return returnFunc(context1, describeSubnetsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) *ec2.DescribeSubnetsOutput); ok {
		r0 = returnFunc(context1, describeSubnetsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSubnetsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeSubnetsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubnets'
type MockClient_DescribeSubnets_Call struct {
	*mock.Call
}

// DescribeSubnets is a helper method to define mock.On call
//   - context1 context.Context
//   - describeSubnetsInput *ec2.DescribeSubnetsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeSubnets(context1 interface{}, describeSubnetsInput interface{}, fns ...interface{}) *MockClient_DescribeSubnets_Call {
	return &MockClient_DescribeSubnets_Call{Call: _e.mock.On("DescribeSubnets",
		append([]interface{}{context1, describeSubnetsInput}, fns...)...)}
}

func (_c *MockClient_DescribeSubnets_Call) Run(run func(context1 context.Context, describeSubnetsInput *ec2.DescribeSubnetsInput, fns ...func(*ec2.Options))) *MockClient_DescribeSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeSubnetsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeSubnetsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeSubnets_Call) Return(describeSubnetsOutput *ec2.DescribeSubnetsOutput, err error) *MockClient_DescribeSubnets_Call {
	_c.Call.Return(describeSubnetsOutput, err)
	return _c
}

func (_c *MockClient_DescribeSubnets_Call) RunAndReturn(run func(context1 context.Context, describeSubnetsInput *ec2.DescribeSubnetsInput, fns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error)) *MockClient_DescribeSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTransitGatewayAttachments provides a mock function for the type MockClient
func (_mock *MockClient) DescribeTransitGatewayAttachments(context1 context.Context, describeTransitGatewayAttachmentsInput *ec2.DescribeTransitGatewayAttachmentsInput, fns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeTransitGatewayAttachmentsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeTransitGatewayAttachmentsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeTransitGatewayAttachments")
	}

	var r0 *ec2.DescribeTransitGatewayAttachmentsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)); ok {
		return returnFunc(context1, describeTransitGatewayAttachmentsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...func(*ec2.Options)) *ec2.DescribeTransitGatewayAttachmentsOutput); ok {
		r0 = returnFunc(context1, describeTransitGatewayAttachmentsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayAttachmentsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeTransitGatewayAttachmentsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeTransitGatewayAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTransitGatewayAttachments'
type MockClient_DescribeTransitGatewayAttachments_Call struct {
	*mock.Call
}

// DescribeTransitGatewayAttachments is a helper method to define mock.On call
//   - context1 context.Context
//   - describeTransitGatewayAttachmentsInput *ec2.DescribeTransitGatewayAttachmentsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeTransitGatewayAttachments(context1 interface{}, describeTransitGatewayAttachmentsInput interface{}, fns ...interface{}) *MockClient_DescribeTransitGatewayAttachments_Call {
	return &MockClient_DescribeTransitGatewayAttachments_Call{Call: _e.mock.On("DescribeTransitGatewayAttachments",
		append([]interface{}{context1, describeTransitGatewayAttachmentsInput}, fns...)...)}
}

func (_c *MockClient_DescribeTransitGatewayAttachments_Call) Run(run func(context1 context.Context, describeTransitGatewayAttachmentsInput *ec2.DescribeTransitGatewayAttachmentsInput, fns ...func(*ec2.Options))) *MockClient_DescribeTransitGatewayAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeTransitGatewayAttachmentsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeTransitGatewayAttachmentsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeTransitGatewayAttachments_Call) Return(describeTransitGatewayAttachmentsOutput *ec2.DescribeTransitGatewayAttachmentsOutput, err error) *MockClient_DescribeTransitGatewayAttachments_Call {
	_c.Call.Return(describeTransitGatewayAttachmentsOutput, err)
	return _c
}

func (_c *MockClient_DescribeTransitGatewayAttachments_Call) RunAndReturn(run func(context1 context.Context, describeTransitGatewayAttachmentsInput *ec2.DescribeTransitGatewayAttachmentsInput, fns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)) *MockClient_DescribeTransitGatewayAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTransitGateways provides a mock function for the type MockClient
func (_mock *MockClient) DescribeTransitGateways(context1 context.Context, describeTransitGatewaysInput *ec2.DescribeTransitGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeTransitGatewaysInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeTransitGatewaysInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeTransitGateways")
	}

	var r0 *ec2.DescribeTransitGatewaysOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewaysInput, ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error)); ok {
		return returnFunc(context1, describeTransitGatewaysInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewaysInput, ...func(*ec2.Options)) *ec2.DescribeTransitGatewaysOutput); ok {
		r0 = returnFunc(context1, describeTransitGatewaysInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewaysOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewaysInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeTransitGatewaysInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeTransitGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTransitGateways'
type MockClient_DescribeTransitGateways_Call struct {
	*mock.Call
}

// DescribeTransitGateways is a helper method to define mock.On call
//   - context1 context.Context
//   - describeTransitGatewaysInput *ec2.DescribeTransitGatewaysInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeTransitGateways(context1 interface{}, describeTransitGatewaysInput interface{}, fns ...interface{}) *MockClient_DescribeTransitGateways_Call {
	return &MockClient_DescribeTransitGateways_Call{Call: _e.mock.On("DescribeTransitGateways",
		append([]interface{}{context1, describeTransitGatewaysInput}, fns...)...)}
}

func (_c *MockClient_DescribeTransitGateways_Call) Run(run func(context1 context.Context, describeTransitGatewaysInput *ec2.DescribeTransitGatewaysInput, fns ...func(*ec2.Options))) *MockClient_DescribeTransitGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeTransitGatewaysInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeTransitGatewaysInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeTransitGateways_Call) Return(describeTransitGatewaysOutput *ec2.DescribeTransitGatewaysOutput, err error) *MockClient_DescribeTransitGateways_Call {
	_c.Call.Return(describeTransitGatewaysOutput, err)
	return _c
}

func (_c *MockClient_DescribeTransitGateways_Call) RunAndReturn(run func(context1 context.Context, describeTransitGatewaysInput *ec2.DescribeTransitGatewaysInput, fns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error)) *MockClient_DescribeTransitGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVolumes provides a mock function for the type MockClient
func (_mock *MockClient) DescribeVolumes(context1 context.Context, describeVolumesInput *ec2.DescribeVolumesInput, fns ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeVolumesInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeVolumesInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeVolumes")
	}

	var r0 *ec2.DescribeVolumesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error)); ok {
		return returnFunc(context1, describeVolumesInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...func(*ec2.Options)) *ec2.DescribeVolumesOutput); ok {
		r0 = returnFunc(context1, describeVolumesInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumesInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeVolumesInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVolumes'
type MockClient_DescribeVolumes_Call struct {
	*mock.Call
}

// DescribeVolumes is a helper method to define mock.On call
//   - context1 context.Context
//   - describeVolumesInput *ec2.DescribeVolumesInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeVolumes(context1 interface{}, describeVolumesInput interface{}, fns ...interface{}) *MockClient_DescribeVolumes_Call {
	return &MockClient_DescribeVolumes_Call{Call: _e.mock.On("DescribeVolumes",
		append([]interface{}{context1, describeVolumesInput}, fns...)...)}
}

func (_c *MockClient_DescribeVolumes_Call) Run(run func(context1 context.Context, describeVolumesInput *ec2.DescribeVolumesInput, fns ...func(*ec2.Options))) *MockClient_DescribeVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeVolumesInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeVolumesInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeVolumes_Call) Return(describeVolumesOutput *ec2.DescribeVolumesOutput, err error) *MockClient_DescribeVolumes_Call {
	_c.Call.Return(describeVolumesOutput, err)
	return _c
}

func (_c *MockClient_DescribeVolumes_Call) RunAndReturn(run func(context1 context.Context, describeVolumesInput *ec2.DescribeVolumesInput, fns ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error)) *MockClient_DescribeVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVpcPeeringConnections provides a mock function for the type MockClient
func (_mock *MockClient) DescribeVpcPeeringConnections(context1 context.Context, describeVpcPeeringConnectionsInput *ec2.DescribeVpcPeeringConnectionsInput, fns ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeVpcPeeringConnectionsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeVpcPeeringConnectionsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcPeeringConnections")
	}

	var r0 *ec2.DescribeVpcPeeringConnectionsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error)); ok {
		return returnFunc(context1, describeVpcPeeringConnectionsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...func(*ec2.Options)) *ec2.DescribeVpcPeeringConnectionsOutput); ok {
		r0 = returnFunc(context1, describeVpcPeeringConnectionsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcPeeringConnectionsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeVpcPeeringConnectionsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeVpcPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVpcPeeringConnections'
type MockClient_DescribeVpcPeeringConnections_Call struct {
	*mock.Call
}

// DescribeVpcPeeringConnections is a helper method to define mock.On call
//   - context1 context.Context
//   - describeVpcPeeringConnectionsInput *ec2.DescribeVpcPeeringConnectionsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeVpcPeeringConnections(context1 interface{}, describeVpcPeeringConnectionsInput interface{}, fns ...interface{}) *MockClient_DescribeVpcPeeringConnections_Call {
	return &MockClient_DescribeVpcPeeringConnections_Call{Call: _e.mock.On("DescribeVpcPeeringConnections",
		append([]interface{}{context1, describeVpcPeeringConnectionsInput}, fns...)...)}
}

func (_c *MockClient_DescribeVpcPeeringConnections_Call) Run(run func(context1 context.Context, describeVpcPeeringConnectionsInput *ec2.DescribeVpcPeeringConnectionsInput, fns ...func(*ec2.Options))) *MockClient_DescribeVpcPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeVpcPeeringConnectionsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeVpcPeeringConnectionsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeVpcPeeringConnections_Call) Return(describeVpcPeeringConnectionsOutput *ec2.DescribeVpcPeeringConnectionsOutput, err error) *MockClient_DescribeVpcPeeringConnections_Call {
	_c.Call.Return(describeVpcPeeringConnectionsOutput, err)
	return _c
}

func (_c *MockClient_DescribeVpcPeeringConnections_Call) RunAndReturn(run func(context1 context.Context, describeVpcPeeringConnectionsInput *ec2.DescribeVpcPeeringConnectionsInput, fns ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error)) *MockClient_DescribeVpcPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVpcs provides a mock function for the type MockClient
func (_mock *MockClient) DescribeVpcs(context1 context.Context, describeVpcsInput *ec2.DescribeVpcsInput, fns ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeVpcsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeVpcsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcs")
	}

	var r0 *ec2.DescribeVpcsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error)); ok {
		return returnFunc(context1, describeVpcsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) *ec2.DescribeVpcsOutput); ok {
		r0 = returnFunc(context1, describeVpcsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(context1, describeVpcsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeVpcs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVpcs'
type MockClient_DescribeVpcs_Call struct {
	*mock.Call
}

// DescribeVpcs is a helper method to define mock.On call
//   - context1 context.Context
//   - describeVpcsInput *ec2.DescribeVpcsInput
//   - fns ...func(*ec2.Options)
func (_e *MockClient_Expecter) DescribeVpcs(context1 interface{}, describeVpcsInput interface{}, fns ...interface{}) *MockClient_DescribeVpcs_Call {
	return &MockClient_DescribeVpcs_Call{Call: _e.mock.On("DescribeVpcs",
		append([]interface{}{context1, describeVpcsInput}, fns...)...)}
}

func (_c *MockClient_DescribeVpcs_Call) Run(run func(context1 context.Context, describeVpcsInput *ec2.DescribeVpcsInput, fns ...func(*ec2.Options))) *MockClient_DescribeVpcs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.DescribeVpcsInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.DescribeVpcsInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeVpcs_Call) Return(describeVpcsOutput *ec2.DescribeVpcsOutput, err error) *MockClient_DescribeVpcs_Call {
	_c.Call.Return(describeVpcsOutput, err)
	return _c
}

func (_c *MockClient_DescribeVpcs_Call) RunAndReturn(run func(context1 context.Context, describeVpcsInput *ec2.DescribeVpcsInput, fns ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error)) *MockClient_DescribeVpcs_Call {
	_c.Call.Return(run)
	return _c
}

// GetEbsEncryptionByDefault provides a mock function for the type MockClient
func (_mock *MockClient) GetEbsEncryptionByDefault(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEbsEncryptionByDefault")
	}

	var r0 *ec2.GetEbsEncryptionByDefaultOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.GetEbsEncryptionByDefaultInput, ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.GetEbsEncryptionByDefaultInput, ...func(*ec2.Options)) *ec2.GetEbsEncryptionByDefaultOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetEbsEncryptionByDefaultOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.GetEbsEncryptionByDefaultInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetEbsEncryptionByDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEbsEncryptionByDefault'
type MockClient_GetEbsEncryptionByDefault_Call struct {
	*mock.Call
}

// GetEbsEncryptionByDefault is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.GetEbsEncryptionByDefaultInput
//   - optFns ...func(*ec2.Options)
func (_e *MockClient_Expecter) GetEbsEncryptionByDefault(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetEbsEncryptionByDefault_Call {
	return &MockClient_GetEbsEncryptionByDefault_Call{Call: _e.mock.On("GetEbsEncryptionByDefault",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetEbsEncryptionByDefault_Call) Run(run func(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options))) *MockClient_GetEbsEncryptionByDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ec2.GetEbsEncryptionByDefaultInput
		if args[1] != nil {
			arg1 = args[1].(*ec2.GetEbsEncryptionByDefaultInput)
		}
		var arg2 []func(*ec2.Options)
		var variadicArgs []func(*ec2.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*ec2.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetEbsEncryptionByDefault_Call) Return(getEbsEncryptionByDefaultOutput *ec2.GetEbsEncryptionByDefaultOutput, err error) *MockClient_GetEbsEncryptionByDefault_Call {
	_c.Call.Return(getEbsEncryptionByDefaultOutput, err)
	return _c
}

func (_c *MockClient_GetEbsEncryptionByDefault_Call) RunAndReturn(run func(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error)) *MockClient_GetEbsEncryptionByDefault_Call {
	_c.Call.Return(run)
	return _c
}
