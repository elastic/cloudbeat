// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package awslib

import (
	context "context"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	clog "github.com/elastic/cloudbeat/internal/infra/clog"

	mock "github.com/stretchr/testify/mock"
)

// MockCredentialsValidator is an autogenerated mock type for the CredentialsValidator type
type MockCredentialsValidator struct {
	mock.Mock
}

type MockCredentialsValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialsValidator) EXPECT() *MockCredentialsValidator_Expecter {
	return &MockCredentialsValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: ctx, cnf, log
func (_m *MockCredentialsValidator) Validate(ctx context.Context, cnf aws.Config, log *clog.Logger) bool {
	ret := _m.Called(ctx, cnf, log)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, aws.Config, *clog.Logger) bool); ok {
		r0 = rf(ctx, cnf, log)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCredentialsValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockCredentialsValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - cnf aws.Config
//   - log *clog.Logger
func (_e *MockCredentialsValidator_Expecter) Validate(ctx interface{}, cnf interface{}, log interface{}) *MockCredentialsValidator_Validate_Call {
	return &MockCredentialsValidator_Validate_Call{Call: _e.mock.On("Validate", ctx, cnf, log)}
}

func (_c *MockCredentialsValidator_Validate_Call) Run(run func(ctx context.Context, cnf aws.Config, log *clog.Logger)) *MockCredentialsValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aws.Config), args[2].(*clog.Logger))
	})
	return _c
}

func (_c *MockCredentialsValidator_Validate_Call) Return(_a0 bool) *MockCredentialsValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsValidator_Validate_Call) RunAndReturn(run func(context.Context, aws.Config, *clog.Logger) bool) *MockCredentialsValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialsValidator creates a new instance of MockCredentialsValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialsValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialsValidator {
	mock := &MockCredentialsValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
