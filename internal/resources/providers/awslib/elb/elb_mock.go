// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package elb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
	"github.com/elastic/cloudbeat/internal/resources/providers/awslib"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DescribeLoadBalancers provides a mock function for the type MockClient
func (_mock *MockClient) DescribeLoadBalancers(context1 context.Context, describeLoadBalancersInput *elasticloadbalancing.DescribeLoadBalancersInput, fns ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancersOutput, error) {
	// func(*elasticloadbalancing.Options)
	_va := make([]interface{}, len(fns))
	for _i := range fns {
		_va[_i] = fns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, context1, describeLoadBalancersInput)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLoadBalancers")
	}

	var r0 *elasticloadbalancing.DescribeLoadBalancersOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticloadbalancing.DescribeLoadBalancersInput, ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancersOutput, error)); ok {
		return returnFunc(context1, describeLoadBalancersInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticloadbalancing.DescribeLoadBalancersInput, ...func(*elasticloadbalancing.Options)) *elasticloadbalancing.DescribeLoadBalancersOutput); ok {
		r0 = returnFunc(context1, describeLoadBalancersInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticloadbalancing.DescribeLoadBalancersOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *elasticloadbalancing.DescribeLoadBalancersInput, ...func(*elasticloadbalancing.Options)) error); ok {
		r1 = returnFunc(context1, describeLoadBalancersInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeLoadBalancers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLoadBalancers'
type MockClient_DescribeLoadBalancers_Call struct {
	*mock.Call
}

// DescribeLoadBalancers is a helper method to define mock.On call
//   - context1 context.Context
//   - describeLoadBalancersInput *elasticloadbalancing.DescribeLoadBalancersInput
//   - fns ...func(*elasticloadbalancing.Options)
func (_e *MockClient_Expecter) DescribeLoadBalancers(context1 interface{}, describeLoadBalancersInput interface{}, fns ...interface{}) *MockClient_DescribeLoadBalancers_Call {
	return &MockClient_DescribeLoadBalancers_Call{Call: _e.mock.On("DescribeLoadBalancers",
		append([]interface{}{context1, describeLoadBalancersInput}, fns...)...)}
}

func (_c *MockClient_DescribeLoadBalancers_Call) Run(run func(context1 context.Context, describeLoadBalancersInput *elasticloadbalancing.DescribeLoadBalancersInput, fns ...func(*elasticloadbalancing.Options))) *MockClient_DescribeLoadBalancers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *elasticloadbalancing.DescribeLoadBalancersInput
		if args[1] != nil {
			arg1 = args[1].(*elasticloadbalancing.DescribeLoadBalancersInput)
		}
		var arg2 []func(*elasticloadbalancing.Options)
		variadicArgs := make([]func(*elasticloadbalancing.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*elasticloadbalancing.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeLoadBalancers_Call) Return(describeLoadBalancersOutput *elasticloadbalancing.DescribeLoadBalancersOutput, err error) *MockClient_DescribeLoadBalancers_Call {
	_c.Call.Return(describeLoadBalancersOutput, err)
	return _c
}

func (_c *MockClient_DescribeLoadBalancers_Call) RunAndReturn(run func(context1 context.Context, describeLoadBalancersInput *elasticloadbalancing.DescribeLoadBalancersInput, fns ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancersOutput, error)) *MockClient_DescribeLoadBalancers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoadBalancerDescriber creates a new instance of MockLoadBalancerDescriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoadBalancerDescriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoadBalancerDescriber {
	mock := &MockLoadBalancerDescriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoadBalancerDescriber is an autogenerated mock type for the LoadBalancerDescriber type
type MockLoadBalancerDescriber struct {
	mock.Mock
}

type MockLoadBalancerDescriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoadBalancerDescriber) EXPECT() *MockLoadBalancerDescriber_Expecter {
	return &MockLoadBalancerDescriber_Expecter{mock: &_m.Mock}
}

// DescribeAllLoadBalancers provides a mock function for the type MockLoadBalancerDescriber
func (_mock *MockLoadBalancerDescriber) DescribeAllLoadBalancers(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAllLoadBalancers")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeAllLoadBalancers'
type MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call struct {
	*mock.Call
}

// DescribeAllLoadBalancers is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockLoadBalancerDescriber_Expecter) DescribeAllLoadBalancers(context1 interface{}) *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call {
	return &MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call{Call: _e.mock.On("DescribeAllLoadBalancers", context1)}
}

func (_c *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call) Run(run func(context1 context.Context)) *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call) Return(awsResources []awslib.AwsResource, err error) *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *MockLoadBalancerDescriber_DescribeAllLoadBalancers_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLoadBalancers provides a mock function for the type MockLoadBalancerDescriber
func (_mock *MockLoadBalancerDescriber) DescribeLoadBalancers(ctx context.Context, balancersNames []string) ([]types.LoadBalancerDescription, error) {
	ret := _mock.Called(ctx, balancersNames)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLoadBalancers")
	}

	var r0 []types.LoadBalancerDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]types.LoadBalancerDescription, error)); ok {
		return returnFunc(ctx, balancersNames)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []types.LoadBalancerDescription); ok {
		r0 = returnFunc(ctx, balancersNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.LoadBalancerDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, balancersNames)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoadBalancerDescriber_DescribeLoadBalancers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLoadBalancers'
type MockLoadBalancerDescriber_DescribeLoadBalancers_Call struct {
	*mock.Call
}

// DescribeLoadBalancers is a helper method to define mock.On call
//   - ctx context.Context
//   - balancersNames []string
func (_e *MockLoadBalancerDescriber_Expecter) DescribeLoadBalancers(ctx interface{}, balancersNames interface{}) *MockLoadBalancerDescriber_DescribeLoadBalancers_Call {
	return &MockLoadBalancerDescriber_DescribeLoadBalancers_Call{Call: _e.mock.On("DescribeLoadBalancers", ctx, balancersNames)}
}

func (_c *MockLoadBalancerDescriber_DescribeLoadBalancers_Call) Run(run func(ctx context.Context, balancersNames []string)) *MockLoadBalancerDescriber_DescribeLoadBalancers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLoadBalancerDescriber_DescribeLoadBalancers_Call) Return(loadBalancerDescriptions []types.LoadBalancerDescription, err error) *MockLoadBalancerDescriber_DescribeLoadBalancers_Call {
	_c.Call.Return(loadBalancerDescriptions, err)
	return _c
}

func (_c *MockLoadBalancerDescriber_DescribeLoadBalancers_Call) RunAndReturn(run func(ctx context.Context, balancersNames []string) ([]types.LoadBalancerDescription, error)) *MockLoadBalancerDescriber_DescribeLoadBalancers_Call {
	_c.Call.Return(run)
	return _c
}
