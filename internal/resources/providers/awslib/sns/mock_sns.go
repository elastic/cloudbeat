// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.2. DO NOT EDIT.

package sns

import (
	context "context"

	awslib "github.com/elastic/cloudbeat/internal/resources/providers/awslib"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sns/types"
)

// MockSNS is an autogenerated mock type for the SNS type
type MockSNS struct {
	mock.Mock
}

type MockSNS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSNS) EXPECT() *MockSNS_Expecter {
	return &MockSNS_Expecter{mock: &_m.Mock}
}

// ListSubscriptionsByTopic provides a mock function with given fields: ctx, region, topic
func (_m *MockSNS) ListSubscriptionsByTopic(ctx context.Context, region string, topic string) ([]types.Subscription, error) {
	ret := _m.Called(ctx, region, topic)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionsByTopic")
	}

	var r0 []types.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]types.Subscription, error)); ok {
		return rf(ctx, region, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []types.Subscription); ok {
		r0 = rf(ctx, region, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, region, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNS_ListSubscriptionsByTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionsByTopic'
type MockSNS_ListSubscriptionsByTopic_Call struct {
	*mock.Call
}

// ListSubscriptionsByTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - region string
//   - topic string
func (_e *MockSNS_Expecter) ListSubscriptionsByTopic(ctx interface{}, region interface{}, topic interface{}) *MockSNS_ListSubscriptionsByTopic_Call {
	return &MockSNS_ListSubscriptionsByTopic_Call{Call: _e.mock.On("ListSubscriptionsByTopic", ctx, region, topic)}
}

func (_c *MockSNS_ListSubscriptionsByTopic_Call) Run(run func(ctx context.Context, region string, topic string)) *MockSNS_ListSubscriptionsByTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSNS_ListSubscriptionsByTopic_Call) Return(_a0 []types.Subscription, _a1 error) *MockSNS_ListSubscriptionsByTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNS_ListSubscriptionsByTopic_Call) RunAndReturn(run func(context.Context, string, string) ([]types.Subscription, error)) *MockSNS_ListSubscriptionsByTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: ctx
func (_m *MockSNS) ListTopics(ctx context.Context) ([]types.Topic, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 []types.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.Topic, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.Topic); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNS_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type MockSNS_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSNS_Expecter) ListTopics(ctx interface{}) *MockSNS_ListTopics_Call {
	return &MockSNS_ListTopics_Call{Call: _e.mock.On("ListTopics", ctx)}
}

func (_c *MockSNS_ListTopics_Call) Run(run func(ctx context.Context)) *MockSNS_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSNS_ListTopics_Call) Return(_a0 []types.Topic, _a1 error) *MockSNS_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNS_ListTopics_Call) RunAndReturn(run func(context.Context) ([]types.Topic, error)) *MockSNS_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopicsWithSubscriptions provides a mock function with given fields: ctx
func (_m *MockSNS) ListTopicsWithSubscriptions(ctx context.Context) ([]awslib.AwsResource, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTopicsWithSubscriptions")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNS_ListTopicsWithSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopicsWithSubscriptions'
type MockSNS_ListTopicsWithSubscriptions_Call struct {
	*mock.Call
}

// ListTopicsWithSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSNS_Expecter) ListTopicsWithSubscriptions(ctx interface{}) *MockSNS_ListTopicsWithSubscriptions_Call {
	return &MockSNS_ListTopicsWithSubscriptions_Call{Call: _e.mock.On("ListTopicsWithSubscriptions", ctx)}
}

func (_c *MockSNS_ListTopicsWithSubscriptions_Call) Run(run func(ctx context.Context)) *MockSNS_ListTopicsWithSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSNS_ListTopicsWithSubscriptions_Call) Return(_a0 []awslib.AwsResource, _a1 error) *MockSNS_ListTopicsWithSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNS_ListTopicsWithSubscriptions_Call) RunAndReturn(run func(context.Context) ([]awslib.AwsResource, error)) *MockSNS_ListTopicsWithSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSNS creates a new instance of MockSNS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSNS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSNS {
	mock := &MockSNS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
