// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package awslib

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	"github.com/elastic/cloudbeat/internal/dataprovider/providers/cloud"
	"github.com/elastic/cloudbeat/internal/infra/clog"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountProviderAPI creates a new instance of MockAccountProviderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountProviderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountProviderAPI {
	mock := &MockAccountProviderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountProviderAPI is an autogenerated mock type for the AccountProviderAPI type
type MockAccountProviderAPI struct {
	mock.Mock
}

type MockAccountProviderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountProviderAPI) EXPECT() *MockAccountProviderAPI_Expecter {
	return &MockAccountProviderAPI_Expecter{mock: &_m.Mock}
}

// ListAccounts provides a mock function for the type MockAccountProviderAPI
func (_mock *MockAccountProviderAPI) ListAccounts(ctx context.Context, log *clog.Logger, cfg aws.Config) ([]cloud.Identity, error) {
	ret := _mock.Called(ctx, log, cfg)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []cloud.Identity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *clog.Logger, aws.Config) ([]cloud.Identity, error)); ok {
		return returnFunc(ctx, log, cfg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *clog.Logger, aws.Config) []cloud.Identity); ok {
		r0 = returnFunc(ctx, log, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cloud.Identity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *clog.Logger, aws.Config) error); ok {
		r1 = returnFunc(ctx, log, cfg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountProviderAPI_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type MockAccountProviderAPI_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - log *clog.Logger
//   - cfg aws.Config
func (_e *MockAccountProviderAPI_Expecter) ListAccounts(ctx interface{}, log interface{}, cfg interface{}) *MockAccountProviderAPI_ListAccounts_Call {
	return &MockAccountProviderAPI_ListAccounts_Call{Call: _e.mock.On("ListAccounts", ctx, log, cfg)}
}

func (_c *MockAccountProviderAPI_ListAccounts_Call) Run(run func(ctx context.Context, log *clog.Logger, cfg aws.Config)) *MockAccountProviderAPI_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *clog.Logger
		if args[1] != nil {
			arg1 = args[1].(*clog.Logger)
		}
		var arg2 aws.Config
		if args[2] != nil {
			arg2 = args[2].(aws.Config)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountProviderAPI_ListAccounts_Call) Return(identitys []cloud.Identity, err error) *MockAccountProviderAPI_ListAccounts_Call {
	_c.Call.Return(identitys, err)
	return _c
}

func (_c *MockAccountProviderAPI_ListAccounts_Call) RunAndReturn(run func(ctx context.Context, log *clog.Logger, cfg aws.Config) ([]cloud.Identity, error)) *MockAccountProviderAPI_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOrganizationsAPI creates a new instance of mockOrganizationsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOrganizationsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOrganizationsAPI {
	mock := &mockOrganizationsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockOrganizationsAPI is an autogenerated mock type for the organizationsAPI type
type mockOrganizationsAPI struct {
	mock.Mock
}

type mockOrganizationsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOrganizationsAPI) EXPECT() *mockOrganizationsAPI_Expecter {
	return &mockOrganizationsAPI_Expecter{mock: &_m.Mock}
}

// DescribeOrganizationalUnit provides a mock function for the type mockOrganizationsAPI
func (_mock *mockOrganizationsAPI) DescribeOrganizationalUnit(context1 context.Context, describeOrganizationalUnitInput *organizations.DescribeOrganizationalUnitInput, fns ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, describeOrganizationalUnitInput, fns)
	} else {
		tmpRet = _mock.Called(context1, describeOrganizationalUnitInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationalUnit")
	}

	var r0 *organizations.DescribeOrganizationalUnitOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error)); ok {
		return returnFunc(context1, describeOrganizationalUnitInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.DescribeOrganizationalUnitOutput); ok {
		r0 = returnFunc(context1, describeOrganizationalUnitInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeOrganizationalUnitOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = returnFunc(context1, describeOrganizationalUnitInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockOrganizationsAPI_DescribeOrganizationalUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeOrganizationalUnit'
type mockOrganizationsAPI_DescribeOrganizationalUnit_Call struct {
	*mock.Call
}

// DescribeOrganizationalUnit is a helper method to define mock.On call
//   - context1 context.Context
//   - describeOrganizationalUnitInput *organizations.DescribeOrganizationalUnitInput
//   - fns ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) DescribeOrganizationalUnit(context1 interface{}, describeOrganizationalUnitInput interface{}, fns ...interface{}) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	return &mockOrganizationsAPI_DescribeOrganizationalUnit_Call{Call: _e.mock.On("DescribeOrganizationalUnit",
		append([]interface{}{context1, describeOrganizationalUnitInput}, fns...)...)}
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) Run(run func(context1 context.Context, describeOrganizationalUnitInput *organizations.DescribeOrganizationalUnitInput, fns ...func(*organizations.Options))) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *organizations.DescribeOrganizationalUnitInput
		if args[1] != nil {
			arg1 = args[1].(*organizations.DescribeOrganizationalUnitInput)
		}
		var arg2 []func(*organizations.Options)
		var variadicArgs []func(*organizations.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*organizations.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) Return(describeOrganizationalUnitOutput *organizations.DescribeOrganizationalUnitOutput, err error) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Return(describeOrganizationalUnitOutput, err)
	return _c
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) RunAndReturn(run func(context1 context.Context, describeOrganizationalUnitInput *organizations.DescribeOrganizationalUnitInput, fns ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error)) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function for the type mockOrganizationsAPI
func (_mock *mockOrganizationsAPI) ListAccounts(context1 context.Context, listAccountsInput *organizations.ListAccountsInput, fns ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listAccountsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listAccountsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 *organizations.ListAccountsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error)); ok {
		return returnFunc(context1, listAccountsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) *organizations.ListAccountsOutput); ok {
		r0 = returnFunc(context1, listAccountsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListAccountsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) error); ok {
		r1 = returnFunc(context1, listAccountsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockOrganizationsAPI_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type mockOrganizationsAPI_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - context1 context.Context
//   - listAccountsInput *organizations.ListAccountsInput
//   - fns ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) ListAccounts(context1 interface{}, listAccountsInput interface{}, fns ...interface{}) *mockOrganizationsAPI_ListAccounts_Call {
	return &mockOrganizationsAPI_ListAccounts_Call{Call: _e.mock.On("ListAccounts",
		append([]interface{}{context1, listAccountsInput}, fns...)...)}
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) Run(run func(context1 context.Context, listAccountsInput *organizations.ListAccountsInput, fns ...func(*organizations.Options))) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *organizations.ListAccountsInput
		if args[1] != nil {
			arg1 = args[1].(*organizations.ListAccountsInput)
		}
		var arg2 []func(*organizations.Options)
		var variadicArgs []func(*organizations.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*organizations.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) Return(listAccountsOutput *organizations.ListAccountsOutput, err error) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Return(listAccountsOutput, err)
	return _c
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) RunAndReturn(run func(context1 context.Context, listAccountsInput *organizations.ListAccountsInput, fns ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error)) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListParents provides a mock function for the type mockOrganizationsAPI
func (_mock *mockOrganizationsAPI) ListParents(context1 context.Context, listParentsInput *organizations.ListParentsInput, fns ...func(*organizations.Options)) (*organizations.ListParentsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listParentsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listParentsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListParents")
	}

	var r0 *organizations.ListParentsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) (*organizations.ListParentsOutput, error)); ok {
		return returnFunc(context1, listParentsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) *organizations.ListParentsOutput); ok {
		r0 = returnFunc(context1, listParentsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListParentsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) error); ok {
		r1 = returnFunc(context1, listParentsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockOrganizationsAPI_ListParents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParents'
type mockOrganizationsAPI_ListParents_Call struct {
	*mock.Call
}

// ListParents is a helper method to define mock.On call
//   - context1 context.Context
//   - listParentsInput *organizations.ListParentsInput
//   - fns ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) ListParents(context1 interface{}, listParentsInput interface{}, fns ...interface{}) *mockOrganizationsAPI_ListParents_Call {
	return &mockOrganizationsAPI_ListParents_Call{Call: _e.mock.On("ListParents",
		append([]interface{}{context1, listParentsInput}, fns...)...)}
}

func (_c *mockOrganizationsAPI_ListParents_Call) Run(run func(context1 context.Context, listParentsInput *organizations.ListParentsInput, fns ...func(*organizations.Options))) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *organizations.ListParentsInput
		if args[1] != nil {
			arg1 = args[1].(*organizations.ListParentsInput)
		}
		var arg2 []func(*organizations.Options)
		var variadicArgs []func(*organizations.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*organizations.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockOrganizationsAPI_ListParents_Call) Return(listParentsOutput *organizations.ListParentsOutput, err error) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Return(listParentsOutput, err)
	return _c
}

func (_c *mockOrganizationsAPI_ListParents_Call) RunAndReturn(run func(context1 context.Context, listParentsInput *organizations.ListParentsInput, fns ...func(*organizations.Options)) (*organizations.ListParentsOutput, error)) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Return(run)
	return _c
}
