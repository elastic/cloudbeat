// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package awslib

import (
	aws "github.com/aws/aws-sdk-go-v2/aws"
	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"
)

// MockCrossRegionFactory is an autogenerated mock type for the CrossRegionFactory type
type MockCrossRegionFactory[T interface{}] struct {
	mock.Mock
}

type MockCrossRegionFactory_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCrossRegionFactory[T]) EXPECT() *MockCrossRegionFactory_Expecter[T] {
	return &MockCrossRegionFactory_Expecter[T]{mock: &_m.Mock}
}

// NewMultiRegionClients provides a mock function with given fields: selector, cfg, factory, log
func (_m *MockCrossRegionFactory[T]) NewMultiRegionClients(selector RegionsSelector, cfg aws.Config, factory func(aws.Config) T, log *logp.Logger) CrossRegionFetcher[T] {
	ret := _m.Called(selector, cfg, factory, log)

	var r0 CrossRegionFetcher[T]
	if rf, ok := ret.Get(0).(func(RegionsSelector, aws.Config, func(aws.Config) T, *logp.Logger) CrossRegionFetcher[T]); ok {
		r0 = rf(selector, cfg, factory, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CrossRegionFetcher[T])
		}
	}

	return r0
}

// MockCrossRegionFactory_NewMultiRegionClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMultiRegionClients'
type MockCrossRegionFactory_NewMultiRegionClients_Call[T interface{}] struct {
	*mock.Call
}

// NewMultiRegionClients is a helper method to define mock.On call
//   - selector RegionsSelector
//   - cfg aws.Config
//   - factory func(aws.Config) T
//   - log *logp.Logger
func (_e *MockCrossRegionFactory_Expecter[T]) NewMultiRegionClients(selector interface{}, cfg interface{}, factory interface{}, log interface{}) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	return &MockCrossRegionFactory_NewMultiRegionClients_Call[T]{Call: _e.mock.On("NewMultiRegionClients", selector, cfg, factory, log)}
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) Run(run func(selector RegionsSelector, cfg aws.Config, factory func(aws.Config) T, log *logp.Logger)) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RegionsSelector), args[1].(aws.Config), args[2].(func(aws.Config) T), args[3].(*logp.Logger))
	})
	return _c
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) Return(_a0 CrossRegionFetcher[T]) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) RunAndReturn(run func(RegionsSelector, aws.Config, func(aws.Config) T, *logp.Logger) CrossRegionFetcher[T]) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockCrossRegionFactory creates a new instance of MockCrossRegionFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrossRegionFactory[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrossRegionFactory[T] {
	mock := &MockCrossRegionFactory[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
