// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package configservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/elastic/cloudbeat/internal/resources/providers/awslib"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DescribeConfigurationRecorderStatus provides a mock function for the type MockClient
func (_mock *MockClient) DescribeConfigurationRecorderStatus(ctx context.Context, params *configservice.DescribeConfigurationRecorderStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	// func(*configservice.Options)
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationRecorderStatus")
	}

	var r0 *configservice.DescribeConfigurationRecorderStatusOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationRecorderStatusOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationRecorderStatusOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeConfigurationRecorderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeConfigurationRecorderStatus'
type MockClient_DescribeConfigurationRecorderStatus_Call struct {
	*mock.Call
}

// DescribeConfigurationRecorderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params *configservice.DescribeConfigurationRecorderStatusInput
//   - optFns ...func(*configservice.Options)
func (_e *MockClient_Expecter) DescribeConfigurationRecorderStatus(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DescribeConfigurationRecorderStatus_Call {
	return &MockClient_DescribeConfigurationRecorderStatus_Call{Call: _e.mock.On("DescribeConfigurationRecorderStatus",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DescribeConfigurationRecorderStatus_Call) Run(run func(ctx context.Context, params *configservice.DescribeConfigurationRecorderStatusInput, optFns ...func(*configservice.Options))) *MockClient_DescribeConfigurationRecorderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *configservice.DescribeConfigurationRecorderStatusInput
		if args[1] != nil {
			arg1 = args[1].(*configservice.DescribeConfigurationRecorderStatusInput)
		}
		var arg2 []func(*configservice.Options)
		variadicArgs := make([]func(*configservice.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*configservice.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeConfigurationRecorderStatus_Call) Return(describeConfigurationRecorderStatusOutput *configservice.DescribeConfigurationRecorderStatusOutput, err error) *MockClient_DescribeConfigurationRecorderStatus_Call {
	_c.Call.Return(describeConfigurationRecorderStatusOutput, err)
	return _c
}

func (_c *MockClient_DescribeConfigurationRecorderStatus_Call) RunAndReturn(run func(ctx context.Context, params *configservice.DescribeConfigurationRecorderStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error)) *MockClient_DescribeConfigurationRecorderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeConfigurationRecorders provides a mock function for the type MockClient
func (_mock *MockClient) DescribeConfigurationRecorders(ctx context.Context, params *configservice.DescribeConfigurationRecordersInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error) {
	// func(*configservice.Options)
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationRecorders")
	}

	var r0 *configservice.DescribeConfigurationRecordersOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationRecordersOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationRecordersOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeConfigurationRecorders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeConfigurationRecorders'
type MockClient_DescribeConfigurationRecorders_Call struct {
	*mock.Call
}

// DescribeConfigurationRecorders is a helper method to define mock.On call
//   - ctx context.Context
//   - params *configservice.DescribeConfigurationRecordersInput
//   - optFns ...func(*configservice.Options)
func (_e *MockClient_Expecter) DescribeConfigurationRecorders(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DescribeConfigurationRecorders_Call {
	return &MockClient_DescribeConfigurationRecorders_Call{Call: _e.mock.On("DescribeConfigurationRecorders",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DescribeConfigurationRecorders_Call) Run(run func(ctx context.Context, params *configservice.DescribeConfigurationRecordersInput, optFns ...func(*configservice.Options))) *MockClient_DescribeConfigurationRecorders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *configservice.DescribeConfigurationRecordersInput
		if args[1] != nil {
			arg1 = args[1].(*configservice.DescribeConfigurationRecordersInput)
		}
		var arg2 []func(*configservice.Options)
		variadicArgs := make([]func(*configservice.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*configservice.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeConfigurationRecorders_Call) Return(describeConfigurationRecordersOutput *configservice.DescribeConfigurationRecordersOutput, err error) *MockClient_DescribeConfigurationRecorders_Call {
	_c.Call.Return(describeConfigurationRecordersOutput, err)
	return _c
}

func (_c *MockClient_DescribeConfigurationRecorders_Call) RunAndReturn(run func(ctx context.Context, params *configservice.DescribeConfigurationRecordersInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error)) *MockClient_DescribeConfigurationRecorders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigService creates a new instance of MockConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigService {
	mock := &MockConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigService is an autogenerated mock type for the ConfigService type
type MockConfigService struct {
	mock.Mock
}

type MockConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigService) EXPECT() *MockConfigService_Expecter {
	return &MockConfigService_Expecter{mock: &_m.Mock}
}

// DescribeConfigRecorders provides a mock function for the type MockConfigService
func (_mock *MockConfigService) DescribeConfigRecorders(ctx context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigRecorders")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigService_DescribeConfigRecorders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeConfigRecorders'
type MockConfigService_DescribeConfigRecorders_Call struct {
	*mock.Call
}

// DescribeConfigRecorders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigService_Expecter) DescribeConfigRecorders(ctx interface{}) *MockConfigService_DescribeConfigRecorders_Call {
	return &MockConfigService_DescribeConfigRecorders_Call{Call: _e.mock.On("DescribeConfigRecorders", ctx)}
}

func (_c *MockConfigService_DescribeConfigRecorders_Call) Run(run func(ctx context.Context)) *MockConfigService_DescribeConfigRecorders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigService_DescribeConfigRecorders_Call) Return(awsResources []awslib.AwsResource, err error) *MockConfigService_DescribeConfigRecorders_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *MockConfigService_DescribeConfigRecorders_Call) RunAndReturn(run func(ctx context.Context) ([]awslib.AwsResource, error)) *MockConfigService_DescribeConfigRecorders_Call {
	_c.Call.Return(run)
	return _c
}
