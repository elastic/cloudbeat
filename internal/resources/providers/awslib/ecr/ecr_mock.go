// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ecr

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepositoryDescriber creates a new instance of MockRepositoryDescriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryDescriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryDescriber {
	mock := &MockRepositoryDescriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryDescriber is an autogenerated mock type for the RepositoryDescriber type
type MockRepositoryDescriber struct {
	mock.Mock
}

type MockRepositoryDescriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryDescriber) EXPECT() *MockRepositoryDescriber_Expecter {
	return &MockRepositoryDescriber_Expecter{mock: &_m.Mock}
}

// DescribeRepositories provides a mock function for the type MockRepositoryDescriber
func (_mock *MockRepositoryDescriber) DescribeRepositories(ctx context.Context, repoNames []string, region string) ([]types.Repository, error) {
	ret := _mock.Called(ctx, repoNames, region)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRepositories")
	}

	var r0 []types.Repository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, string) ([]types.Repository, error)); ok {
		return returnFunc(ctx, repoNames, region)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, string) []types.Repository); ok {
		r0 = returnFunc(ctx, repoNames, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = returnFunc(ctx, repoNames, region)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryDescriber_DescribeRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRepositories'
type MockRepositoryDescriber_DescribeRepositories_Call struct {
	*mock.Call
}

// DescribeRepositories is a helper method to define mock.On call
//   - ctx context.Context
//   - repoNames []string
//   - region string
func (_e *MockRepositoryDescriber_Expecter) DescribeRepositories(ctx interface{}, repoNames interface{}, region interface{}) *MockRepositoryDescriber_DescribeRepositories_Call {
	return &MockRepositoryDescriber_DescribeRepositories_Call{Call: _e.mock.On("DescribeRepositories", ctx, repoNames, region)}
}

func (_c *MockRepositoryDescriber_DescribeRepositories_Call) Run(run func(ctx context.Context, repoNames []string, region string)) *MockRepositoryDescriber_DescribeRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryDescriber_DescribeRepositories_Call) Return(repositorys []types.Repository, err error) *MockRepositoryDescriber_DescribeRepositories_Call {
	_c.Call.Return(repositorys, err)
	return _c
}

func (_c *MockRepositoryDescriber_DescribeRepositories_Call) RunAndReturn(run func(ctx context.Context, repoNames []string, region string) ([]types.Repository, error)) *MockRepositoryDescriber_DescribeRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DescribeRepositories provides a mock function for the type MockClient
func (_mock *MockClient) DescribeRepositories(ctx context.Context, params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error) {
	// func(*ecr.Options)
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRepositories")
	}

	var r0 *ecr.DescribeRepositoriesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ecr.DescribeRepositoriesInput, ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ecr.DescribeRepositoriesInput, ...func(*ecr.Options)) *ecr.DescribeRepositoriesOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecr.DescribeRepositoriesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ecr.DescribeRepositoriesInput, ...func(*ecr.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRepositories'
type MockClient_DescribeRepositories_Call struct {
	*mock.Call
}

// DescribeRepositories is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ecr.DescribeRepositoriesInput
//   - optFns ...func(*ecr.Options)
func (_e *MockClient_Expecter) DescribeRepositories(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DescribeRepositories_Call {
	return &MockClient_DescribeRepositories_Call{Call: _e.mock.On("DescribeRepositories",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DescribeRepositories_Call) Run(run func(ctx context.Context, params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.Options))) *MockClient_DescribeRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ecr.DescribeRepositoriesInput
		if args[1] != nil {
			arg1 = args[1].(*ecr.DescribeRepositoriesInput)
		}
		var arg2 []func(*ecr.Options)
		variadicArgs := make([]func(*ecr.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ecr.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeRepositories_Call) Return(describeRepositoriesOutput *ecr.DescribeRepositoriesOutput, err error) *MockClient_DescribeRepositories_Call {
	_c.Call.Return(describeRepositoriesOutput, err)
	return _c
}

func (_c *MockClient_DescribeRepositories_Call) RunAndReturn(run func(ctx context.Context, params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error)) *MockClient_DescribeRepositories_Call {
	_c.Call.Return(run)
	return _c
}
