// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rds

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/elastic/cloudbeat/internal/resources/providers/awslib"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRds creates a new instance of MockRds. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRds(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRds {
	mock := &MockRds{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRds is an autogenerated mock type for the Rds type
type MockRds struct {
	mock.Mock
}

type MockRds_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRds) EXPECT() *MockRds_Expecter {
	return &MockRds_Expecter{mock: &_m.Mock}
}

// DescribeDBInstances provides a mock function for the type MockRds
func (_mock *MockRds) DescribeDBInstances(ctx context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstances")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRds_DescribeDBInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDBInstances'
type MockRds_DescribeDBInstances_Call struct {
	*mock.Call
}

// DescribeDBInstances is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRds_Expecter) DescribeDBInstances(ctx interface{}) *MockRds_DescribeDBInstances_Call {
	return &MockRds_DescribeDBInstances_Call{Call: _e.mock.On("DescribeDBInstances", ctx)}
}

func (_c *MockRds_DescribeDBInstances_Call) Run(run func(ctx context.Context)) *MockRds_DescribeDBInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRds_DescribeDBInstances_Call) Return(awsResources []awslib.AwsResource, err error) *MockRds_DescribeDBInstances_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *MockRds_DescribeDBInstances_Call) RunAndReturn(run func(ctx context.Context) ([]awslib.AwsResource, error)) *MockRds_DescribeDBInstances_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DescribeDBInstances provides a mock function for the type MockClient
func (_mock *MockClient) DescribeDBInstances(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstances")
	}

	var r0 *rds.DescribeDBInstancesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) *rds.DescribeDBInstancesOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBInstancesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeDBInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDBInstances'
type MockClient_DescribeDBInstances_Call struct {
	*mock.Call
}

// DescribeDBInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - params *rds.DescribeDBInstancesInput
//   - optFns ...func(*rds.Options)
func (_e *MockClient_Expecter) DescribeDBInstances(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DescribeDBInstances_Call {
	return &MockClient_DescribeDBInstances_Call{Call: _e.mock.On("DescribeDBInstances",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DescribeDBInstances_Call) Run(run func(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options))) *MockClient_DescribeDBInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *rds.DescribeDBInstancesInput
		if args[1] != nil {
			arg1 = args[1].(*rds.DescribeDBInstancesInput)
		}
		var arg2 []func(*rds.Options)
		var variadicArgs []func(*rds.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*rds.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeDBInstances_Call) Return(describeDBInstancesOutput *rds.DescribeDBInstancesOutput, err error) *MockClient_DescribeDBInstances_Call {
	_c.Call.Return(describeDBInstancesOutput, err)
	return _c
}

func (_c *MockClient_DescribeDBInstances_Call) RunAndReturn(run func(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error)) *MockClient_DescribeDBInstances_Call {
	_c.Call.Return(run)
	return _c
}
