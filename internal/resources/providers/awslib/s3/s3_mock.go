// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/elastic/cloudbeat/internal/resources/providers/awslib"
	mock "github.com/stretchr/testify/mock"
)

// NewMockS3 creates a new instance of MockS3. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockS3(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockS3 {
	mock := &MockS3{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockS3 is an autogenerated mock type for the S3 type
type MockS3 struct {
	mock.Mock
}

type MockS3_Expecter struct {
	mock *mock.Mock
}

func (_m *MockS3) EXPECT() *MockS3_Expecter {
	return &MockS3_Expecter{mock: &_m.Mock}
}

// DescribeBuckets provides a mock function for the type MockS3
func (_mock *MockS3) DescribeBuckets(ctx context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBuckets")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockS3_DescribeBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeBuckets'
type MockS3_DescribeBuckets_Call struct {
	*mock.Call
}

// DescribeBuckets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockS3_Expecter) DescribeBuckets(ctx interface{}) *MockS3_DescribeBuckets_Call {
	return &MockS3_DescribeBuckets_Call{Call: _e.mock.On("DescribeBuckets", ctx)}
}

func (_c *MockS3_DescribeBuckets_Call) Run(run func(ctx context.Context)) *MockS3_DescribeBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockS3_DescribeBuckets_Call) Return(awsResources []awslib.AwsResource, err error) *MockS3_DescribeBuckets_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *MockS3_DescribeBuckets_Call) RunAndReturn(run func(ctx context.Context) ([]awslib.AwsResource, error)) *MockS3_DescribeBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketACL provides a mock function for the type MockS3
func (_mock *MockS3) GetBucketACL(ctx context.Context, bucketName *string, region string) (*s3.GetBucketAclOutput, error) {
	ret := _mock.Called(ctx, bucketName, region)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketACL")
	}

	var r0 *s3.GetBucketAclOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) (*s3.GetBucketAclOutput, error)); ok {
		return returnFunc(ctx, bucketName, region)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) *s3.GetBucketAclOutput); ok {
		r0 = returnFunc(ctx, bucketName, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketAclOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, region)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockS3_GetBucketACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketACL'
type MockS3_GetBucketACL_Call struct {
	*mock.Call
}

// GetBucketACL is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName *string
//   - region string
func (_e *MockS3_Expecter) GetBucketACL(ctx interface{}, bucketName interface{}, region interface{}) *MockS3_GetBucketACL_Call {
	return &MockS3_GetBucketACL_Call{Call: _e.mock.On("GetBucketACL", ctx, bucketName, region)}
}

func (_c *MockS3_GetBucketACL_Call) Run(run func(ctx context.Context, bucketName *string, region string)) *MockS3_GetBucketACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockS3_GetBucketACL_Call) Return(getBucketAclOutput *s3.GetBucketAclOutput, err error) *MockS3_GetBucketACL_Call {
	_c.Call.Return(getBucketAclOutput, err)
	return _c
}

func (_c *MockS3_GetBucketACL_Call) RunAndReturn(run func(ctx context.Context, bucketName *string, region string) (*s3.GetBucketAclOutput, error)) *MockS3_GetBucketACL_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketLogging provides a mock function for the type MockS3
func (_mock *MockS3) GetBucketLogging(ctx context.Context, bucketName *string, region string) (Logging, error) {
	ret := _mock.Called(ctx, bucketName, region)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketLogging")
	}

	var r0 Logging
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) (Logging, error)); ok {
		return returnFunc(ctx, bucketName, region)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) Logging); ok {
		r0 = returnFunc(ctx, bucketName, region)
	} else {
		r0 = ret.Get(0).(Logging)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, region)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockS3_GetBucketLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketLogging'
type MockS3_GetBucketLogging_Call struct {
	*mock.Call
}

// GetBucketLogging is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName *string
//   - region string
func (_e *MockS3_Expecter) GetBucketLogging(ctx interface{}, bucketName interface{}, region interface{}) *MockS3_GetBucketLogging_Call {
	return &MockS3_GetBucketLogging_Call{Call: _e.mock.On("GetBucketLogging", ctx, bucketName, region)}
}

func (_c *MockS3_GetBucketLogging_Call) Run(run func(ctx context.Context, bucketName *string, region string)) *MockS3_GetBucketLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockS3_GetBucketLogging_Call) Return(logging Logging, err error) *MockS3_GetBucketLogging_Call {
	_c.Call.Return(logging, err)
	return _c
}

func (_c *MockS3_GetBucketLogging_Call) RunAndReturn(run func(ctx context.Context, bucketName *string, region string) (Logging, error)) *MockS3_GetBucketLogging_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketPolicy provides a mock function for the type MockS3
func (_mock *MockS3) GetBucketPolicy(ctx context.Context, bucketName *string, region string) (BucketPolicy, error) {
	ret := _mock.Called(ctx, bucketName, region)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketPolicy")
	}

	var r0 BucketPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) (BucketPolicy, error)); ok {
		return returnFunc(ctx, bucketName, region)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, string) BucketPolicy); ok {
		r0 = returnFunc(ctx, bucketName, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BucketPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, region)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockS3_GetBucketPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketPolicy'
type MockS3_GetBucketPolicy_Call struct {
	*mock.Call
}

// GetBucketPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName *string
//   - region string
func (_e *MockS3_Expecter) GetBucketPolicy(ctx interface{}, bucketName interface{}, region interface{}) *MockS3_GetBucketPolicy_Call {
	return &MockS3_GetBucketPolicy_Call{Call: _e.mock.On("GetBucketPolicy", ctx, bucketName, region)}
}

func (_c *MockS3_GetBucketPolicy_Call) Run(run func(ctx context.Context, bucketName *string, region string)) *MockS3_GetBucketPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockS3_GetBucketPolicy_Call) Return(bucketPolicy BucketPolicy, err error) *MockS3_GetBucketPolicy_Call {
	_c.Call.Return(bucketPolicy, err)
	return _c
}

func (_c *MockS3_GetBucketPolicy_Call) RunAndReturn(run func(ctx context.Context, bucketName *string, region string) (BucketPolicy, error)) *MockS3_GetBucketPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetBucketAcl provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketAcl(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketAcl")
	}

	var r0 *s3.GetBucketAclOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketAclInput, ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketAclInput, ...func(*s3.Options)) *s3.GetBucketAclOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketAclOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketAclInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketAcl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketAcl'
type MockClient_GetBucketAcl_Call struct {
	*mock.Call
}

// GetBucketAcl is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketAclInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketAcl(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketAcl_Call {
	return &MockClient_GetBucketAcl_Call{Call: _e.mock.On("GetBucketAcl",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketAcl_Call) Run(run func(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options))) *MockClient_GetBucketAcl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketAclInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketAclInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketAcl_Call) Return(getBucketAclOutput *s3.GetBucketAclOutput, err error) *MockClient_GetBucketAcl_Call {
	_c.Call.Return(getBucketAclOutput, err)
	return _c
}

func (_c *MockClient_GetBucketAcl_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)) *MockClient_GetBucketAcl_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketEncryption provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketEncryption(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketEncryption")
	}

	var r0 *s3.GetBucketEncryptionOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketEncryptionInput, ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketEncryptionInput, ...func(*s3.Options)) *s3.GetBucketEncryptionOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketEncryptionOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketEncryptionInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketEncryption'
type MockClient_GetBucketEncryption_Call struct {
	*mock.Call
}

// GetBucketEncryption is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketEncryptionInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketEncryption(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketEncryption_Call {
	return &MockClient_GetBucketEncryption_Call{Call: _e.mock.On("GetBucketEncryption",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketEncryption_Call) Run(run func(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options))) *MockClient_GetBucketEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketEncryptionInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketEncryptionInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketEncryption_Call) Return(getBucketEncryptionOutput *s3.GetBucketEncryptionOutput, err error) *MockClient_GetBucketEncryption_Call {
	_c.Call.Return(getBucketEncryptionOutput, err)
	return _c
}

func (_c *MockClient_GetBucketEncryption_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error)) *MockClient_GetBucketEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketLocation provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketLocation(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketLocation")
	}

	var r0 *s3.GetBucketLocationOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketLocationInput, ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketLocationInput, ...func(*s3.Options)) *s3.GetBucketLocationOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketLocationOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketLocationInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketLocation'
type MockClient_GetBucketLocation_Call struct {
	*mock.Call
}

// GetBucketLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketLocationInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketLocation(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketLocation_Call {
	return &MockClient_GetBucketLocation_Call{Call: _e.mock.On("GetBucketLocation",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketLocation_Call) Run(run func(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options))) *MockClient_GetBucketLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketLocationInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketLocationInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketLocation_Call) Return(getBucketLocationOutput *s3.GetBucketLocationOutput, err error) *MockClient_GetBucketLocation_Call {
	_c.Call.Return(getBucketLocationOutput, err)
	return _c
}

func (_c *MockClient_GetBucketLocation_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error)) *MockClient_GetBucketLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketLogging provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketLogging(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketLogging")
	}

	var r0 *s3.GetBucketLoggingOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketLoggingInput, ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketLoggingInput, ...func(*s3.Options)) *s3.GetBucketLoggingOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketLoggingOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketLoggingInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketLogging'
type MockClient_GetBucketLogging_Call struct {
	*mock.Call
}

// GetBucketLogging is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketLoggingInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketLogging(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketLogging_Call {
	return &MockClient_GetBucketLogging_Call{Call: _e.mock.On("GetBucketLogging",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketLogging_Call) Run(run func(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options))) *MockClient_GetBucketLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketLoggingInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketLoggingInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketLogging_Call) Return(getBucketLoggingOutput *s3.GetBucketLoggingOutput, err error) *MockClient_GetBucketLogging_Call {
	_c.Call.Return(getBucketLoggingOutput, err)
	return _c
}

func (_c *MockClient_GetBucketLogging_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error)) *MockClient_GetBucketLogging_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketPolicy provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketPolicy(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketPolicy")
	}

	var r0 *s3.GetBucketPolicyOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketPolicyInput, ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketPolicyInput, ...func(*s3.Options)) *s3.GetBucketPolicyOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketPolicyOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketPolicyInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketPolicy'
type MockClient_GetBucketPolicy_Call struct {
	*mock.Call
}

// GetBucketPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketPolicyInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketPolicy(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketPolicy_Call {
	return &MockClient_GetBucketPolicy_Call{Call: _e.mock.On("GetBucketPolicy",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketPolicy_Call) Run(run func(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options))) *MockClient_GetBucketPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketPolicyInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketPolicyInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketPolicy_Call) Return(getBucketPolicyOutput *s3.GetBucketPolicyOutput, err error) *MockClient_GetBucketPolicy_Call {
	_c.Call.Return(getBucketPolicyOutput, err)
	return _c
}

func (_c *MockClient_GetBucketPolicy_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)) *MockClient_GetBucketPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetBucketVersioning provides a mock function for the type MockClient
func (_mock *MockClient) GetBucketVersioning(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBucketVersioning")
	}

	var r0 *s3.GetBucketVersioningOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketVersioningInput, ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetBucketVersioningInput, ...func(*s3.Options)) *s3.GetBucketVersioningOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetBucketVersioningOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetBucketVersioningInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetBucketVersioning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketVersioning'
type MockClient_GetBucketVersioning_Call struct {
	*mock.Call
}

// GetBucketVersioning is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetBucketVersioningInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetBucketVersioning(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetBucketVersioning_Call {
	return &MockClient_GetBucketVersioning_Call{Call: _e.mock.On("GetBucketVersioning",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetBucketVersioning_Call) Run(run func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options))) *MockClient_GetBucketVersioning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetBucketVersioningInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetBucketVersioningInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetBucketVersioning_Call) Return(getBucketVersioningOutput *s3.GetBucketVersioningOutput, err error) *MockClient_GetBucketVersioning_Call {
	_c.Call.Return(getBucketVersioningOutput, err)
	return _c
}

func (_c *MockClient_GetBucketVersioning_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)) *MockClient_GetBucketVersioning_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicAccessBlock provides a mock function for the type MockClient
func (_mock *MockClient) GetPublicAccessBlock(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccessBlock")
	}

	var r0 *s3.GetPublicAccessBlockOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetPublicAccessBlockInput, ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetPublicAccessBlockInput, ...func(*s3.Options)) *s3.GetPublicAccessBlockOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetPublicAccessBlockOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetPublicAccessBlockInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPublicAccessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicAccessBlock'
type MockClient_GetPublicAccessBlock_Call struct {
	*mock.Call
}

// GetPublicAccessBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.GetPublicAccessBlockInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) GetPublicAccessBlock(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetPublicAccessBlock_Call {
	return &MockClient_GetPublicAccessBlock_Call{Call: _e.mock.On("GetPublicAccessBlock",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetPublicAccessBlock_Call) Run(run func(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options))) *MockClient_GetPublicAccessBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetPublicAccessBlockInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetPublicAccessBlockInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetPublicAccessBlock_Call) Return(getPublicAccessBlockOutput *s3.GetPublicAccessBlockOutput, err error) *MockClient_GetPublicAccessBlock_Call {
	_c.Call.Return(getPublicAccessBlockOutput, err)
	return _c
}

func (_c *MockClient_GetPublicAccessBlock_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error)) *MockClient_GetPublicAccessBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ListBuckets provides a mock function for the type MockClient
func (_mock *MockClient) ListBuckets(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListBuckets")
	}

	var r0 *s3.ListBucketsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListBucketsInput, ...func(*s3.Options)) (*s3.ListBucketsOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListBucketsInput, ...func(*s3.Options)) *s3.ListBucketsOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.ListBucketsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.ListBucketsInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBuckets'
type MockClient_ListBuckets_Call struct {
	*mock.Call
}

// ListBuckets is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.ListBucketsInput
//   - optFns ...func(*s3.Options)
func (_e *MockClient_Expecter) ListBuckets(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_ListBuckets_Call {
	return &MockClient_ListBuckets_Call{Call: _e.mock.On("ListBuckets",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_ListBuckets_Call) Run(run func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options))) *MockClient_ListBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.ListBucketsInput
		if args[1] != nil {
			arg1 = args[1].(*s3.ListBucketsInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListBuckets_Call) Return(listBucketsOutput *s3.ListBucketsOutput, err error) *MockClient_ListBuckets_Call {
	_c.Call.Return(listBucketsOutput, err)
	return _c
}

func (_c *MockClient_ListBuckets_Call) RunAndReturn(run func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error)) *MockClient_ListBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockControlClient creates a new instance of MockControlClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControlClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControlClient {
	mock := &MockControlClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockControlClient is an autogenerated mock type for the ControlClient type
type MockControlClient struct {
	mock.Mock
}

type MockControlClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControlClient) EXPECT() *MockControlClient_Expecter {
	return &MockControlClient_Expecter{mock: &_m.Mock}
}

// GetPublicAccessBlock provides a mock function for the type MockControlClient
func (_mock *MockControlClient) GetPublicAccessBlock(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccessBlock")
	}

	var r0 *s3control.GetPublicAccessBlockOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) *s3control.GetPublicAccessBlockOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetPublicAccessBlockOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlClient_GetPublicAccessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicAccessBlock'
type MockControlClient_GetPublicAccessBlock_Call struct {
	*mock.Call
}

// GetPublicAccessBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3control.GetPublicAccessBlockInput
//   - optFns ...func(*s3control.Options)
func (_e *MockControlClient_Expecter) GetPublicAccessBlock(ctx interface{}, params interface{}, optFns ...interface{}) *MockControlClient_GetPublicAccessBlock_Call {
	return &MockControlClient_GetPublicAccessBlock_Call{Call: _e.mock.On("GetPublicAccessBlock",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockControlClient_GetPublicAccessBlock_Call) Run(run func(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options))) *MockControlClient_GetPublicAccessBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3control.GetPublicAccessBlockInput
		if args[1] != nil {
			arg1 = args[1].(*s3control.GetPublicAccessBlockInput)
		}
		var arg2 []func(*s3control.Options)
		var variadicArgs []func(*s3control.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3control.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockControlClient_GetPublicAccessBlock_Call) Return(getPublicAccessBlockOutput *s3control.GetPublicAccessBlockOutput, err error) *MockControlClient_GetPublicAccessBlock_Call {
	_c.Call.Return(getPublicAccessBlockOutput, err)
	return _c
}

func (_c *MockControlClient_GetPublicAccessBlock_Call) RunAndReturn(run func(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error)) *MockControlClient_GetPublicAccessBlock_Call {
	_c.Call.Return(run)
	return _c
}
