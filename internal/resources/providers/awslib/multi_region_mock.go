// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package awslib

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/elastic/cloudbeat/internal/infra/clog"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRegionsSelector creates a new instance of MockRegionsSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegionsSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegionsSelector {
	mock := &MockRegionsSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegionsSelector is an autogenerated mock type for the RegionsSelector type
type MockRegionsSelector struct {
	mock.Mock
}

type MockRegionsSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegionsSelector) EXPECT() *MockRegionsSelector_Expecter {
	return &MockRegionsSelector_Expecter{mock: &_m.Mock}
}

// Regions provides a mock function for the type MockRegionsSelector
func (_mock *MockRegionsSelector) Regions(ctx context.Context, cfg aws.Config) ([]string, error) {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Regions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, aws.Config) ([]string, error)); ok {
		return returnFunc(ctx, cfg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, aws.Config) []string); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, aws.Config) error); ok {
		r1 = returnFunc(ctx, cfg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegionsSelector_Regions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Regions'
type MockRegionsSelector_Regions_Call struct {
	*mock.Call
}

// Regions is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg aws.Config
func (_e *MockRegionsSelector_Expecter) Regions(ctx interface{}, cfg interface{}) *MockRegionsSelector_Regions_Call {
	return &MockRegionsSelector_Regions_Call{Call: _e.mock.On("Regions", ctx, cfg)}
}

func (_c *MockRegionsSelector_Regions_Call) Run(run func(ctx context.Context, cfg aws.Config)) *MockRegionsSelector_Regions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 aws.Config
		if args[1] != nil {
			arg1 = args[1].(aws.Config)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegionsSelector_Regions_Call) Return(strings []string, err error) *MockRegionsSelector_Regions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRegionsSelector_Regions_Call) RunAndReturn(run func(ctx context.Context, cfg aws.Config) ([]string, error)) *MockRegionsSelector_Regions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCrossRegionFetcher creates a new instance of MockCrossRegionFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrossRegionFetcher[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrossRegionFetcher[T] {
	mock := &MockCrossRegionFetcher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCrossRegionFetcher is an autogenerated mock type for the CrossRegionFetcher type
type MockCrossRegionFetcher[T any] struct {
	mock.Mock
}

type MockCrossRegionFetcher_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockCrossRegionFetcher[T]) EXPECT() *MockCrossRegionFetcher_Expecter[T] {
	return &MockCrossRegionFetcher_Expecter[T]{mock: &_m.Mock}
}

// GetMultiRegionsClientMap provides a mock function for the type MockCrossRegionFetcher
func (_mock *MockCrossRegionFetcher[T]) GetMultiRegionsClientMap() map[string]T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionsClientMap")
	}

	var r0 map[string]T
	if returnFunc, ok := ret.Get(0).(func() map[string]T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]T)
		}
	}
	return r0
}

// MockCrossRegionFetcher_GetMultiRegionsClientMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiRegionsClientMap'
type MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T any] struct {
	*mock.Call
}

// GetMultiRegionsClientMap is a helper method to define mock.On call
func (_e *MockCrossRegionFetcher_Expecter[T]) GetMultiRegionsClientMap() *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T] {
	return &MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T]{Call: _e.mock.On("GetMultiRegionsClientMap")}
}

func (_c *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T]) Run(run func()) *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T]) Return(stringToV map[string]T) *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T] {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T]) RunAndReturn(run func() map[string]T) *MockCrossRegionFetcher_GetMultiRegionsClientMap_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockCrossRegionFactory creates a new instance of MockCrossRegionFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrossRegionFactory[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrossRegionFactory[T] {
	mock := &MockCrossRegionFactory[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCrossRegionFactory is an autogenerated mock type for the CrossRegionFactory type
type MockCrossRegionFactory[T any] struct {
	mock.Mock
}

type MockCrossRegionFactory_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockCrossRegionFactory[T]) EXPECT() *MockCrossRegionFactory_Expecter[T] {
	return &MockCrossRegionFactory_Expecter[T]{mock: &_m.Mock}
}

// NewMultiRegionClients provides a mock function for the type MockCrossRegionFactory
func (_mock *MockCrossRegionFactory[T]) NewMultiRegionClients(ctx context.Context, selector RegionsSelector, cfg aws.Config, factory func(cfg aws.Config) T, log *clog.Logger) CrossRegionFetcher[T] {
	ret := _mock.Called(ctx, selector, cfg, factory, log)

	if len(ret) == 0 {
		panic("no return value specified for NewMultiRegionClients")
	}

	var r0 CrossRegionFetcher[T]
	if returnFunc, ok := ret.Get(0).(func(context.Context, RegionsSelector, aws.Config, func(cfg aws.Config) T, *clog.Logger) CrossRegionFetcher[T]); ok {
		r0 = returnFunc(ctx, selector, cfg, factory, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CrossRegionFetcher[T])
		}
	}
	return r0
}

// MockCrossRegionFactory_NewMultiRegionClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMultiRegionClients'
type MockCrossRegionFactory_NewMultiRegionClients_Call[T any] struct {
	*mock.Call
}

// NewMultiRegionClients is a helper method to define mock.On call
//   - ctx context.Context
//   - selector RegionsSelector
//   - cfg aws.Config
//   - factory func(cfg aws.Config) T
//   - log *clog.Logger
func (_e *MockCrossRegionFactory_Expecter[T]) NewMultiRegionClients(ctx interface{}, selector interface{}, cfg interface{}, factory interface{}, log interface{}) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	return &MockCrossRegionFactory_NewMultiRegionClients_Call[T]{Call: _e.mock.On("NewMultiRegionClients", ctx, selector, cfg, factory, log)}
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) Run(run func(ctx context.Context, selector RegionsSelector, cfg aws.Config, factory func(cfg aws.Config) T, log *clog.Logger)) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 RegionsSelector
		if args[1] != nil {
			arg1 = args[1].(RegionsSelector)
		}
		var arg2 aws.Config
		if args[2] != nil {
			arg2 = args[2].(aws.Config)
		}
		var arg3 func(cfg aws.Config) T
		if args[3] != nil {
			arg3 = args[3].(func(cfg aws.Config) T)
		}
		var arg4 *clog.Logger
		if args[4] != nil {
			arg4 = args[4].(*clog.Logger)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) Return(crossRegionFetcher CrossRegionFetcher[T]) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Return(crossRegionFetcher)
	return _c
}

func (_c *MockCrossRegionFactory_NewMultiRegionClients_Call[T]) RunAndReturn(run func(ctx context.Context, selector RegionsSelector, cfg aws.Config, factory func(cfg aws.Config) T, log *clog.Logger) CrossRegionFetcher[T]) *MockCrossRegionFactory_NewMultiRegionClients_Call[T] {
	_c.Call.Return(run)
	return _c
}
