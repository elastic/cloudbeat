// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cloudtrail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DescribeTrails provides a mock function for the type MockClient
func (_mock *MockClient) DescribeTrails(ctx context.Context, params *cloudtrail.DescribeTrailsInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.DescribeTrailsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrails")
	}

	var r0 *cloudtrail.DescribeTrailsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.DescribeTrailsInput, ...func(*cloudtrail.Options)) (*cloudtrail.DescribeTrailsOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.DescribeTrailsInput, ...func(*cloudtrail.Options)) *cloudtrail.DescribeTrailsOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtrail.DescribeTrailsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtrail.DescribeTrailsInput, ...func(*cloudtrail.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DescribeTrails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTrails'
type MockClient_DescribeTrails_Call struct {
	*mock.Call
}

// DescribeTrails is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudtrail.DescribeTrailsInput
//   - optFns ...func(*cloudtrail.Options)
func (_e *MockClient_Expecter) DescribeTrails(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_DescribeTrails_Call {
	return &MockClient_DescribeTrails_Call{Call: _e.mock.On("DescribeTrails",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_DescribeTrails_Call) Run(run func(ctx context.Context, params *cloudtrail.DescribeTrailsInput, optFns ...func(*cloudtrail.Options))) *MockClient_DescribeTrails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtrail.DescribeTrailsInput
		if args[1] != nil {
			arg1 = args[1].(*cloudtrail.DescribeTrailsInput)
		}
		var arg2 []func(*cloudtrail.Options)
		var variadicArgs []func(*cloudtrail.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*cloudtrail.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DescribeTrails_Call) Return(describeTrailsOutput *cloudtrail.DescribeTrailsOutput, err error) *MockClient_DescribeTrails_Call {
	_c.Call.Return(describeTrailsOutput, err)
	return _c
}

func (_c *MockClient_DescribeTrails_Call) RunAndReturn(run func(ctx context.Context, params *cloudtrail.DescribeTrailsInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.DescribeTrailsOutput, error)) *MockClient_DescribeTrails_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSelectors provides a mock function for the type MockClient
func (_mock *MockClient) GetEventSelectors(ctx context.Context, params *cloudtrail.GetEventSelectorsInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.GetEventSelectorsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEventSelectors")
	}

	var r0 *cloudtrail.GetEventSelectorsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.GetEventSelectorsInput, ...func(*cloudtrail.Options)) (*cloudtrail.GetEventSelectorsOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.GetEventSelectorsInput, ...func(*cloudtrail.Options)) *cloudtrail.GetEventSelectorsOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtrail.GetEventSelectorsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtrail.GetEventSelectorsInput, ...func(*cloudtrail.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetEventSelectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSelectors'
type MockClient_GetEventSelectors_Call struct {
	*mock.Call
}

// GetEventSelectors is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudtrail.GetEventSelectorsInput
//   - optFns ...func(*cloudtrail.Options)
func (_e *MockClient_Expecter) GetEventSelectors(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetEventSelectors_Call {
	return &MockClient_GetEventSelectors_Call{Call: _e.mock.On("GetEventSelectors",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetEventSelectors_Call) Run(run func(ctx context.Context, params *cloudtrail.GetEventSelectorsInput, optFns ...func(*cloudtrail.Options))) *MockClient_GetEventSelectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtrail.GetEventSelectorsInput
		if args[1] != nil {
			arg1 = args[1].(*cloudtrail.GetEventSelectorsInput)
		}
		var arg2 []func(*cloudtrail.Options)
		var variadicArgs []func(*cloudtrail.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*cloudtrail.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetEventSelectors_Call) Return(getEventSelectorsOutput *cloudtrail.GetEventSelectorsOutput, err error) *MockClient_GetEventSelectors_Call {
	_c.Call.Return(getEventSelectorsOutput, err)
	return _c
}

func (_c *MockClient_GetEventSelectors_Call) RunAndReturn(run func(ctx context.Context, params *cloudtrail.GetEventSelectorsInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.GetEventSelectorsOutput, error)) *MockClient_GetEventSelectors_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrailStatus provides a mock function for the type MockClient
func (_mock *MockClient) GetTrailStatus(ctx context.Context, params *cloudtrail.GetTrailStatusInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.GetTrailStatusOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrailStatus")
	}

	var r0 *cloudtrail.GetTrailStatusOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.GetTrailStatusInput, ...func(*cloudtrail.Options)) (*cloudtrail.GetTrailStatusOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtrail.GetTrailStatusInput, ...func(*cloudtrail.Options)) *cloudtrail.GetTrailStatusOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtrail.GetTrailStatusOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtrail.GetTrailStatusInput, ...func(*cloudtrail.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTrailStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrailStatus'
type MockClient_GetTrailStatus_Call struct {
	*mock.Call
}

// GetTrailStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudtrail.GetTrailStatusInput
//   - optFns ...func(*cloudtrail.Options)
func (_e *MockClient_Expecter) GetTrailStatus(ctx interface{}, params interface{}, optFns ...interface{}) *MockClient_GetTrailStatus_Call {
	return &MockClient_GetTrailStatus_Call{Call: _e.mock.On("GetTrailStatus",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockClient_GetTrailStatus_Call) Run(run func(ctx context.Context, params *cloudtrail.GetTrailStatusInput, optFns ...func(*cloudtrail.Options))) *MockClient_GetTrailStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtrail.GetTrailStatusInput
		if args[1] != nil {
			arg1 = args[1].(*cloudtrail.GetTrailStatusInput)
		}
		var arg2 []func(*cloudtrail.Options)
		var variadicArgs []func(*cloudtrail.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*cloudtrail.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetTrailStatus_Call) Return(getTrailStatusOutput *cloudtrail.GetTrailStatusOutput, err error) *MockClient_GetTrailStatus_Call {
	_c.Call.Return(getTrailStatusOutput, err)
	return _c
}

func (_c *MockClient_GetTrailStatus_Call) RunAndReturn(run func(ctx context.Context, params *cloudtrail.GetTrailStatusInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.GetTrailStatusOutput, error)) *MockClient_GetTrailStatus_Call {
	_c.Call.Return(run)
	return _c
}
