// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package inventory

import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity"
	mock "github.com/stretchr/testify/mock"
)

// newMockSecurityClientWrapper creates a new instance of mockSecurityClientWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSecurityClientWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSecurityClientWrapper {
	mock := &mockSecurityClientWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSecurityClientWrapper is an autogenerated mock type for the securityClientWrapper type
type mockSecurityClientWrapper struct {
	mock.Mock
}

type mockSecurityClientWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecurityClientWrapper) EXPECT() *mockSecurityClientWrapper_Expecter {
	return &mockSecurityClientWrapper_Expecter{mock: &_m.Mock}
}

// ListAutoProvisioningSettings provides a mock function for the type mockSecurityClientWrapper
func (_mock *mockSecurityClientWrapper) ListAutoProvisioningSettings(ctx context.Context, subID string) ([]armsecurity.AutoProvisioningSettingsClientListResponse, error) {
	ret := _mock.Called(ctx, subID)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoProvisioningSettings")
	}

	var r0 []armsecurity.AutoProvisioningSettingsClientListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]armsecurity.AutoProvisioningSettingsClientListResponse, error)); ok {
		return returnFunc(ctx, subID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []armsecurity.AutoProvisioningSettingsClientListResponse); ok {
		r0 = returnFunc(ctx, subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]armsecurity.AutoProvisioningSettingsClientListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, subID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSecurityClientWrapper_ListAutoProvisioningSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAutoProvisioningSettings'
type mockSecurityClientWrapper_ListAutoProvisioningSettings_Call struct {
	*mock.Call
}

// ListAutoProvisioningSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - subID string
func (_e *mockSecurityClientWrapper_Expecter) ListAutoProvisioningSettings(ctx interface{}, subID interface{}) *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call {
	return &mockSecurityClientWrapper_ListAutoProvisioningSettings_Call{Call: _e.mock.On("ListAutoProvisioningSettings", ctx, subID)}
}

func (_c *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call) Run(run func(ctx context.Context, subID string)) *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call) Return(autoProvisioningSettingsClientListResponses []armsecurity.AutoProvisioningSettingsClientListResponse, err error) *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call {
	_c.Call.Return(autoProvisioningSettingsClientListResponses, err)
	return _c
}

func (_c *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call) RunAndReturn(run func(ctx context.Context, subID string) ([]armsecurity.AutoProvisioningSettingsClientListResponse, error)) *mockSecurityClientWrapper_ListAutoProvisioningSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityContacts provides a mock function for the type mockSecurityClientWrapper
func (_mock *mockSecurityClientWrapper) ListSecurityContacts(ctx context.Context, subID string) ([]armsecurity.ContactsClientListResponse, error) {
	ret := _mock.Called(ctx, subID)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityContacts")
	}

	var r0 []armsecurity.ContactsClientListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]armsecurity.ContactsClientListResponse, error)); ok {
		return returnFunc(ctx, subID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []armsecurity.ContactsClientListResponse); ok {
		r0 = returnFunc(ctx, subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]armsecurity.ContactsClientListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, subID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSecurityClientWrapper_ListSecurityContacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityContacts'
type mockSecurityClientWrapper_ListSecurityContacts_Call struct {
	*mock.Call
}

// ListSecurityContacts is a helper method to define mock.On call
//   - ctx context.Context
//   - subID string
func (_e *mockSecurityClientWrapper_Expecter) ListSecurityContacts(ctx interface{}, subID interface{}) *mockSecurityClientWrapper_ListSecurityContacts_Call {
	return &mockSecurityClientWrapper_ListSecurityContacts_Call{Call: _e.mock.On("ListSecurityContacts", ctx, subID)}
}

func (_c *mockSecurityClientWrapper_ListSecurityContacts_Call) Run(run func(ctx context.Context, subID string)) *mockSecurityClientWrapper_ListSecurityContacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSecurityClientWrapper_ListSecurityContacts_Call) Return(contactsClientListResponses []armsecurity.ContactsClientListResponse, err error) *mockSecurityClientWrapper_ListSecurityContacts_Call {
	_c.Call.Return(contactsClientListResponses, err)
	return _c
}

func (_c *mockSecurityClientWrapper_ListSecurityContacts_Call) RunAndReturn(run func(ctx context.Context, subID string) ([]armsecurity.ContactsClientListResponse, error)) *mockSecurityClientWrapper_ListSecurityContacts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityContactsProviderAPI creates a new instance of MockSecurityContactsProviderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityContactsProviderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityContactsProviderAPI {
	mock := &MockSecurityContactsProviderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecurityContactsProviderAPI is an autogenerated mock type for the SecurityContactsProviderAPI type
type MockSecurityContactsProviderAPI struct {
	mock.Mock
}

type MockSecurityContactsProviderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityContactsProviderAPI) EXPECT() *MockSecurityContactsProviderAPI_Expecter {
	return &MockSecurityContactsProviderAPI_Expecter{mock: &_m.Mock}
}

// ListAutoProvisioningSettings provides a mock function for the type MockSecurityContactsProviderAPI
func (_mock *MockSecurityContactsProviderAPI) ListAutoProvisioningSettings(ctx context.Context, subscriptionID string) ([]AzureAsset, error) {
	ret := _mock.Called(ctx, subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoProvisioningSettings")
	}

	var r0 []AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]AzureAsset, error)); ok {
		return returnFunc(ctx, subscriptionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []AzureAsset); ok {
		r0 = returnFunc(ctx, subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, subscriptionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAutoProvisioningSettings'
type MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call struct {
	*mock.Call
}

// ListAutoProvisioningSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - subscriptionID string
func (_e *MockSecurityContactsProviderAPI_Expecter) ListAutoProvisioningSettings(ctx interface{}, subscriptionID interface{}) *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call {
	return &MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call{Call: _e.mock.On("ListAutoProvisioningSettings", ctx, subscriptionID)}
}

func (_c *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call) Run(run func(ctx context.Context, subscriptionID string)) *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call) Return(azureAssets []AzureAsset, err error) *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call) RunAndReturn(run func(ctx context.Context, subscriptionID string) ([]AzureAsset, error)) *MockSecurityContactsProviderAPI_ListAutoProvisioningSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityContacts provides a mock function for the type MockSecurityContactsProviderAPI
func (_mock *MockSecurityContactsProviderAPI) ListSecurityContacts(ctx context.Context, subscriptionID string) ([]AzureAsset, error) {
	ret := _mock.Called(ctx, subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityContacts")
	}

	var r0 []AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]AzureAsset, error)); ok {
		return returnFunc(ctx, subscriptionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []AzureAsset); ok {
		r0 = returnFunc(ctx, subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, subscriptionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityContactsProviderAPI_ListSecurityContacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityContacts'
type MockSecurityContactsProviderAPI_ListSecurityContacts_Call struct {
	*mock.Call
}

// ListSecurityContacts is a helper method to define mock.On call
//   - ctx context.Context
//   - subscriptionID string
func (_e *MockSecurityContactsProviderAPI_Expecter) ListSecurityContacts(ctx interface{}, subscriptionID interface{}) *MockSecurityContactsProviderAPI_ListSecurityContacts_Call {
	return &MockSecurityContactsProviderAPI_ListSecurityContacts_Call{Call: _e.mock.On("ListSecurityContacts", ctx, subscriptionID)}
}

func (_c *MockSecurityContactsProviderAPI_ListSecurityContacts_Call) Run(run func(ctx context.Context, subscriptionID string)) *MockSecurityContactsProviderAPI_ListSecurityContacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecurityContactsProviderAPI_ListSecurityContacts_Call) Return(azureAssets []AzureAsset, err error) *MockSecurityContactsProviderAPI_ListSecurityContacts_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *MockSecurityContactsProviderAPI_ListSecurityContacts_Call) RunAndReturn(run func(ctx context.Context, subscriptionID string) ([]AzureAsset, error)) *MockSecurityContactsProviderAPI_ListSecurityContacts_Call {
	_c.Call.Return(run)
	return _c
}
