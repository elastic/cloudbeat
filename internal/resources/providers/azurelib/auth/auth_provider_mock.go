// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAzureAuthProviderAPI creates a new instance of MockAzureAuthProviderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAzureAuthProviderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAzureAuthProviderAPI {
	mock := &MockAzureAuthProviderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAzureAuthProviderAPI is an autogenerated mock type for the AzureAuthProviderAPI type
type MockAzureAuthProviderAPI struct {
	mock.Mock
}

type MockAzureAuthProviderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAzureAuthProviderAPI) EXPECT() *MockAzureAuthProviderAPI_Expecter {
	return &MockAzureAuthProviderAPI_Expecter{mock: &_m.Mock}
}

// FindCertificateCredential provides a mock function for the type MockAzureAuthProviderAPI
func (_mock *MockAzureAuthProviderAPI) FindCertificateCredential(tenantID string, clientID string, certPath string, password string, options *azidentity.ClientCertificateCredentialOptions) (*azidentity.ClientCertificateCredential, error) {
	ret := _mock.Called(tenantID, clientID, certPath, password, options)

	if len(ret) == 0 {
		panic("no return value specified for FindCertificateCredential")
	}

	var r0 *azidentity.ClientCertificateCredential
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, *azidentity.ClientCertificateCredentialOptions) (*azidentity.ClientCertificateCredential, error)); ok {
		return returnFunc(tenantID, clientID, certPath, password, options)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, *azidentity.ClientCertificateCredentialOptions) *azidentity.ClientCertificateCredential); ok {
		r0 = returnFunc(tenantID, clientID, certPath, password, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azidentity.ClientCertificateCredential)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, *azidentity.ClientCertificateCredentialOptions) error); ok {
		r1 = returnFunc(tenantID, clientID, certPath, password, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAzureAuthProviderAPI_FindCertificateCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCertificateCredential'
type MockAzureAuthProviderAPI_FindCertificateCredential_Call struct {
	*mock.Call
}

// FindCertificateCredential is a helper method to define mock.On call
//   - tenantID string
//   - clientID string
//   - certPath string
//   - password string
//   - options *azidentity.ClientCertificateCredentialOptions
func (_e *MockAzureAuthProviderAPI_Expecter) FindCertificateCredential(tenantID interface{}, clientID interface{}, certPath interface{}, password interface{}, options interface{}) *MockAzureAuthProviderAPI_FindCertificateCredential_Call {
	return &MockAzureAuthProviderAPI_FindCertificateCredential_Call{Call: _e.mock.On("FindCertificateCredential", tenantID, clientID, certPath, password, options)}
}

func (_c *MockAzureAuthProviderAPI_FindCertificateCredential_Call) Run(run func(tenantID string, clientID string, certPath string, password string, options *azidentity.ClientCertificateCredentialOptions)) *MockAzureAuthProviderAPI_FindCertificateCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *azidentity.ClientCertificateCredentialOptions
		if args[4] != nil {
			arg4 = args[4].(*azidentity.ClientCertificateCredentialOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindCertificateCredential_Call) Return(clientCertificateCredential *azidentity.ClientCertificateCredential, err error) *MockAzureAuthProviderAPI_FindCertificateCredential_Call {
	_c.Call.Return(clientCertificateCredential, err)
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindCertificateCredential_Call) RunAndReturn(run func(tenantID string, clientID string, certPath string, password string, options *azidentity.ClientCertificateCredentialOptions) (*azidentity.ClientCertificateCredential, error)) *MockAzureAuthProviderAPI_FindCertificateCredential_Call {
	_c.Call.Return(run)
	return _c
}

// FindClientAssertionCredentials provides a mock function for the type MockAzureAuthProviderAPI
func (_mock *MockAzureAuthProviderAPI) FindClientAssertionCredentials(tenantID string, clientID string, options *azidentity.ClientAssertionCredentialOptions) (*azidentity.ClientAssertionCredential, error) {
	ret := _mock.Called(tenantID, clientID, options)

	if len(ret) == 0 {
		panic("no return value specified for FindClientAssertionCredentials")
	}

	var r0 *azidentity.ClientAssertionCredential
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *azidentity.ClientAssertionCredentialOptions) (*azidentity.ClientAssertionCredential, error)); ok {
		return returnFunc(tenantID, clientID, options)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, *azidentity.ClientAssertionCredentialOptions) *azidentity.ClientAssertionCredential); ok {
		r0 = returnFunc(tenantID, clientID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azidentity.ClientAssertionCredential)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, *azidentity.ClientAssertionCredentialOptions) error); ok {
		r1 = returnFunc(tenantID, clientID, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClientAssertionCredentials'
type MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call struct {
	*mock.Call
}

// FindClientAssertionCredentials is a helper method to define mock.On call
//   - tenantID string
//   - clientID string
//   - options *azidentity.ClientAssertionCredentialOptions
func (_e *MockAzureAuthProviderAPI_Expecter) FindClientAssertionCredentials(tenantID interface{}, clientID interface{}, options interface{}) *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call {
	return &MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call{Call: _e.mock.On("FindClientAssertionCredentials", tenantID, clientID, options)}
}

func (_c *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call) Run(run func(tenantID string, clientID string, options *azidentity.ClientAssertionCredentialOptions)) *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *azidentity.ClientAssertionCredentialOptions
		if args[2] != nil {
			arg2 = args[2].(*azidentity.ClientAssertionCredentialOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call) Return(clientAssertionCredential *azidentity.ClientAssertionCredential, err error) *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call {
	_c.Call.Return(clientAssertionCredential, err)
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call) RunAndReturn(run func(tenantID string, clientID string, options *azidentity.ClientAssertionCredentialOptions) (*azidentity.ClientAssertionCredential, error)) *MockAzureAuthProviderAPI_FindClientAssertionCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// FindClientSecretCredentials provides a mock function for the type MockAzureAuthProviderAPI
func (_mock *MockAzureAuthProviderAPI) FindClientSecretCredentials(tenantID string, clientID string, clientSecret string, options *azidentity.ClientSecretCredentialOptions) (*azidentity.ClientSecretCredential, error) {
	ret := _mock.Called(tenantID, clientID, clientSecret, options)

	if len(ret) == 0 {
		panic("no return value specified for FindClientSecretCredentials")
	}

	var r0 *azidentity.ClientSecretCredential
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, *azidentity.ClientSecretCredentialOptions) (*azidentity.ClientSecretCredential, error)); ok {
		return returnFunc(tenantID, clientID, clientSecret, options)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, *azidentity.ClientSecretCredentialOptions) *azidentity.ClientSecretCredential); ok {
		r0 = returnFunc(tenantID, clientID, clientSecret, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azidentity.ClientSecretCredential)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, *azidentity.ClientSecretCredentialOptions) error); ok {
		r1 = returnFunc(tenantID, clientID, clientSecret, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAzureAuthProviderAPI_FindClientSecretCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClientSecretCredentials'
type MockAzureAuthProviderAPI_FindClientSecretCredentials_Call struct {
	*mock.Call
}

// FindClientSecretCredentials is a helper method to define mock.On call
//   - tenantID string
//   - clientID string
//   - clientSecret string
//   - options *azidentity.ClientSecretCredentialOptions
func (_e *MockAzureAuthProviderAPI_Expecter) FindClientSecretCredentials(tenantID interface{}, clientID interface{}, clientSecret interface{}, options interface{}) *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call {
	return &MockAzureAuthProviderAPI_FindClientSecretCredentials_Call{Call: _e.mock.On("FindClientSecretCredentials", tenantID, clientID, clientSecret, options)}
}

func (_c *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call) Run(run func(tenantID string, clientID string, clientSecret string, options *azidentity.ClientSecretCredentialOptions)) *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *azidentity.ClientSecretCredentialOptions
		if args[3] != nil {
			arg3 = args[3].(*azidentity.ClientSecretCredentialOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call) Return(clientSecretCredential *azidentity.ClientSecretCredential, err error) *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call {
	_c.Call.Return(clientSecretCredential, err)
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call) RunAndReturn(run func(tenantID string, clientID string, clientSecret string, options *azidentity.ClientSecretCredentialOptions) (*azidentity.ClientSecretCredential, error)) *MockAzureAuthProviderAPI_FindClientSecretCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// FindDefaultCredentials provides a mock function for the type MockAzureAuthProviderAPI
func (_mock *MockAzureAuthProviderAPI) FindDefaultCredentials(options *azidentity.DefaultAzureCredentialOptions) (*azidentity.DefaultAzureCredential, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for FindDefaultCredentials")
	}

	var r0 *azidentity.DefaultAzureCredential
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*azidentity.DefaultAzureCredentialOptions) (*azidentity.DefaultAzureCredential, error)); ok {
		return returnFunc(options)
	}
	if returnFunc, ok := ret.Get(0).(func(*azidentity.DefaultAzureCredentialOptions) *azidentity.DefaultAzureCredential); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azidentity.DefaultAzureCredential)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*azidentity.DefaultAzureCredentialOptions) error); ok {
		r1 = returnFunc(options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAzureAuthProviderAPI_FindDefaultCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDefaultCredentials'
type MockAzureAuthProviderAPI_FindDefaultCredentials_Call struct {
	*mock.Call
}

// FindDefaultCredentials is a helper method to define mock.On call
//   - options *azidentity.DefaultAzureCredentialOptions
func (_e *MockAzureAuthProviderAPI_Expecter) FindDefaultCredentials(options interface{}) *MockAzureAuthProviderAPI_FindDefaultCredentials_Call {
	return &MockAzureAuthProviderAPI_FindDefaultCredentials_Call{Call: _e.mock.On("FindDefaultCredentials", options)}
}

func (_c *MockAzureAuthProviderAPI_FindDefaultCredentials_Call) Run(run func(options *azidentity.DefaultAzureCredentialOptions)) *MockAzureAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *azidentity.DefaultAzureCredentialOptions
		if args[0] != nil {
			arg0 = args[0].(*azidentity.DefaultAzureCredentialOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindDefaultCredentials_Call) Return(defaultAzureCredential *azidentity.DefaultAzureCredential, err error) *MockAzureAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Return(defaultAzureCredential, err)
	return _c
}

func (_c *MockAzureAuthProviderAPI_FindDefaultCredentials_Call) RunAndReturn(run func(options *azidentity.DefaultAzureCredentialOptions) (*azidentity.DefaultAzureCredential, error)) *MockAzureAuthProviderAPI_FindDefaultCredentials_Call {
	_c.Call.Return(run)
	return _c
}
