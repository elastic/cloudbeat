// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fetching

import (
	"context"

	"github.com/elastic/cloudbeat/internal/resources/fetching/cycle"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFetcher creates a new instance of MockFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFetcher {
	mock := &MockFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFetcher is an autogenerated mock type for the Fetcher type
type MockFetcher struct {
	mock.Mock
}

type MockFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFetcher) EXPECT() *MockFetcher_Expecter {
	return &MockFetcher_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockFetcher
func (_mock *MockFetcher) Fetch(context1 context.Context, metadata cycle.Metadata) error {
	ret := _mock.Called(context1, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cycle.Metadata) error); ok {
		r0 = returnFunc(context1, metadata)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFetcher_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockFetcher_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - context1 context.Context
//   - metadata cycle.Metadata
func (_e *MockFetcher_Expecter) Fetch(context1 interface{}, metadata interface{}) *MockFetcher_Fetch_Call {
	return &MockFetcher_Fetch_Call{Call: _e.mock.On("Fetch", context1, metadata)}
}

func (_c *MockFetcher_Fetch_Call) Run(run func(context1 context.Context, metadata cycle.Metadata)) *MockFetcher_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 cycle.Metadata
		if args[1] != nil {
			arg1 = args[1].(cycle.Metadata)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFetcher_Fetch_Call) Return(err error) *MockFetcher_Fetch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFetcher_Fetch_Call) RunAndReturn(run func(context1 context.Context, metadata cycle.Metadata) error) *MockFetcher_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockFetcher
func (_mock *MockFetcher) Stop() {
	_mock.Called()
	return
}

// MockFetcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockFetcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockFetcher_Expecter) Stop() *MockFetcher_Stop_Call {
	return &MockFetcher_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockFetcher_Stop_Call) Run(run func()) *MockFetcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFetcher_Stop_Call) Return() *MockFetcher_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFetcher_Stop_Call) RunAndReturn(run func()) *MockFetcher_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockCondition creates a new instance of MockCondition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCondition(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCondition {
	mock := &MockCondition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCondition is an autogenerated mock type for the Condition type
type MockCondition struct {
	mock.Mock
}

type MockCondition_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCondition) EXPECT() *MockCondition_Expecter {
	return &MockCondition_Expecter{mock: &_m.Mock}
}

// Condition provides a mock function for the type MockCondition
func (_mock *MockCondition) Condition() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Condition")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCondition_Condition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Condition'
type MockCondition_Condition_Call struct {
	*mock.Call
}

// Condition is a helper method to define mock.On call
func (_e *MockCondition_Expecter) Condition() *MockCondition_Condition_Call {
	return &MockCondition_Condition_Call{Call: _e.mock.On("Condition")}
}

func (_c *MockCondition_Condition_Call) Run(run func()) *MockCondition_Condition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCondition_Condition_Call) Return(b bool) *MockCondition_Condition_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCondition_Condition_Call) RunAndReturn(run func() bool) *MockCondition_Condition_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockCondition
func (_mock *MockCondition) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCondition_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCondition_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCondition_Expecter) Name() *MockCondition_Name_Call {
	return &MockCondition_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCondition_Name_Call) Run(run func()) *MockCondition_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCondition_Name_Call) Return(s string) *MockCondition_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCondition_Name_Call) RunAndReturn(run func() string) *MockCondition_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResource creates a new instance of MockResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResource {
	mock := &MockResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResource is an autogenerated mock type for the Resource type
type MockResource struct {
	mock.Mock
}

type MockResource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResource) EXPECT() *MockResource_Expecter {
	return &MockResource_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function for the type MockResource
func (_mock *MockResource) GetData() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockResource_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockResource_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *MockResource_Expecter) GetData() *MockResource_GetData_Call {
	return &MockResource_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *MockResource_GetData_Call) Run(run func()) *MockResource_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResource_GetData_Call) Return(v any) *MockResource_GetData_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockResource_GetData_Call) RunAndReturn(run func() any) *MockResource_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetElasticCommonData provides a mock function for the type MockResource
func (_mock *MockResource) GetElasticCommonData() (map[string]any, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetElasticCommonData")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]any, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResource_GetElasticCommonData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetElasticCommonData'
type MockResource_GetElasticCommonData_Call struct {
	*mock.Call
}

// GetElasticCommonData is a helper method to define mock.On call
func (_e *MockResource_Expecter) GetElasticCommonData() *MockResource_GetElasticCommonData_Call {
	return &MockResource_GetElasticCommonData_Call{Call: _e.mock.On("GetElasticCommonData")}
}

func (_c *MockResource_GetElasticCommonData_Call) Run(run func()) *MockResource_GetElasticCommonData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResource_GetElasticCommonData_Call) Return(stringToV map[string]any, err error) *MockResource_GetElasticCommonData_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockResource_GetElasticCommonData_Call) RunAndReturn(run func() (map[string]any, error)) *MockResource_GetElasticCommonData_Call {
	_c.Call.Return(run)
	return _c
}

// GetIds provides a mock function for the type MockResource
func (_mock *MockResource) GetIds() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIds")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockResource_GetIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIds'
type MockResource_GetIds_Call struct {
	*mock.Call
}

// GetIds is a helper method to define mock.On call
func (_e *MockResource_Expecter) GetIds() *MockResource_GetIds_Call {
	return &MockResource_GetIds_Call{Call: _e.mock.On("GetIds")}
}

func (_c *MockResource_GetIds_Call) Run(run func()) *MockResource_GetIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResource_GetIds_Call) Return(strings []string) *MockResource_GetIds_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockResource_GetIds_Call) RunAndReturn(run func() []string) *MockResource_GetIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function for the type MockResource
func (_mock *MockResource) GetMetadata() (ResourceMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 ResourceMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (ResourceMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() ResourceMetadata); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(ResourceMetadata)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResource_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockResource_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *MockResource_Expecter) GetMetadata() *MockResource_GetMetadata_Call {
	return &MockResource_GetMetadata_Call{Call: _e.mock.On("GetMetadata")}
}

func (_c *MockResource_GetMetadata_Call) Run(run func()) *MockResource_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResource_GetMetadata_Call) Return(resourceMetadata ResourceMetadata, err error) *MockResource_GetMetadata_Call {
	_c.Call.Return(resourceMetadata, err)
	return _c
}

func (_c *MockResource_GetMetadata_Call) RunAndReturn(run func() (ResourceMetadata, error)) *MockResource_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}
