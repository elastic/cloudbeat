// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package manager

import (
	context "context"

	cycle "github.com/elastic/cloudbeat/internal/resources/fetching/cycle"
	mock "github.com/stretchr/testify/mock"
)

// MockPreflight is an autogenerated mock type for the Preflight type
type MockPreflight struct {
	mock.Mock
}

type MockPreflight_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreflight) EXPECT() *MockPreflight_Expecter {
	return &MockPreflight_Expecter{mock: &_m.Mock}
}

// Prepare provides a mock function with given fields: _a0, _a1
func (_m *MockPreflight) Prepare(_a0 context.Context, _a1 cycle.Metadata) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cycle.Metadata) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPreflight_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockPreflight_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 cycle.Metadata
func (_e *MockPreflight_Expecter) Prepare(_a0 interface{}, _a1 interface{}) *MockPreflight_Prepare_Call {
	return &MockPreflight_Prepare_Call{Call: _e.mock.On("Prepare", _a0, _a1)}
}

func (_c *MockPreflight_Prepare_Call) Run(run func(_a0 context.Context, _a1 cycle.Metadata)) *MockPreflight_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cycle.Metadata))
	})
	return _c
}

func (_c *MockPreflight_Prepare_Call) Return(_a0 error) *MockPreflight_Prepare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreflight_Prepare_Call) RunAndReturn(run func(context.Context, cycle.Metadata) error) *MockPreflight_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPreflight creates a new instance of MockPreflight. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreflight(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreflight {
	mock := &MockPreflight{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
