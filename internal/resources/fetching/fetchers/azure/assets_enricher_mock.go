// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fetchers

import (
	"context"

	"github.com/elastic/cloudbeat/internal/resources/fetching/cycle"
	"github.com/elastic/cloudbeat/internal/resources/providers/azurelib/inventory"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAssetsEnricher creates a new instance of MockAssetsEnricher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetsEnricher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetsEnricher {
	mock := &MockAssetsEnricher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssetsEnricher is an autogenerated mock type for the AssetsEnricher type
type MockAssetsEnricher struct {
	mock.Mock
}

type MockAssetsEnricher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetsEnricher) EXPECT() *MockAssetsEnricher_Expecter {
	return &MockAssetsEnricher_Expecter{mock: &_m.Mock}
}

// Enrich provides a mock function for the type MockAssetsEnricher
func (_mock *MockAssetsEnricher) Enrich(ctx context.Context, cycleMetadata cycle.Metadata, assets []inventory.AzureAsset) error {
	ret := _mock.Called(ctx, cycleMetadata, assets)

	if len(ret) == 0 {
		panic("no return value specified for Enrich")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cycle.Metadata, []inventory.AzureAsset) error); ok {
		r0 = returnFunc(ctx, cycleMetadata, assets)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAssetsEnricher_Enrich_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enrich'
type MockAssetsEnricher_Enrich_Call struct {
	*mock.Call
}

// Enrich is a helper method to define mock.On call
//   - ctx context.Context
//   - cycleMetadata cycle.Metadata
//   - assets []inventory.AzureAsset
func (_e *MockAssetsEnricher_Expecter) Enrich(ctx interface{}, cycleMetadata interface{}, assets interface{}) *MockAssetsEnricher_Enrich_Call {
	return &MockAssetsEnricher_Enrich_Call{Call: _e.mock.On("Enrich", ctx, cycleMetadata, assets)}
}

func (_c *MockAssetsEnricher_Enrich_Call) Run(run func(ctx context.Context, cycleMetadata cycle.Metadata, assets []inventory.AzureAsset)) *MockAssetsEnricher_Enrich_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 cycle.Metadata
		if args[1] != nil {
			arg1 = args[1].(cycle.Metadata)
		}
		var arg2 []inventory.AzureAsset
		if args[2] != nil {
			arg2 = args[2].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAssetsEnricher_Enrich_Call) Return(err error) *MockAssetsEnricher_Enrich_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAssetsEnricher_Enrich_Call) RunAndReturn(run func(ctx context.Context, cycleMetadata cycle.Metadata, assets []inventory.AzureAsset) error) *MockAssetsEnricher_Enrich_Call {
	_c.Call.Return(run)
	return _c
}
