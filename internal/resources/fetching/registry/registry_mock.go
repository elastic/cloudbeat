// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package registry

import (
	"context"

	"github.com/elastic/cloudbeat/internal/resources/fetching/cycle"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// Keys provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Keys() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockRegistry_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockRegistry_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) Keys() *MockRegistry_Keys_Call {
	return &MockRegistry_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *MockRegistry_Keys_Call) Run(run func()) *MockRegistry_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_Keys_Call) Return(strings []string) *MockRegistry_Keys_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockRegistry_Keys_Call) RunAndReturn(run func() []string) *MockRegistry_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Run(ctx context.Context, key string, metadata cycle.Metadata) error {
	ret := _mock.Called(ctx, key, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, cycle.Metadata) error); ok {
		r0 = returnFunc(ctx, key, metadata)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistry_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRegistry_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - metadata cycle.Metadata
func (_e *MockRegistry_Expecter) Run(ctx interface{}, key interface{}, metadata interface{}) *MockRegistry_Run_Call {
	return &MockRegistry_Run_Call{Call: _e.mock.On("Run", ctx, key, metadata)}
}

func (_c *MockRegistry_Run_Call) Run(run func(ctx context.Context, key string, metadata cycle.Metadata)) *MockRegistry_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 cycle.Metadata
		if args[2] != nil {
			arg2 = args[2].(cycle.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRegistry_Run_Call) Return(err error) *MockRegistry_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistry_Run_Call) RunAndReturn(run func(ctx context.Context, key string, metadata cycle.Metadata) error) *MockRegistry_Run_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldRun provides a mock function for the type MockRegistry
func (_mock *MockRegistry) ShouldRun(key string) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for ShouldRun")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRegistry_ShouldRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRun'
type MockRegistry_ShouldRun_Call struct {
	*mock.Call
}

// ShouldRun is a helper method to define mock.On call
//   - key string
func (_e *MockRegistry_Expecter) ShouldRun(key interface{}) *MockRegistry_ShouldRun_Call {
	return &MockRegistry_ShouldRun_Call{Call: _e.mock.On("ShouldRun", key)}
}

func (_c *MockRegistry_ShouldRun_Call) Run(run func(key string)) *MockRegistry_ShouldRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_ShouldRun_Call) Return(b bool) *MockRegistry_ShouldRun_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRegistry_ShouldRun_Call) RunAndReturn(run func(key string) bool) *MockRegistry_ShouldRun_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Stop() {
	_mock.Called()
	return
}

// MockRegistry_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRegistry_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) Stop() *MockRegistry_Stop_Call {
	return &MockRegistry_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRegistry_Stop_Call) Run(run func()) *MockRegistry_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_Stop_Call) Return() *MockRegistry_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Stop_Call) RunAndReturn(run func()) *MockRegistry_Stop_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Update(context1 context.Context) {
	_mock.Called(context1)
	return
}

// MockRegistry_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRegistry_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRegistry_Expecter) Update(context1 interface{}) *MockRegistry_Update_Call {
	return &MockRegistry_Update_Call{Call: _e.mock.On("Update", context1)}
}

func (_c *MockRegistry_Update_Call) Run(run func(context1 context.Context)) *MockRegistry_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Update_Call) Return() *MockRegistry_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Update_Call) RunAndReturn(run func(context1 context.Context)) *MockRegistry_Update_Call {
	_c.Run(run)
	return _c
}
