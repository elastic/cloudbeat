// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package statushandler

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockStatusHandlerAPI creates a new instance of MockStatusHandlerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatusHandlerAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatusHandlerAPI {
	mock := &MockStatusHandlerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStatusHandlerAPI is an autogenerated mock type for the StatusHandlerAPI type
type MockStatusHandlerAPI struct {
	mock.Mock
}

type MockStatusHandlerAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusHandlerAPI) EXPECT() *MockStatusHandlerAPI_Expecter {
	return &MockStatusHandlerAPI_Expecter{mock: &_m.Mock}
}

// Degraded provides a mock function for the type MockStatusHandlerAPI
func (_mock *MockStatusHandlerAPI) Degraded(message string) {
	_mock.Called(message)
	return
}

// MockStatusHandlerAPI_Degraded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Degraded'
type MockStatusHandlerAPI_Degraded_Call struct {
	*mock.Call
}

// Degraded is a helper method to define mock.On call
//   - message string
func (_e *MockStatusHandlerAPI_Expecter) Degraded(message interface{}) *MockStatusHandlerAPI_Degraded_Call {
	return &MockStatusHandlerAPI_Degraded_Call{Call: _e.mock.On("Degraded", message)}
}

func (_c *MockStatusHandlerAPI_Degraded_Call) Run(run func(message string)) *MockStatusHandlerAPI_Degraded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStatusHandlerAPI_Degraded_Call) Return() *MockStatusHandlerAPI_Degraded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStatusHandlerAPI_Degraded_Call) RunAndReturn(run func(message string)) *MockStatusHandlerAPI_Degraded_Call {
	_c.Run(run)
	return _c
}

// Reset provides a mock function for the type MockStatusHandlerAPI
func (_mock *MockStatusHandlerAPI) Reset() {
	_mock.Called()
	return
}

// MockStatusHandlerAPI_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockStatusHandlerAPI_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockStatusHandlerAPI_Expecter) Reset() *MockStatusHandlerAPI_Reset_Call {
	return &MockStatusHandlerAPI_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockStatusHandlerAPI_Reset_Call) Run(run func()) *MockStatusHandlerAPI_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStatusHandlerAPI_Reset_Call) Return() *MockStatusHandlerAPI_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStatusHandlerAPI_Reset_Call) RunAndReturn(run func()) *MockStatusHandlerAPI_Reset_Call {
	_c.Run(run)
	return _c
}
