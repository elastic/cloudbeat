// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package observability

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	trace "go.opentelemetry.io/otel/trace"
)

// mockTracerProvider is an autogenerated mock type for the tracerProvider type
type mockTracerProvider struct {
	mock.Mock
}

type mockTracerProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTracerProvider) EXPECT() *mockTracerProvider_Expecter {
	return &mockTracerProvider_Expecter{mock: &_m.Mock}
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *mockTracerProvider) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTracerProvider_ForceFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceFlush'
type mockTracerProvider_ForceFlush_Call struct {
	*mock.Call
}

// ForceFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockTracerProvider_Expecter) ForceFlush(ctx interface{}) *mockTracerProvider_ForceFlush_Call {
	return &mockTracerProvider_ForceFlush_Call{Call: _e.mock.On("ForceFlush", ctx)}
}

func (_c *mockTracerProvider_ForceFlush_Call) Run(run func(ctx context.Context)) *mockTracerProvider_ForceFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockTracerProvider_ForceFlush_Call) Return(_a0 error) *mockTracerProvider_ForceFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTracerProvider_ForceFlush_Call) RunAndReturn(run func(context.Context) error) *mockTracerProvider_ForceFlush_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *mockTracerProvider) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTracerProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type mockTracerProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockTracerProvider_Expecter) Shutdown(ctx interface{}) *mockTracerProvider_Shutdown_Call {
	return &mockTracerProvider_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *mockTracerProvider_Shutdown_Call) Run(run func(ctx context.Context)) *mockTracerProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockTracerProvider_Shutdown_Call) Return(_a0 error) *mockTracerProvider_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTracerProvider_Shutdown_Call) RunAndReturn(run func(context.Context) error) *mockTracerProvider_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Tracer provides a mock function with given fields: name, options
func (_m *mockTracerProvider) Tracer(name string, options ...trace.TracerOption) trace.Tracer {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Tracer")
	}

	var r0 trace.Tracer
	if rf, ok := ret.Get(0).(func(string, ...trace.TracerOption) trace.Tracer); ok {
		r0 = rf(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}

	return r0
}

// mockTracerProvider_Tracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tracer'
type mockTracerProvider_Tracer_Call struct {
	*mock.Call
}

// Tracer is a helper method to define mock.On call
//   - name string
//   - options ...trace.TracerOption
func (_e *mockTracerProvider_Expecter) Tracer(name interface{}, options ...interface{}) *mockTracerProvider_Tracer_Call {
	return &mockTracerProvider_Tracer_Call{Call: _e.mock.On("Tracer",
		append([]interface{}{name}, options...)...)}
}

func (_c *mockTracerProvider_Tracer_Call) Run(run func(name string, options ...trace.TracerOption)) *mockTracerProvider_Tracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.TracerOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.TracerOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockTracerProvider_Tracer_Call) Return(_a0 trace.Tracer) *mockTracerProvider_Tracer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTracerProvider_Tracer_Call) RunAndReturn(run func(string, ...trace.TracerOption) trace.Tracer) *mockTracerProvider_Tracer_Call {
	_c.Call.Return(run)
	return _c
}

// tracerProvider provides a mock function with no fields
func (_m *mockTracerProvider) tracerProvider() {
	_m.Called()
}

// mockTracerProvider_tracerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'tracerProvider'
type mockTracerProvider_tracerProvider_Call struct {
	*mock.Call
}

// tracerProvider is a helper method to define mock.On call
func (_e *mockTracerProvider_Expecter) tracerProvider() *mockTracerProvider_tracerProvider_Call {
	return &mockTracerProvider_tracerProvider_Call{Call: _e.mock.On("tracerProvider")}
}

func (_c *mockTracerProvider_tracerProvider_Call) Run(run func()) *mockTracerProvider_tracerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockTracerProvider_tracerProvider_Call) Return() *mockTracerProvider_tracerProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockTracerProvider_tracerProvider_Call) RunAndReturn(run func()) *mockTracerProvider_tracerProvider_Call {
	_c.Run(run)
	return _c
}

// newMockTracerProvider creates a new instance of mockTracerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTracerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTracerProvider {
	mock := &mockTracerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
