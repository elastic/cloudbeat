// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package observability

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// mockMeterProvider is an autogenerated mock type for the meterProvider type
type mockMeterProvider struct {
	mock.Mock
}

type mockMeterProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMeterProvider) EXPECT() *mockMeterProvider_Expecter {
	return &mockMeterProvider_Expecter{mock: &_m.Mock}
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *mockMeterProvider) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMeterProvider_ForceFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceFlush'
type mockMeterProvider_ForceFlush_Call struct {
	*mock.Call
}

// ForceFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockMeterProvider_Expecter) ForceFlush(ctx interface{}) *mockMeterProvider_ForceFlush_Call {
	return &mockMeterProvider_ForceFlush_Call{Call: _e.mock.On("ForceFlush", ctx)}
}

func (_c *mockMeterProvider_ForceFlush_Call) Run(run func(ctx context.Context)) *mockMeterProvider_ForceFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockMeterProvider_ForceFlush_Call) Return(_a0 error) *mockMeterProvider_ForceFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMeterProvider_ForceFlush_Call) RunAndReturn(run func(context.Context) error) *mockMeterProvider_ForceFlush_Call {
	_c.Call.Return(run)
	return _c
}

// Meter provides a mock function with given fields: name, opts
func (_m *mockMeterProvider) Meter(name string, opts ...metric.MeterOption) metric.Meter {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Meter")
	}

	var r0 metric.Meter
	if rf, ok := ret.Get(0).(func(string, ...metric.MeterOption) metric.Meter); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metric.Meter)
		}
	}

	return r0
}

// mockMeterProvider_Meter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Meter'
type mockMeterProvider_Meter_Call struct {
	*mock.Call
}

// Meter is a helper method to define mock.On call
//   - name string
//   - opts ...metric.MeterOption
func (_e *mockMeterProvider_Expecter) Meter(name interface{}, opts ...interface{}) *mockMeterProvider_Meter_Call {
	return &mockMeterProvider_Meter_Call{Call: _e.mock.On("Meter",
		append([]interface{}{name}, opts...)...)}
}

func (_c *mockMeterProvider_Meter_Call) Run(run func(name string, opts ...metric.MeterOption)) *mockMeterProvider_Meter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]metric.MeterOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(metric.MeterOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockMeterProvider_Meter_Call) Return(_a0 metric.Meter) *mockMeterProvider_Meter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMeterProvider_Meter_Call) RunAndReturn(run func(string, ...metric.MeterOption) metric.Meter) *mockMeterProvider_Meter_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *mockMeterProvider) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMeterProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type mockMeterProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockMeterProvider_Expecter) Shutdown(ctx interface{}) *mockMeterProvider_Shutdown_Call {
	return &mockMeterProvider_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *mockMeterProvider_Shutdown_Call) Run(run func(ctx context.Context)) *mockMeterProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockMeterProvider_Shutdown_Call) Return(_a0 error) *mockMeterProvider_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMeterProvider_Shutdown_Call) RunAndReturn(run func(context.Context) error) *mockMeterProvider_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// meterProvider provides a mock function with no fields
func (_m *mockMeterProvider) meterProvider() {
	_m.Called()
}

// mockMeterProvider_meterProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'meterProvider'
type mockMeterProvider_meterProvider_Call struct {
	*mock.Call
}

// meterProvider is a helper method to define mock.On call
func (_e *mockMeterProvider_Expecter) meterProvider() *mockMeterProvider_meterProvider_Call {
	return &mockMeterProvider_meterProvider_Call{Call: _e.mock.On("meterProvider")}
}

func (_c *mockMeterProvider_meterProvider_Call) Run(run func()) *mockMeterProvider_meterProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockMeterProvider_meterProvider_Call) Return() *mockMeterProvider_meterProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockMeterProvider_meterProvider_Call) RunAndReturn(run func()) *mockMeterProvider_meterProvider_Call {
	_c.Run(run)
	return _c
}

// newMockMeterProvider creates a new instance of mockMeterProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMeterProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMeterProvider {
	mock := &mockMeterProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
