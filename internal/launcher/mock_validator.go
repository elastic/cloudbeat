// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package launcher

import (
	config "github.com/elastic/elastic-agent-libs/config"
	mock "github.com/stretchr/testify/mock"
)

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: _a0
func (_m *MockValidator) Validate(_a0 *config.C) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.C) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 *config.C
func (_e *MockValidator_Expecter) Validate(_a0 interface{}) *MockValidator_Validate_Call {
	return &MockValidator_Validate_Call{Call: _e.mock.On("Validate", _a0)}
}

func (_c *MockValidator_Validate_Call) Run(run func(_a0 *config.C)) *MockValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.C))
	})
	return _c
}

func (_c *MockValidator_Validate_Call) Return(_a0 error) *MockValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidator_Validate_Call) RunAndReturn(run func(*config.C) error) *MockValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
