// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package errorhandler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockErrorPublisher is an autogenerated mock type for the ErrorPublisher type
type MockErrorPublisher struct {
	mock.Mock
}

type MockErrorPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorPublisher) EXPECT() *MockErrorPublisher_Expecter {
	return &MockErrorPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, err
func (_m *MockErrorPublisher) Publish(ctx context.Context, err error) {
	_m.Called(ctx, err)
}

// MockErrorPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockErrorPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockErrorPublisher_Expecter) Publish(ctx interface{}, err interface{}) *MockErrorPublisher_Publish_Call {
	return &MockErrorPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, err)}
}

func (_c *MockErrorPublisher_Publish_Call) Run(run func(ctx context.Context, err error)) *MockErrorPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockErrorPublisher_Publish_Call) Return() *MockErrorPublisher_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorPublisher_Publish_Call) RunAndReturn(run func(context.Context, error)) *MockErrorPublisher_Publish_Call {
	_c.Run(run)
	return _c
}

// NewMockErrorPublisher creates a new instance of MockErrorPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorPublisher {
	mock := &MockErrorPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
