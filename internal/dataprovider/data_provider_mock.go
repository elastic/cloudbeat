// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dataprovider

import (
	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/elastic/cloudbeat/internal/resources/fetching"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommonDataProvider creates a new instance of MockCommonDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommonDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommonDataProvider {
	mock := &MockCommonDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommonDataProvider is an autogenerated mock type for the CommonDataProvider type
type MockCommonDataProvider struct {
	mock.Mock
}

type MockCommonDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommonDataProvider) EXPECT() *MockCommonDataProvider_Expecter {
	return &MockCommonDataProvider_Expecter{mock: &_m.Mock}
}

// EnrichEvent provides a mock function for the type MockCommonDataProvider
func (_mock *MockCommonDataProvider) EnrichEvent(event *beat.Event, resource fetching.ResourceMetadata) error {
	ret := _mock.Called(event, resource)

	if len(ret) == 0 {
		panic("no return value specified for EnrichEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*beat.Event, fetching.ResourceMetadata) error); ok {
		r0 = returnFunc(event, resource)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommonDataProvider_EnrichEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrichEvent'
type MockCommonDataProvider_EnrichEvent_Call struct {
	*mock.Call
}

// EnrichEvent is a helper method to define mock.On call
//   - event *beat.Event
//   - resource fetching.ResourceMetadata
func (_e *MockCommonDataProvider_Expecter) EnrichEvent(event interface{}, resource interface{}) *MockCommonDataProvider_EnrichEvent_Call {
	return &MockCommonDataProvider_EnrichEvent_Call{Call: _e.mock.On("EnrichEvent", event, resource)}
}

func (_c *MockCommonDataProvider_EnrichEvent_Call) Run(run func(event *beat.Event, resource fetching.ResourceMetadata)) *MockCommonDataProvider_EnrichEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *beat.Event
		if args[0] != nil {
			arg0 = args[0].(*beat.Event)
		}
		var arg1 fetching.ResourceMetadata
		if args[1] != nil {
			arg1 = args[1].(fetching.ResourceMetadata)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCommonDataProvider_EnrichEvent_Call) Return(err error) *MockCommonDataProvider_EnrichEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommonDataProvider_EnrichEvent_Call) RunAndReturn(run func(event *beat.Event, resource fetching.ResourceMetadata) error) *MockCommonDataProvider_EnrichEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIdProvider creates a new instance of MockIdProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdProvider {
	mock := &MockIdProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdProvider is an autogenerated mock type for the IdProvider type
type MockIdProvider struct {
	mock.Mock
}

type MockIdProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdProvider) EXPECT() *MockIdProvider_Expecter {
	return &MockIdProvider_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function for the type MockIdProvider
func (_mock *MockIdProvider) GetId(resourceType string, resourceId string) string {
	ret := _mock.Called(resourceType, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(resourceType, resourceId)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIdProvider_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockIdProvider_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
//   - resourceType string
//   - resourceId string
func (_e *MockIdProvider_Expecter) GetId(resourceType interface{}, resourceId interface{}) *MockIdProvider_GetId_Call {
	return &MockIdProvider_GetId_Call{Call: _e.mock.On("GetId", resourceType, resourceId)}
}

func (_c *MockIdProvider_GetId_Call) Run(run func(resourceType string, resourceId string)) *MockIdProvider_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIdProvider_GetId_Call) Return(s string) *MockIdProvider_GetId_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIdProvider_GetId_Call) RunAndReturn(run func(resourceType string, resourceId string) string) *MockIdProvider_GetId_Call {
	_c.Call.Return(run)
	return _c
}
