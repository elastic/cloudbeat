// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package k8s

import (
	"github.com/elastic/cloudbeat/internal/infra/clog"
	"github.com/elastic/elastic-agent-autodiscover/kubernetes"
	mock "github.com/stretchr/testify/mock"
	kubernetes0 "k8s.io/client-go/kubernetes"
)

// NewMockClientGetterAPI creates a new instance of MockClientGetterAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientGetterAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientGetterAPI {
	mock := &MockClientGetterAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientGetterAPI is an autogenerated mock type for the ClientGetterAPI type
type MockClientGetterAPI struct {
	mock.Mock
}

type MockClientGetterAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientGetterAPI) EXPECT() *MockClientGetterAPI_Expecter {
	return &MockClientGetterAPI_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function for the type MockClientGetterAPI
func (_mock *MockClientGetterAPI) GetClient(log *clog.Logger, kubeConfig string, options kubernetes.KubeClientOptions) (kubernetes0.Interface, error) {
	ret := _mock.Called(log, kubeConfig, options)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 kubernetes0.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*clog.Logger, string, kubernetes.KubeClientOptions) (kubernetes0.Interface, error)); ok {
		return returnFunc(log, kubeConfig, options)
	}
	if returnFunc, ok := ret.Get(0).(func(*clog.Logger, string, kubernetes.KubeClientOptions) kubernetes0.Interface); ok {
		r0 = returnFunc(log, kubeConfig, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes0.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*clog.Logger, string, kubernetes.KubeClientOptions) error); ok {
		r1 = returnFunc(log, kubeConfig, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientGetterAPI_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockClientGetterAPI_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - log *clog.Logger
//   - kubeConfig string
//   - options kubernetes.KubeClientOptions
func (_e *MockClientGetterAPI_Expecter) GetClient(log interface{}, kubeConfig interface{}, options interface{}) *MockClientGetterAPI_GetClient_Call {
	return &MockClientGetterAPI_GetClient_Call{Call: _e.mock.On("GetClient", log, kubeConfig, options)}
}

func (_c *MockClientGetterAPI_GetClient_Call) Run(run func(log *clog.Logger, kubeConfig string, options kubernetes.KubeClientOptions)) *MockClientGetterAPI_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *clog.Logger
		if args[0] != nil {
			arg0 = args[0].(*clog.Logger)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 kubernetes.KubeClientOptions
		if args[2] != nil {
			arg2 = args[2].(kubernetes.KubeClientOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClientGetterAPI_GetClient_Call) Return(interfaceParam kubernetes0.Interface, err error) *MockClientGetterAPI_GetClient_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *MockClientGetterAPI_GetClient_Call) RunAndReturn(run func(log *clog.Logger, kubeConfig string, options kubernetes.KubeClientOptions) (kubernetes0.Interface, error)) *MockClientGetterAPI_GetClient_Call {
	_c.Call.Return(run)
	return _c
}
