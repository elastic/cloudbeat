// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package builder

import (
	"context"

	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/elastic/cloudbeat/internal/evaluator"
	"github.com/elastic/cloudbeat/internal/resources/fetching"
	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockManager
func (_mock *MockManager) Run() {
	_mock.Called()
	return
}

// MockManager_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockManager_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockManager_Expecter) Run() *MockManager_Run_Call {
	return &MockManager_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockManager_Run_Call) Run(run func()) *MockManager_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Run_Call) Return() *MockManager_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Run_Call) RunAndReturn(run func()) *MockManager_Run_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockManager
func (_mock *MockManager) Stop() {
	_mock.Called()
	return
}

// MockManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockManager_Expecter) Stop() *MockManager_Stop_Call {
	return &MockManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockManager_Stop_Call) Run(run func()) *MockManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Stop_Call) Return() *MockManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Stop_Call) RunAndReturn(run func()) *MockManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockEvaluator creates a new instance of MockEvaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvaluator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvaluator {
	mock := &MockEvaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvaluator is an autogenerated mock type for the Evaluator type
type MockEvaluator struct {
	mock.Mock
}

type MockEvaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvaluator) EXPECT() *MockEvaluator_Expecter {
	return &MockEvaluator_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function for the type MockEvaluator
func (_mock *MockEvaluator) Eval(ctx context.Context, resource fetching.ResourceInfo) (evaluator.EventData, error) {
	ret := _mock.Called(ctx, resource)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 evaluator.EventData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, fetching.ResourceInfo) (evaluator.EventData, error)); ok {
		return returnFunc(ctx, resource)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, fetching.ResourceInfo) evaluator.EventData); ok {
		r0 = returnFunc(ctx, resource)
	} else {
		r0 = ret.Get(0).(evaluator.EventData)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, fetching.ResourceInfo) error); ok {
		r1 = returnFunc(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEvaluator_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type MockEvaluator_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - ctx context.Context
//   - resource fetching.ResourceInfo
func (_e *MockEvaluator_Expecter) Eval(ctx interface{}, resource interface{}) *MockEvaluator_Eval_Call {
	return &MockEvaluator_Eval_Call{Call: _e.mock.On("Eval", ctx, resource)}
}

func (_c *MockEvaluator_Eval_Call) Run(run func(ctx context.Context, resource fetching.ResourceInfo)) *MockEvaluator_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 fetching.ResourceInfo
		if args[1] != nil {
			arg1 = args[1].(fetching.ResourceInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEvaluator_Eval_Call) Return(eventData evaluator.EventData, err error) *MockEvaluator_Eval_Call {
	_c.Call.Return(eventData, err)
	return _c
}

func (_c *MockEvaluator_Eval_Call) RunAndReturn(run func(ctx context.Context, resource fetching.ResourceInfo) (evaluator.EventData, error)) *MockEvaluator_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransformer creates a new instance of MockTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransformer {
	mock := &MockTransformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransformer is an autogenerated mock type for the Transformer type
type MockTransformer struct {
	mock.Mock
}

type MockTransformer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransformer) EXPECT() *MockTransformer_Expecter {
	return &MockTransformer_Expecter{mock: &_m.Mock}
}

// CreateBeatEvents provides a mock function for the type MockTransformer
func (_mock *MockTransformer) CreateBeatEvents(ctx context.Context, data evaluator.EventData) ([]beat.Event, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateBeatEvents")
	}

	var r0 []beat.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, evaluator.EventData) ([]beat.Event, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, evaluator.EventData) []beat.Event); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]beat.Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, evaluator.EventData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransformer_CreateBeatEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBeatEvents'
type MockTransformer_CreateBeatEvents_Call struct {
	*mock.Call
}

// CreateBeatEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - data evaluator.EventData
func (_e *MockTransformer_Expecter) CreateBeatEvents(ctx interface{}, data interface{}) *MockTransformer_CreateBeatEvents_Call {
	return &MockTransformer_CreateBeatEvents_Call{Call: _e.mock.On("CreateBeatEvents", ctx, data)}
}

func (_c *MockTransformer_CreateBeatEvents_Call) Run(run func(ctx context.Context, data evaluator.EventData)) *MockTransformer_CreateBeatEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 evaluator.EventData
		if args[1] != nil {
			arg1 = args[1].(evaluator.EventData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransformer_CreateBeatEvents_Call) Return(events []beat.Event, err error) *MockTransformer_CreateBeatEvents_Call {
	_c.Call.Return(events, err)
	return _c
}

func (_c *MockTransformer_CreateBeatEvents_Call) RunAndReturn(run func(ctx context.Context, data evaluator.EventData) ([]beat.Event, error)) *MockTransformer_CreateBeatEvents_Call {
	_c.Call.Return(run)
	return _c
}
