// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package builder

import (
	"context"

	"github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBenchmark creates a new instance of MockBenchmark. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBenchmark(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBenchmark {
	mock := &MockBenchmark{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBenchmark is an autogenerated mock type for the Benchmark type
type MockBenchmark struct {
	mock.Mock
}

type MockBenchmark_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBenchmark) EXPECT() *MockBenchmark_Expecter {
	return &MockBenchmark_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockBenchmark
func (_mock *MockBenchmark) Run(ctx context.Context) (<-chan []beat.Event, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 <-chan []beat.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan []beat.Event, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan []beat.Event); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []beat.Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBenchmark_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockBenchmark_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBenchmark_Expecter) Run(ctx interface{}) *MockBenchmark_Run_Call {
	return &MockBenchmark_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockBenchmark_Run_Call) Run(run func(ctx context.Context)) *MockBenchmark_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBenchmark_Run_Call) Return(eventsCh <-chan []beat.Event, err error) *MockBenchmark_Run_Call {
	_c.Call.Return(eventsCh, err)
	return _c
}

func (_c *MockBenchmark_Run_Call) RunAndReturn(run func(ctx context.Context) (<-chan []beat.Event, error)) *MockBenchmark_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockBenchmark
func (_mock *MockBenchmark) Stop() {
	_mock.Called()
	return
}

// MockBenchmark_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockBenchmark_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockBenchmark_Expecter) Stop() *MockBenchmark_Stop_Call {
	return &MockBenchmark_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockBenchmark_Stop_Call) Run(run func()) *MockBenchmark_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBenchmark_Stop_Call) Return() *MockBenchmark_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBenchmark_Stop_Call) RunAndReturn(run func()) *MockBenchmark_Stop_Call {
	_c.Run(run)
	return _c
}
