// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package vulnerability

import (
	"context"

	"github.com/aquasecurity/trivy/pkg/flag"
	"github.com/aquasecurity/trivy/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// newMockRunnerInterface creates a new instance of mockRunnerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRunnerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRunnerInterface {
	mock := &mockRunnerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockRunnerInterface is an autogenerated mock type for the runnerInterface type
type mockRunnerInterface struct {
	mock.Mock
}

type mockRunnerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRunnerInterface) EXPECT() *mockRunnerInterface_Expecter {
	return &mockRunnerInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type mockRunnerInterface
func (_mock *mockRunnerInterface) Close(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockRunnerInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockRunnerInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockRunnerInterface_Expecter) Close(ctx interface{}) *mockRunnerInterface_Close_Call {
	return &mockRunnerInterface_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *mockRunnerInterface_Close_Call) Run(run func(ctx context.Context)) *mockRunnerInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockRunnerInterface_Close_Call) Return(err error) *mockRunnerInterface_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockRunnerInterface_Close_Call) RunAndReturn(run func(ctx context.Context) error) *mockRunnerInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function for the type mockRunnerInterface
func (_mock *mockRunnerInterface) Filter(ctx context.Context, opts flag.Options, report types.Report) (types.Report, error) {
	ret := _mock.Called(ctx, opts, report)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 types.Report
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, flag.Options, types.Report) (types.Report, error)); ok {
		return returnFunc(ctx, opts, report)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, flag.Options, types.Report) types.Report); ok {
		r0 = returnFunc(ctx, opts, report)
	} else {
		r0 = ret.Get(0).(types.Report)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, flag.Options, types.Report) error); ok {
		r1 = returnFunc(ctx, opts, report)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockRunnerInterface_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type mockRunnerInterface_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - ctx context.Context
//   - opts flag.Options
//   - report types.Report
func (_e *mockRunnerInterface_Expecter) Filter(ctx interface{}, opts interface{}, report interface{}) *mockRunnerInterface_Filter_Call {
	return &mockRunnerInterface_Filter_Call{Call: _e.mock.On("Filter", ctx, opts, report)}
}

func (_c *mockRunnerInterface_Filter_Call) Run(run func(ctx context.Context, opts flag.Options, report types.Report)) *mockRunnerInterface_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 flag.Options
		if args[1] != nil {
			arg1 = args[1].(flag.Options)
		}
		var arg2 types.Report
		if args[2] != nil {
			arg2 = args[2].(types.Report)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockRunnerInterface_Filter_Call) Return(report1 types.Report, err error) *mockRunnerInterface_Filter_Call {
	_c.Call.Return(report1, err)
	return _c
}

func (_c *mockRunnerInterface_Filter_Call) RunAndReturn(run func(ctx context.Context, opts flag.Options, report types.Report) (types.Report, error)) *mockRunnerInterface_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function for the type mockRunnerInterface
func (_mock *mockRunnerInterface) Report(ctx context.Context, opts flag.Options, report types.Report) error {
	ret := _mock.Called(ctx, opts, report)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, flag.Options, types.Report) error); ok {
		r0 = returnFunc(ctx, opts, report)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockRunnerInterface_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type mockRunnerInterface_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - ctx context.Context
//   - opts flag.Options
//   - report types.Report
func (_e *mockRunnerInterface_Expecter) Report(ctx interface{}, opts interface{}, report interface{}) *mockRunnerInterface_Report_Call {
	return &mockRunnerInterface_Report_Call{Call: _e.mock.On("Report", ctx, opts, report)}
}

func (_c *mockRunnerInterface_Report_Call) Run(run func(ctx context.Context, opts flag.Options, report types.Report)) *mockRunnerInterface_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 flag.Options
		if args[1] != nil {
			arg1 = args[1].(flag.Options)
		}
		var arg2 types.Report
		if args[2] != nil {
			arg2 = args[2].(types.Report)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockRunnerInterface_Report_Call) Return(err error) *mockRunnerInterface_Report_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockRunnerInterface_Report_Call) RunAndReturn(run func(ctx context.Context, opts flag.Options, report types.Report) error) *mockRunnerInterface_Report_Call {
	_c.Call.Return(run)
	return _c
}

// ScanVM provides a mock function for the type mockRunnerInterface
func (_mock *mockRunnerInterface) ScanVM(ctx context.Context, opts flag.Options) (types.Report, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ScanVM")
	}

	var r0 types.Report
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, flag.Options) (types.Report, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, flag.Options) types.Report); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		r0 = ret.Get(0).(types.Report)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, flag.Options) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockRunnerInterface_ScanVM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanVM'
type mockRunnerInterface_ScanVM_Call struct {
	*mock.Call
}

// ScanVM is a helper method to define mock.On call
//   - ctx context.Context
//   - opts flag.Options
func (_e *mockRunnerInterface_Expecter) ScanVM(ctx interface{}, opts interface{}) *mockRunnerInterface_ScanVM_Call {
	return &mockRunnerInterface_ScanVM_Call{Call: _e.mock.On("ScanVM", ctx, opts)}
}

func (_c *mockRunnerInterface_ScanVM_Call) Run(run func(ctx context.Context, opts flag.Options)) *mockRunnerInterface_ScanVM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 flag.Options
		if args[1] != nil {
			arg1 = args[1].(flag.Options)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockRunnerInterface_ScanVM_Call) Return(report types.Report, err error) *mockRunnerInterface_ScanVM_Call {
	_c.Call.Return(report, err)
	return _c
}

func (_c *mockRunnerInterface_ScanVM_Call) RunAndReturn(run func(ctx context.Context, opts flag.Options) (types.Report, error)) *mockRunnerInterface_ScanVM_Call {
	_c.Call.Return(run)
	return _c
}
