// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"

	"github.com/elastic/elastic-agent-libs/logp"

	"github.com/elastic/cloudbeat/internal/resources/providers/awslib/ec2"
)

type VulnerabilityReplicator struct {
	log      *logp.Logger
	provider replicatorProvider
	ch       chan ec2.EBSSnapshot
}

type replicatorProvider interface {
	CreateSnapshots(ctx context.Context, ins *ec2.Ec2Instance) ([]ec2.EBSSnapshot, error)
}

func NewVulnerabilityReplicator(log *logp.Logger, provider replicatorProvider) VulnerabilityReplicator {
	log.Debug("VulnerabilityReplicator: New")
	ch := make(chan ec2.EBSSnapshot)
	return VulnerabilityReplicator{
		log:      log,
		ch:       ch,
		provider: provider,
	}
}

func (f VulnerabilityReplicator) SnapshotInstance(ctx context.Context, insCh chan *ec2.Ec2Instance) []ec2.EBSSnapshot {
	f.log.Info("Starting VulnerabilityReplicator.SnapshotInstance")
	defer close(f.ch)
	var snapshots []ec2.EBSSnapshot
	for {
		select {
		case <-ctx.Done():
			f.log.Info("VulnerabilityReplicator.SnapshotInstance context canceled")
			return snapshots
		case data, ok := <-insCh:
			if !ok {
				f.log.Info("VulnerabilityReplicator.SnapshotInstance channel is closed")
				return snapshots
			}
			sp, err := f.provider.CreateSnapshots(ctx, data)
			if err != nil {
				f.log.Errorf("VulnerabilityReplicator.SnapshotInstance.CreateSnapshots failed: %v", err)
				continue
			}

			snapshots = append(snapshots, sp...)
			for _, s := range sp {
				f.log.Infof("VulnerabilityReplicator.SnapshotInstance created snapshot: %s of size %d for instance %s", s.SnapshotId, s.VolumeSize, *data.InstanceId)
				select {
				case <-ctx.Done():
					f.log.Info("VulnerabilityReplicator.SnapshotInstance context canceled")
					return snapshots
				case f.ch <- s:
				}
			}
		}
	}
}

func (f VulnerabilityReplicator) GetChan() chan ec2.EBSSnapshot {
	return f.ch
}
