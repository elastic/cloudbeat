// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package vulnerability

import (
	"github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEnricher creates a new instance of MockEnricher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnricher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnricher {
	mock := &MockEnricher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnricher is an autogenerated mock type for the Enricher type
type MockEnricher struct {
	mock.Mock
}

type MockEnricher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnricher) EXPECT() *MockEnricher_Expecter {
	return &MockEnricher_Expecter{mock: &_m.Mock}
}

// EnrichEvent provides a mock function for the type MockEnricher
func (_mock *MockEnricher) EnrichEvent(event *beat.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for EnrichEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*beat.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnricher_EnrichEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrichEvent'
type MockEnricher_EnrichEvent_Call struct {
	*mock.Call
}

// EnrichEvent is a helper method to define mock.On call
//   - event *beat.Event
func (_e *MockEnricher_Expecter) EnrichEvent(event interface{}) *MockEnricher_EnrichEvent_Call {
	return &MockEnricher_EnrichEvent_Call{Call: _e.mock.On("EnrichEvent", event)}
}

func (_c *MockEnricher_EnrichEvent_Call) Run(run func(event *beat.Event)) *MockEnricher_EnrichEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *beat.Event
		if args[0] != nil {
			arg0 = args[0].(*beat.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnricher_EnrichEvent_Call) Return(err error) *MockEnricher_EnrichEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnricher_EnrichEvent_Call) RunAndReturn(run func(event *beat.Event) error) *MockEnricher_EnrichEvent_Call {
	_c.Call.Return(run)
	return _c
}
