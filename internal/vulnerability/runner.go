// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"errors"
	"time"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityRunner struct {
	log    *logp.Logger
	runner artifact.Runner
}

func NewVulnerabilityRunner(log *logp.Logger) (VulnerabilityRunner, error) {
	ctx := context.Background()
	log.Debug("NewVulnerabilityRunner: New")

	if err := clearTrivyCache(ctx, log); err != nil {
		log.Errorf("error during runner cache clearing %s", err.Error())
	}

	opts := flag.Options{
		GlobalOptions: flag.GlobalOptions{
			// TODO: Make configurable
			Timeout: 1 * time.Hour,
			Quiet:   false,
			Debug:   true,
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType: []string{trivy_types.VulnTypeOS, trivy_types.VulnTypeLibrary},
		},
		ScanOptions: flag.ScanOptions{
			Scanners: []trivy_types.Scanner{trivy_types.VulnerabilityScanner},
			RekorURL: "https://rekor.sigstore.dev",
		},
		DBOptions: flag.DBOptions{
			NoProgress:       true,
			DBRepository:     "ghcr.io/aquasecurity/trivy-db",
			JavaDBRepository: "ghcr.io/aquasecurity/trivy-java-db",
		},
	}

	runner, err := artifact.NewRunner(ctx, opts)
	if err != nil {
		log.Error("NewVulnerabilityRunner: NewRunner error: ", err)
		return VulnerabilityRunner{}, err
	}

	return VulnerabilityRunner{
		log:    log,
		runner: runner,
	}, nil
}

func (f VulnerabilityRunner) GetRunner() artifact.Runner {
	return f.runner
}

func clearTrivyCache(ctx context.Context, log *logp.Logger) error {
	log.Info("Starting VulnerabilityRunner.ClearCache")
	defer log.Info("Ending VulnerabilityRunner.ClearCache")

	// These are the three available cli settings for clean/reset translated to flag.Options object.
	// 	{CacheOptions: flag.CacheOptions{ClearCache: true}},
	// 	{DBOptions: flag.DBOptions{Reset: true}},
	// 	{MisconfOptions: flag.MisconfOptions{ResetPolicyBundle: true}},
	// In our case we will use only the ClearCache option.

	errs := make([]error, 0, 2)
	r, err := artifact.NewRunner(ctx, flag.Options{CacheOptions: flag.CacheOptions{ClearCache: true}})
	if err != nil {
		if !errors.Is(err, artifact.SkipScan) {
			errs = append(errs, err)
		}
	}

	// it should never go here (NewRunner should always return artifact.SkipScan and nil runner), but just in case it goes, lets close the runner.
	if r != nil {
		errs = append(errs, r.Close(ctx))
	}

	return errors.Join(errs...)
}
