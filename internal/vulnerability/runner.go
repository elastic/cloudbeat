// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"time"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/commands/clean"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityRunner struct {
	log    *logp.Logger
	runner artifact.Runner
}

func NewVulnerabilityRunner(log *logp.Logger) (VulnerabilityRunner, error) {
	ctx := context.Background()
	log.Debug("NewVulnerabilityRunner: New")

	if err := clearTrivyCache(ctx, log); err != nil {
		log.Errorf("error during runner cache clearing %s", err.Error())
	}

	globalOptionsFG := flag.NewGlobalFlagGroup()
	globalOptions, err := globalOptionsFG.ToOptions() // to keep default values
	if err != nil {
		log.Error("NewVulnerabilityRunner: global flag group error: ", err)
		return VulnerabilityRunner{}, err
	}
	globalOptions.Timeout = 1 * time.Hour
	globalOptions.Quiet = false
	globalOptions.Debug = true

	packageOptionsFG := flag.NewPackageFlagGroup()
	packageOptions, err := packageOptionsFG.ToOptions() // to keep default values
	if err != nil {
		log.Error("NewVulnerabilityRunner: package flag group error: ", err)
		return VulnerabilityRunner{}, err
	}
	packageOptions.PkgTypes = []string{trivy_types.PkgTypeOS, trivy_types.PkgTypeLibrary}

	scanOptionsFG := flag.NewScanFlagGroup()
	scanOptions, err := scanOptionsFG.ToOptions(nil) // to keep default values
	if err != nil {
		log.Error("NewVulnerabilityRunner: scan flag group error: ", err)
		return VulnerabilityRunner{}, err
	}
	scanOptions.Scanners = []trivy_types.Scanner{trivy_types.VulnerabilityScanner}
	// scanOptions.RekorURL = "https://rekor.sigstore.dev"

	dbOptionsFG := flag.NewDBFlagGroup()
	dbOptions, err := dbOptionsFG.ToOptions() // to keep default values
	if err != nil {
		log.Error("NewVulnerabilityRunner: db flag group error: ", err)
		return VulnerabilityRunner{}, err
	}
	dbOptions.NoProgress = true
	// dbOptions.DBRepository = name.MustParseReference("ghcr.io/aquasecurity/trivy-db")
	// dbOptions.JavaDBRepository = name.MustParseReference("ghcr.io/aquasecurity/trivy-java-db")

	opts := flag.Options{
		GlobalOptions:  globalOptions,
		PackageOptions: packageOptions,
		ScanOptions:    scanOptions,
		DBOptions:      dbOptions,
	}

	runner, err := artifact.NewRunner(ctx, opts)
	if err != nil {
		log.Error("NewVulnerabilityRunner: NewRunner error: ", err)
		return VulnerabilityRunner{}, err
	}

	return VulnerabilityRunner{
		log:    log,
		runner: runner,
	}, nil
}

func (f VulnerabilityRunner) GetRunner() artifact.Runner {
	return f.runner
}

func clearTrivyCache(ctx context.Context, log *logp.Logger) error {
	log.Info("Starting VulnerabilityRunner.ClearCache")
	defer log.Info("Ending VulnerabilityRunner.ClearCache")

	// These are the clean settings for clean/reset translated to flag.Options object.
	// 	type CleanOptions struct {
	// 		CleanAll             bool
	// 		CleanScanCache       bool
	// 		CleanVulnerabilityDB bool
	// 		CleanJavaDB          bool
	// 		CleanChecksBundle    bool
	// 		CleanVEXRepositories bool
	// 	}
	// In our case we will use only the CleanScanCache option.

	// create flags group to keep possible default values.
	cfg := flag.NewCleanFlagGroup()
	opts, err := cfg.ToOptions()
	if err != nil {
		return err
	}
	opts.CleanScanCache = true

	return clean.Run(ctx, flag.Options{CleanOptions: opts})
}
