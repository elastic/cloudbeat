// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package vulnerability

import (
	context "context"

	ec2 "github.com/elastic/cloudbeat/internal/resources/providers/awslib/ec2"
	mock "github.com/stretchr/testify/mock"
)

// mockWorkerProvider is an autogenerated mock type for the workerProvider type
type mockWorkerProvider struct {
	mock.Mock
}

type mockWorkerProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWorkerProvider) EXPECT() *mockWorkerProvider_Expecter {
	return &mockWorkerProvider_Expecter{mock: &_m.Mock}
}

// CreateSnapshots provides a mock function with given fields: ctx, ins
func (_m *mockWorkerProvider) CreateSnapshots(ctx context.Context, ins *ec2.Ec2Instance) ([]ec2.EBSSnapshot, error) {
	ret := _m.Called(ctx, ins)

	var r0 []ec2.EBSSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.Ec2Instance) ([]ec2.EBSSnapshot, error)); ok {
		return rf(ctx, ins)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.Ec2Instance) []ec2.EBSSnapshot); ok {
		r0 = rf(ctx, ins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ec2.EBSSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2.Ec2Instance) error); ok {
		r1 = rf(ctx, ins)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWorkerProvider_CreateSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnapshots'
type mockWorkerProvider_CreateSnapshots_Call struct {
	*mock.Call
}

// CreateSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - ins *ec2.Ec2Instance
func (_e *mockWorkerProvider_Expecter) CreateSnapshots(ctx interface{}, ins interface{}) *mockWorkerProvider_CreateSnapshots_Call {
	return &mockWorkerProvider_CreateSnapshots_Call{Call: _e.mock.On("CreateSnapshots", ctx, ins)}
}

func (_c *mockWorkerProvider_CreateSnapshots_Call) Run(run func(ctx context.Context, ins *ec2.Ec2Instance)) *mockWorkerProvider_CreateSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ec2.Ec2Instance))
	})
	return _c
}

func (_c *mockWorkerProvider_CreateSnapshots_Call) Return(_a0 []ec2.EBSSnapshot, _a1 error) *mockWorkerProvider_CreateSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWorkerProvider_CreateSnapshots_Call) RunAndReturn(run func(context.Context, *ec2.Ec2Instance) ([]ec2.EBSSnapshot, error)) *mockWorkerProvider_CreateSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnapshot provides a mock function with given fields: ctx, snapshot
func (_m *mockWorkerProvider) DeleteSnapshot(ctx context.Context, snapshot ec2.EBSSnapshot) error {
	ret := _m.Called(ctx, snapshot)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ec2.EBSSnapshot) error); ok {
		r0 = rf(ctx, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockWorkerProvider_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type mockWorkerProvider_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - snapshot ec2.EBSSnapshot
func (_e *mockWorkerProvider_Expecter) DeleteSnapshot(ctx interface{}, snapshot interface{}) *mockWorkerProvider_DeleteSnapshot_Call {
	return &mockWorkerProvider_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot", ctx, snapshot)}
}

func (_c *mockWorkerProvider_DeleteSnapshot_Call) Run(run func(ctx context.Context, snapshot ec2.EBSSnapshot)) *mockWorkerProvider_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ec2.EBSSnapshot))
	})
	return _c
}

func (_c *mockWorkerProvider_DeleteSnapshot_Call) Return(_a0 error) *mockWorkerProvider_DeleteSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockWorkerProvider_DeleteSnapshot_Call) RunAndReturn(run func(context.Context, ec2.EBSSnapshot) error) *mockWorkerProvider_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeInstances provides a mock function with given fields: ctx
func (_m *mockWorkerProvider) DescribeInstances(ctx context.Context) ([]*ec2.Ec2Instance, error) {
	ret := _m.Called(ctx)

	var r0 []*ec2.Ec2Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ec2.Ec2Instance, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ec2.Ec2Instance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.Ec2Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWorkerProvider_DescribeInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInstances'
type mockWorkerProvider_DescribeInstances_Call struct {
	*mock.Call
}

// DescribeInstances is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockWorkerProvider_Expecter) DescribeInstances(ctx interface{}) *mockWorkerProvider_DescribeInstances_Call {
	return &mockWorkerProvider_DescribeInstances_Call{Call: _e.mock.On("DescribeInstances", ctx)}
}

func (_c *mockWorkerProvider_DescribeInstances_Call) Run(run func(ctx context.Context)) *mockWorkerProvider_DescribeInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockWorkerProvider_DescribeInstances_Call) Return(_a0 []*ec2.Ec2Instance, _a1 error) *mockWorkerProvider_DescribeInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWorkerProvider_DescribeInstances_Call) RunAndReturn(run func(context.Context) ([]*ec2.Ec2Instance, error)) *mockWorkerProvider_DescribeInstances_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSnapshots provides a mock function with given fields: ctx, snap
func (_m *mockWorkerProvider) DescribeSnapshots(ctx context.Context, snap ec2.EBSSnapshot) ([]ec2.EBSSnapshot, error) {
	ret := _m.Called(ctx, snap)

	var r0 []ec2.EBSSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ec2.EBSSnapshot) ([]ec2.EBSSnapshot, error)); ok {
		return rf(ctx, snap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ec2.EBSSnapshot) []ec2.EBSSnapshot); ok {
		r0 = rf(ctx, snap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ec2.EBSSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ec2.EBSSnapshot) error); ok {
		r1 = rf(ctx, snap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWorkerProvider_DescribeSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSnapshots'
type mockWorkerProvider_DescribeSnapshots_Call struct {
	*mock.Call
}

// DescribeSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - snap ec2.EBSSnapshot
func (_e *mockWorkerProvider_Expecter) DescribeSnapshots(ctx interface{}, snap interface{}) *mockWorkerProvider_DescribeSnapshots_Call {
	return &mockWorkerProvider_DescribeSnapshots_Call{Call: _e.mock.On("DescribeSnapshots", ctx, snap)}
}

func (_c *mockWorkerProvider_DescribeSnapshots_Call) Run(run func(ctx context.Context, snap ec2.EBSSnapshot)) *mockWorkerProvider_DescribeSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ec2.EBSSnapshot))
	})
	return _c
}

func (_c *mockWorkerProvider_DescribeSnapshots_Call) Return(_a0 []ec2.EBSSnapshot, _a1 error) *mockWorkerProvider_DescribeSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWorkerProvider_DescribeSnapshots_Call) RunAndReturn(run func(context.Context, ec2.EBSSnapshot) ([]ec2.EBSSnapshot, error)) *mockWorkerProvider_DescribeSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVolumes provides a mock function with given fields: ctx, instances
func (_m *mockWorkerProvider) DescribeVolumes(ctx context.Context, instances []*ec2.Ec2Instance) ([]*ec2.Volume, error) {
	ret := _m.Called(ctx, instances)

	var r0 []*ec2.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*ec2.Ec2Instance) ([]*ec2.Volume, error)); ok {
		return rf(ctx, instances)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*ec2.Ec2Instance) []*ec2.Volume); ok {
		r0 = rf(ctx, instances)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*ec2.Ec2Instance) error); ok {
		r1 = rf(ctx, instances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWorkerProvider_DescribeVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVolumes'
type mockWorkerProvider_DescribeVolumes_Call struct {
	*mock.Call
}

// DescribeVolumes is a helper method to define mock.On call
//   - ctx context.Context
//   - instances []*ec2.Ec2Instance
func (_e *mockWorkerProvider_Expecter) DescribeVolumes(ctx interface{}, instances interface{}) *mockWorkerProvider_DescribeVolumes_Call {
	return &mockWorkerProvider_DescribeVolumes_Call{Call: _e.mock.On("DescribeVolumes", ctx, instances)}
}

func (_c *mockWorkerProvider_DescribeVolumes_Call) Run(run func(ctx context.Context, instances []*ec2.Ec2Instance)) *mockWorkerProvider_DescribeVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*ec2.Ec2Instance))
	})
	return _c
}

func (_c *mockWorkerProvider_DescribeVolumes_Call) Return(_a0 []*ec2.Volume, _a1 error) *mockWorkerProvider_DescribeVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWorkerProvider_DescribeVolumes_Call) RunAndReturn(run func(context.Context, []*ec2.Ec2Instance) ([]*ec2.Volume, error)) *mockWorkerProvider_DescribeVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// newMockWorkerProvider creates a new instance of mockWorkerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWorkerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWorkerProvider {
	mock := &mockWorkerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
