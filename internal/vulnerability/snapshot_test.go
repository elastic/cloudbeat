// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"errors"
	"fmt"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awsec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"go.uber.org/goleak"

	"github.com/elastic/cloudbeat/internal/resources/providers/awslib/ec2"
	"github.com/elastic/cloudbeat/internal/resources/utils/testhelper"
)

func Test_SnapshotManager(t *testing.T) {
	ctx := t.Context()
	defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

	provider := newMockSnapshotCreatorDeleter(t)
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(1), nil).Times(1)
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(2, 3), nil).Times(1)
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(4), nil).Times(1)
	provider.EXPECT().DeleteSnapshot(mock.Anything, mock.Anything).Return(nil).Times(4)

	manager := NewSnapshotManager(testhelper.NewLogger(t), provider)

	snaps, err := manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(1), snaps)
	assert.Len(t, manager.snapshots, 1)
	assert.Contains(t, manager.snapshots, "snapshot-1")

	snaps, err = manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(2, 3), snaps)
	assert.Len(t, manager.snapshots, 3)
	assert.Contains(t, manager.snapshots, "snapshot-1")
	assert.Contains(t, manager.snapshots, "snapshot-2")
	assert.Contains(t, manager.snapshots, "snapshot-3")

	manager.DeleteSnapshot(ctx, snaps[0])
	assert.Len(t, manager.snapshots, 2)
	assert.Equal(t, "snapshot-1", manager.snapshots["snapshot-1"].SnapshotId)
	assert.Contains(t, manager.snapshots, "snapshot-1")
	assert.Contains(t, manager.snapshots, "snapshot-3")

	snaps, err = manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(4), snaps)
	assert.Len(t, manager.snapshots, 3)
	assert.Contains(t, manager.snapshots, "snapshot-1")
	assert.Contains(t, manager.snapshots, "snapshot-3")
	assert.Contains(t, manager.snapshots, "snapshot-4")

	manager.Cleanup(ctx)
	assert.Empty(t, manager.snapshots)

	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(5), nil).Times(1)
	provider.EXPECT().DeleteSnapshot(mock.Anything, mock.Anything).Return(errors.New("some error")).Times(1)
	_, err = manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	manager.Cleanup(ctx)
	assert.Empty(t, manager.snapshots)
}

func generateSnapshots(ids ...int) []ec2.EBSSnapshot {
	snapshots := make([]ec2.EBSSnapshot, len(ids))
	for i, id := range ids {
		snapshots[i] = ec2.EBSSnapshot{
			Instance: ec2.Ec2Instance{
				Instance: types.Instance{InstanceId: aws.String(fmt.Sprintf("instance-%d", id))},
			},
			SnapshotId: fmt.Sprintf("snapshot-%d", id),
			Region:     "region",
		}
	}
	return snapshots
}

func Test_runWithGrace(t *testing.T) {
	testhelper.SkipLong(t)

	const grace = time.Second
	tests := []struct {
		name string
		ctx  func() context.Context
		f    func(ctx context.Context, t *testing.T)
	}{
		{
			name: "background context",
			ctx:  t.Context,
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
			},
		},
		{
			name: "already canceled context",
			ctx: func() context.Context {
				ctx, cancel := context.WithCancel(t.Context())
				defer cancel()
				return ctx
			},
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
			},
		},
		{
			name: "grace period ends",
			ctx: func() context.Context {
				ctx, cancel := context.WithCancel(t.Context())
				defer cancel()
				return ctx
			},
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
				time.Sleep(2 * grace)
				require.Error(t, ctx.Err())
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

			ctx := tt.ctx()
			called := 0
			runWithGrace(ctx, grace, func(ctx context.Context) {
				called++
				tt.f(ctx, t)
			})
			assert.Equal(t, 1, called)
		})
	}
}

func TestSnapshotManager_DeleteOldSnapshots(t *testing.T) {
	tests := []struct {
		name               string
		snapshots          []types.Snapshot
		describeErr        error
		expectedDeletedIDs []string
	}{
		{
			name: "nothing happens",
		},
		{
			name: "only old snapshots with tags are deleted",
			snapshots: []types.Snapshot{
				mockSnapshot("snapshot-1", 1*time.Hour, "Name", "elastic-vulnerability-1"),      // too new
				mockSnapshot("snapshot-2", 49*time.Hour),                                        // doesn't have tag
				mockSnapshot("snapshot-3", 49*time.Hour, "Name", "some-vulnerability-3"),        // doesn't match tag value
				mockSnapshot("snapshot-4", 49*time.Hour, "Name", "elastic-vulnerability-4"),     // matches
				mockSnapshot("snapshot-5", 100*time.Hour, "Name", "elastic-vulnerability-5"),    // matches
				mockSnapshot("snapshot-6", 100*time.Hour, "SomeKey", "elastic-vulnerability-5"), // doesn't match tag key
			},
			expectedDeletedIDs: []string{"snapshot-4", "snapshot-5"},
		},
		{
			name:        "error describing",
			describeErr: errors.New("some error"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer goleak.VerifyNone(t, goleak.IgnoreCurrent())
			ctx := t.Context()
			log := testhelper.NewLogger(t)

			ec2p := ec2.NewMockClient(t)
			ec2p.EXPECT().DescribeSnapshots(mock.Anything, mock.Anything, mock.Anything).Return(&awsec2.DescribeSnapshotsOutput{
				NextToken: nil,
				Snapshots: tt.snapshots,
			}, tt.describeErr).Times(1)
			for _, deletedSnapshotID := range tt.expectedDeletedIDs {
				ec2p.EXPECT().DeleteSnapshot(mock.Anything, mock.MatchedBy(func(input *awsec2.DeleteSnapshotInput) bool {
					return aws.ToString(input.SnapshotId) == deletedSnapshotID
				}), mock.Anything).Return(nil, nil).Times(1)
			}

			p := ec2.NewProviderFromClients(log, "account-id", map[string]ec2.Client{"region": ec2p})

			s := NewSnapshotManager(log, p)
			s.DeleteOldSnapshots(ctx)
		})
	}

	t.Run("test context done", func(t *testing.T) {
		defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

		ctx, cancel := context.WithCancel(t.Context())
		m := newMockSnapshotCreatorDeleter(t)
		m.EXPECT().IterOwnedSnapshots(mock.Anything, mock.Anything).Return(func(yield func(ec2.EBSSnapshot) bool) {
			<-ctx.Done()
			assert.False(t, yield(ec2.EBSSnapshot{}))
		}).Times(1)

		s := NewSnapshotManager(testhelper.NewLogger(t), m)
		cancel()
		s.DeleteOldSnapshots(ctx)
	})
}

func mockSnapshot(id string, before time.Duration, tagKeyAndValues ...string) types.Snapshot {
	if len(tagKeyAndValues)%2 != 0 {
		panic("tags must be key-value pairs")
	}
	lenTags := len(tagKeyAndValues) / 2
	tags := make([]types.Tag, lenTags)
	for i := range lenTags {
		tags[i] = types.Tag{
			Key:   aws.String(tagKeyAndValues[i*2]),
			Value: aws.String(tagKeyAndValues[i*2+1]),
		}
	}
	return types.Snapshot{
		SnapshotId: &id,
		StartTime:  aws.Time(time.Now().Add(-before)),
		Tags:       tags,
	}
}
