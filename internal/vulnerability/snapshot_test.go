// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"go.uber.org/goleak"

	"github.com/elastic/cloudbeat/internal/resources/providers/awslib/ec2"
	"github.com/elastic/cloudbeat/internal/resources/utils/testhelper"
)

func Test_SnapshotManager(t *testing.T) {
	ctx := context.Background()
	log := testhelper.NewLogger(t)
	defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

	provider := &mockSnapshotCreatorDeleter{}
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(1), nil).Times(1)
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(2), nil).Times(1)
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(generateSnapshots(3), nil).Times(1)
	provider.EXPECT().DeleteSnapshot(mock.Anything, mock.Anything).Return(nil).Times(3)
	defer provider.AssertExpectations(t)

	manager := NewSnapshotManager(log, provider)

	snaps, err := manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(1), snaps)
	assert.Len(t, manager.snapshots, 1)

	snaps, err = manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(2), snaps)
	assert.Len(t, manager.snapshots, 2)

	manager.DeleteSnapshot(ctx, snaps[0])
	assert.Len(t, manager.snapshots, 1)
	assert.Equal(t, "snapshot-1", manager.snapshots["snapshot-1"].SnapshotId)

	snaps, err = manager.CreateSnapshots(ctx, &ec2.Ec2Instance{})
	require.NoError(t, err)
	assert.Equal(t, generateSnapshots(3), snaps)
	assert.Len(t, manager.snapshots, 2)

	manager.Cleanup(ctx)
}

func generateSnapshots(id int) []ec2.EBSSnapshot {
	return []ec2.EBSSnapshot{
		{
			Instance: ec2.Ec2Instance{
				Instance: types.Instance{InstanceId: aws.String(fmt.Sprintf("instance-%d", id))},
			},
			SnapshotId: fmt.Sprintf("snapshot-%d", id),
			Region:     "region",
		},
	}
}

func Test_runWithGrace(t *testing.T) {
	testhelper.SkipLong(t)

	const grace = time.Second
	tests := []struct {
		name string
		ctx  func() context.Context
		f    func(ctx context.Context, t *testing.T)
	}{
		{
			name: "background context",
			ctx:  context.Background,
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
			},
		},
		{
			name: "already canceled context",
			ctx: func() context.Context {
				ctx, cancel := context.WithCancel(context.Background())
				defer cancel()
				return ctx
			},
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
			},
		},
		{
			name: "grace period ends",
			ctx: func() context.Context {
				ctx, cancel := context.WithCancel(context.Background())
				defer cancel()
				return ctx
			},
			f: func(ctx context.Context, t *testing.T) {
				require.NoError(t, ctx.Err())
				time.Sleep(2 * grace)
				require.Error(t, ctx.Err())
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

			ctx := tt.ctx()
			called := 0
			runWithGrace(ctx, grace, func(ctx context.Context) {
				called++
				tt.f(ctx, t)
			})
			assert.Equal(t, 1, called)
		})
	}
}
