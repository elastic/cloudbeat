// Code generated by mockery v2.37.1. DO NOT EDIT.

package azurefetcher

import (
	context "context"

	inventory "github.com/elastic/cloudbeat/internal/resources/providers/azurelib/inventory"
	mock "github.com/stretchr/testify/mock"
)

// mockStorageProviderFunc is an autogenerated mock type for the storageProviderFunc type
type mockStorageProviderFunc struct {
	mock.Mock
}

type mockStorageProviderFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStorageProviderFunc) EXPECT() *mockStorageProviderFunc_Expecter {
	return &mockStorageProviderFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *mockStorageProviderFunc) Execute(_a0 context.Context, _a1 []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []inventory.AzureAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockStorageProviderFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockStorageProviderFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []inventory.AzureAsset
func (_e *mockStorageProviderFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *mockStorageProviderFunc_Execute_Call {
	return &mockStorageProviderFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *mockStorageProviderFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 []inventory.AzureAsset)) *mockStorageProviderFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]inventory.AzureAsset))
	})
	return _c
}

func (_c *mockStorageProviderFunc_Execute_Call) Return(_a0 []inventory.AzureAsset, _a1 error) *mockStorageProviderFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockStorageProviderFunc_Execute_Call) RunAndReturn(run func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProviderFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockStorageProviderFunc creates a new instance of mockStorageProviderFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStorageProviderFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorageProviderFunc {
	mock := &mockStorageProviderFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
