// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package azurefetcher

import (
	"context"

	"github.com/elastic/cloudbeat/internal/resources/providers/azurelib/inventory"
	mock "github.com/stretchr/testify/mock"
)

// newMockStorageProvider creates a new instance of mockStorageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStorageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorageProvider {
	mock := &mockStorageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockStorageProvider is an autogenerated mock type for the storageProvider type
type mockStorageProvider struct {
	mock.Mock
}

type mockStorageProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStorageProvider) EXPECT() *mockStorageProvider_Expecter {
	return &mockStorageProvider_Expecter{mock: &_m.Mock}
}

// ListStorageAccountBlobContainers provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountBlobContainers(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountBlobContainers")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountBlobContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountBlobContainers'
type mockStorageProvider_ListStorageAccountBlobContainers_Call struct {
	*mock.Call
}

// ListStorageAccountBlobContainers is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountBlobContainers(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountBlobContainers_Call {
	return &mockStorageProvider_ListStorageAccountBlobContainers_Call{Call: _e.mock.On("ListStorageAccountBlobContainers", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountBlobContainers_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountBlobContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountBlobContainers_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountBlobContainers_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountBlobContainers_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountBlobContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountBlobServices provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountBlobServices(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountBlobServices")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountBlobServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountBlobServices'
type mockStorageProvider_ListStorageAccountBlobServices_Call struct {
	*mock.Call
}

// ListStorageAccountBlobServices is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountBlobServices(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountBlobServices_Call {
	return &mockStorageProvider_ListStorageAccountBlobServices_Call{Call: _e.mock.On("ListStorageAccountBlobServices", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountBlobServices_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountBlobServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountBlobServices_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountBlobServices_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountBlobServices_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountBlobServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountFileServices provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountFileServices(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountFileServices")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountFileServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountFileServices'
type mockStorageProvider_ListStorageAccountFileServices_Call struct {
	*mock.Call
}

// ListStorageAccountFileServices is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountFileServices(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountFileServices_Call {
	return &mockStorageProvider_ListStorageAccountFileServices_Call{Call: _e.mock.On("ListStorageAccountFileServices", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountFileServices_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountFileServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountFileServices_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountFileServices_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountFileServices_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountFileServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountFileShares provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountFileShares(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountFileShares")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountFileShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountFileShares'
type mockStorageProvider_ListStorageAccountFileShares_Call struct {
	*mock.Call
}

// ListStorageAccountFileShares is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountFileShares(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountFileShares_Call {
	return &mockStorageProvider_ListStorageAccountFileShares_Call{Call: _e.mock.On("ListStorageAccountFileShares", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountFileShares_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountFileShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountFileShares_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountFileShares_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountFileShares_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountFileShares_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountQueueServices provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountQueueServices(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountQueueServices")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountQueueServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountQueueServices'
type mockStorageProvider_ListStorageAccountQueueServices_Call struct {
	*mock.Call
}

// ListStorageAccountQueueServices is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountQueueServices(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountQueueServices_Call {
	return &mockStorageProvider_ListStorageAccountQueueServices_Call{Call: _e.mock.On("ListStorageAccountQueueServices", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountQueueServices_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountQueueServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountQueueServices_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountQueueServices_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountQueueServices_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountQueueServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountQueues provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountQueues(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountQueues")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountQueues'
type mockStorageProvider_ListStorageAccountQueues_Call struct {
	*mock.Call
}

// ListStorageAccountQueues is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountQueues(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountQueues_Call {
	return &mockStorageProvider_ListStorageAccountQueues_Call{Call: _e.mock.On("ListStorageAccountQueues", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountQueues_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountQueues_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountQueues_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountQueues_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountQueues_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountTableServices provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountTableServices(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountTableServices")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountTableServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountTableServices'
type mockStorageProvider_ListStorageAccountTableServices_Call struct {
	*mock.Call
}

// ListStorageAccountTableServices is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountTableServices(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountTableServices_Call {
	return &mockStorageProvider_ListStorageAccountTableServices_Call{Call: _e.mock.On("ListStorageAccountTableServices", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountTableServices_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountTableServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountTableServices_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountTableServices_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountTableServices_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountTableServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccountTables provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccountTables(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccounts)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccountTables")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccounts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []inventory.AzureAsset) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []inventory.AzureAsset) error); ok {
		r1 = returnFunc(ctx, storageAccounts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccountTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccountTables'
type mockStorageProvider_ListStorageAccountTables_Call struct {
	*mock.Call
}

// ListStorageAccountTables is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccounts []inventory.AzureAsset
func (_e *mockStorageProvider_Expecter) ListStorageAccountTables(ctx interface{}, storageAccounts interface{}) *mockStorageProvider_ListStorageAccountTables_Call {
	return &mockStorageProvider_ListStorageAccountTables_Call{Call: _e.mock.On("ListStorageAccountTables", ctx, storageAccounts)}
}

func (_c *mockStorageProvider_ListStorageAccountTables_Call) Run(run func(ctx context.Context, storageAccounts []inventory.AzureAsset)) *mockStorageProvider_ListStorageAccountTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []inventory.AzureAsset
		if args[1] != nil {
			arg1 = args[1].([]inventory.AzureAsset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountTables_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccountTables_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccountTables_Call) RunAndReturn(run func(ctx context.Context, storageAccounts []inventory.AzureAsset) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccountTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListStorageAccounts provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListStorageAccounts(ctx context.Context, storageAccountsSubscriptionsIds []string) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx, storageAccountsSubscriptionsIds)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageAccounts")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx, storageAccountsSubscriptionsIds)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx, storageAccountsSubscriptionsIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, storageAccountsSubscriptionsIds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListStorageAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStorageAccounts'
type mockStorageProvider_ListStorageAccounts_Call struct {
	*mock.Call
}

// ListStorageAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - storageAccountsSubscriptionsIds []string
func (_e *mockStorageProvider_Expecter) ListStorageAccounts(ctx interface{}, storageAccountsSubscriptionsIds interface{}) *mockStorageProvider_ListStorageAccounts_Call {
	return &mockStorageProvider_ListStorageAccounts_Call{Call: _e.mock.On("ListStorageAccounts", ctx, storageAccountsSubscriptionsIds)}
}

func (_c *mockStorageProvider_ListStorageAccounts_Call) Run(run func(ctx context.Context, storageAccountsSubscriptionsIds []string)) *mockStorageProvider_ListStorageAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListStorageAccounts_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListStorageAccounts_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListStorageAccounts_Call) RunAndReturn(run func(ctx context.Context, storageAccountsSubscriptionsIds []string) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListStorageAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptions provides a mock function for the type mockStorageProvider
func (_mock *mockStorageProvider) ListSubscriptions(ctx context.Context) ([]inventory.AzureAsset, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []inventory.AzureAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]inventory.AzureAsset, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []inventory.AzureAsset); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.AzureAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockStorageProvider_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type mockStorageProvider_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockStorageProvider_Expecter) ListSubscriptions(ctx interface{}) *mockStorageProvider_ListSubscriptions_Call {
	return &mockStorageProvider_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions", ctx)}
}

func (_c *mockStorageProvider_ListSubscriptions_Call) Run(run func(ctx context.Context)) *mockStorageProvider_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockStorageProvider_ListSubscriptions_Call) Return(azureAssets []inventory.AzureAsset, err error) *mockStorageProvider_ListSubscriptions_Call {
	_c.Call.Return(azureAssets, err)
	return _c
}

func (_c *mockStorageProvider_ListSubscriptions_Call) RunAndReturn(run func(ctx context.Context) ([]inventory.AzureAsset, error)) *mockStorageProvider_ListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}
