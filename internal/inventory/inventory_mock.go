// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//go:build !release

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package inventory

import (
	"context"

	"github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAssetFetcher creates a new instance of MockAssetFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetFetcher {
	mock := &MockAssetFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssetFetcher is an autogenerated mock type for the AssetFetcher type
type MockAssetFetcher struct {
	mock.Mock
}

type MockAssetFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetFetcher) EXPECT() *MockAssetFetcher_Expecter {
	return &MockAssetFetcher_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockAssetFetcher
func (_mock *MockAssetFetcher) Fetch(ctx context.Context, assetChannel chan<- AssetEvent) {
	_mock.Called(ctx, assetChannel)
	return
}

// MockAssetFetcher_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockAssetFetcher_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - assetChannel chan<- AssetEvent
func (_e *MockAssetFetcher_Expecter) Fetch(ctx interface{}, assetChannel interface{}) *MockAssetFetcher_Fetch_Call {
	return &MockAssetFetcher_Fetch_Call{Call: _e.mock.On("Fetch", ctx, assetChannel)}
}

func (_c *MockAssetFetcher_Fetch_Call) Run(run func(ctx context.Context, assetChannel chan<- AssetEvent)) *MockAssetFetcher_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan<- AssetEvent
		if args[1] != nil {
			arg1 = args[1].(chan<- AssetEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAssetFetcher_Fetch_Call) Return() *MockAssetFetcher_Fetch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssetFetcher_Fetch_Call) RunAndReturn(run func(ctx context.Context, assetChannel chan<- AssetEvent)) *MockAssetFetcher_Fetch_Call {
	_c.Run(run)
	return _c
}

// NewMockAssetPublisher creates a new instance of MockAssetPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetPublisher {
	mock := &MockAssetPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssetPublisher is an autogenerated mock type for the AssetPublisher type
type MockAssetPublisher struct {
	mock.Mock
}

type MockAssetPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetPublisher) EXPECT() *MockAssetPublisher_Expecter {
	return &MockAssetPublisher_Expecter{mock: &_m.Mock}
}

// PublishAll provides a mock function for the type MockAssetPublisher
func (_mock *MockAssetPublisher) PublishAll(events []beat.Event) {
	_mock.Called(events)
	return
}

// MockAssetPublisher_PublishAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAll'
type MockAssetPublisher_PublishAll_Call struct {
	*mock.Call
}

// PublishAll is a helper method to define mock.On call
//   - events []beat.Event
func (_e *MockAssetPublisher_Expecter) PublishAll(events interface{}) *MockAssetPublisher_PublishAll_Call {
	return &MockAssetPublisher_PublishAll_Call{Call: _e.mock.On("PublishAll", events)}
}

func (_c *MockAssetPublisher_PublishAll_Call) Run(run func(events []beat.Event)) *MockAssetPublisher_PublishAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []beat.Event
		if args[0] != nil {
			arg0 = args[0].([]beat.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAssetPublisher_PublishAll_Call) Return() *MockAssetPublisher_PublishAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssetPublisher_PublishAll_Call) RunAndReturn(run func(events []beat.Event)) *MockAssetPublisher_PublishAll_Call {
	_c.Run(run)
	return _c
}
