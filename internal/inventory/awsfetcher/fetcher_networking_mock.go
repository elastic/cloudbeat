// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package awsfetcher

import (
	"context"

	"github.com/elastic/cloudbeat/internal/resources/providers/awslib"
	mock "github.com/stretchr/testify/mock"
)

// newMockNetworkingProvider creates a new instance of mockNetworkingProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockNetworkingProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockNetworkingProvider {
	mock := &mockNetworkingProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockNetworkingProvider is an autogenerated mock type for the networkingProvider type
type mockNetworkingProvider struct {
	mock.Mock
}

type mockNetworkingProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockNetworkingProvider) EXPECT() *mockNetworkingProvider_Expecter {
	return &mockNetworkingProvider_Expecter{mock: &_m.Mock}
}

// DescribeInternetGateways provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeInternetGateways(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInternetGateways")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeInternetGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInternetGateways'
type mockNetworkingProvider_DescribeInternetGateways_Call struct {
	*mock.Call
}

// DescribeInternetGateways is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeInternetGateways(context1 interface{}) *mockNetworkingProvider_DescribeInternetGateways_Call {
	return &mockNetworkingProvider_DescribeInternetGateways_Call{Call: _e.mock.On("DescribeInternetGateways", context1)}
}

func (_c *mockNetworkingProvider_DescribeInternetGateways_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeInternetGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeInternetGateways_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeInternetGateways_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeInternetGateways_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeInternetGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNatGateways provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeNatGateways(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNatGateways")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeNatGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNatGateways'
type mockNetworkingProvider_DescribeNatGateways_Call struct {
	*mock.Call
}

// DescribeNatGateways is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeNatGateways(context1 interface{}) *mockNetworkingProvider_DescribeNatGateways_Call {
	return &mockNetworkingProvider_DescribeNatGateways_Call{Call: _e.mock.On("DescribeNatGateways", context1)}
}

func (_c *mockNetworkingProvider_DescribeNatGateways_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeNatGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeNatGateways_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeNatGateways_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeNatGateways_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeNatGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNetworkAcl provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeNetworkAcl(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkAcl")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeNetworkAcl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNetworkAcl'
type mockNetworkingProvider_DescribeNetworkAcl_Call struct {
	*mock.Call
}

// DescribeNetworkAcl is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeNetworkAcl(context1 interface{}) *mockNetworkingProvider_DescribeNetworkAcl_Call {
	return &mockNetworkingProvider_DescribeNetworkAcl_Call{Call: _e.mock.On("DescribeNetworkAcl", context1)}
}

func (_c *mockNetworkingProvider_DescribeNetworkAcl_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeNetworkAcl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeNetworkAcl_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeNetworkAcl_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeNetworkAcl_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeNetworkAcl_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNetworkInterfaces provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeNetworkInterfaces(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkInterfaces")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeNetworkInterfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNetworkInterfaces'
type mockNetworkingProvider_DescribeNetworkInterfaces_Call struct {
	*mock.Call
}

// DescribeNetworkInterfaces is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeNetworkInterfaces(context1 interface{}) *mockNetworkingProvider_DescribeNetworkInterfaces_Call {
	return &mockNetworkingProvider_DescribeNetworkInterfaces_Call{Call: _e.mock.On("DescribeNetworkInterfaces", context1)}
}

func (_c *mockNetworkingProvider_DescribeNetworkInterfaces_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeNetworkInterfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeNetworkInterfaces_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeNetworkInterfaces_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeNetworkInterfaces_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeNetworkInterfaces_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSecurityGroups provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeSecurityGroups(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSecurityGroups")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSecurityGroups'
type mockNetworkingProvider_DescribeSecurityGroups_Call struct {
	*mock.Call
}

// DescribeSecurityGroups is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeSecurityGroups(context1 interface{}) *mockNetworkingProvider_DescribeSecurityGroups_Call {
	return &mockNetworkingProvider_DescribeSecurityGroups_Call{Call: _e.mock.On("DescribeSecurityGroups", context1)}
}

func (_c *mockNetworkingProvider_DescribeSecurityGroups_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeSecurityGroups_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeSecurityGroups_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeSecurityGroups_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubnets provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeSubnets(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSubnets")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubnets'
type mockNetworkingProvider_DescribeSubnets_Call struct {
	*mock.Call
}

// DescribeSubnets is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeSubnets(context1 interface{}) *mockNetworkingProvider_DescribeSubnets_Call {
	return &mockNetworkingProvider_DescribeSubnets_Call{Call: _e.mock.On("DescribeSubnets", context1)}
}

func (_c *mockNetworkingProvider_DescribeSubnets_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeSubnets_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeSubnets_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeSubnets_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTransitGatewayAttachments provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeTransitGatewayAttachments(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTransitGatewayAttachments")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeTransitGatewayAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTransitGatewayAttachments'
type mockNetworkingProvider_DescribeTransitGatewayAttachments_Call struct {
	*mock.Call
}

// DescribeTransitGatewayAttachments is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeTransitGatewayAttachments(context1 interface{}) *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call {
	return &mockNetworkingProvider_DescribeTransitGatewayAttachments_Call{Call: _e.mock.On("DescribeTransitGatewayAttachments", context1)}
}

func (_c *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeTransitGatewayAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTransitGateways provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeTransitGateways(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTransitGateways")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeTransitGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTransitGateways'
type mockNetworkingProvider_DescribeTransitGateways_Call struct {
	*mock.Call
}

// DescribeTransitGateways is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeTransitGateways(context1 interface{}) *mockNetworkingProvider_DescribeTransitGateways_Call {
	return &mockNetworkingProvider_DescribeTransitGateways_Call{Call: _e.mock.On("DescribeTransitGateways", context1)}
}

func (_c *mockNetworkingProvider_DescribeTransitGateways_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeTransitGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeTransitGateways_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeTransitGateways_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeTransitGateways_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeTransitGateways_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVpcPeeringConnections provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeVpcPeeringConnections(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcPeeringConnections")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeVpcPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVpcPeeringConnections'
type mockNetworkingProvider_DescribeVpcPeeringConnections_Call struct {
	*mock.Call
}

// DescribeVpcPeeringConnections is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeVpcPeeringConnections(context1 interface{}) *mockNetworkingProvider_DescribeVpcPeeringConnections_Call {
	return &mockNetworkingProvider_DescribeVpcPeeringConnections_Call{Call: _e.mock.On("DescribeVpcPeeringConnections", context1)}
}

func (_c *mockNetworkingProvider_DescribeVpcPeeringConnections_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeVpcPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeVpcPeeringConnections_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeVpcPeeringConnections_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeVpcPeeringConnections_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeVpcPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVpcs provides a mock function for the type mockNetworkingProvider
func (_mock *mockNetworkingProvider) DescribeVpcs(context1 context.Context) ([]awslib.AwsResource, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcs")
	}

	var r0 []awslib.AwsResource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]awslib.AwsResource, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []awslib.AwsResource); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]awslib.AwsResource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNetworkingProvider_DescribeVpcs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVpcs'
type mockNetworkingProvider_DescribeVpcs_Call struct {
	*mock.Call
}

// DescribeVpcs is a helper method to define mock.On call
//   - context1 context.Context
func (_e *mockNetworkingProvider_Expecter) DescribeVpcs(context1 interface{}) *mockNetworkingProvider_DescribeVpcs_Call {
	return &mockNetworkingProvider_DescribeVpcs_Call{Call: _e.mock.On("DescribeVpcs", context1)}
}

func (_c *mockNetworkingProvider_DescribeVpcs_Call) Run(run func(context1 context.Context)) *mockNetworkingProvider_DescribeVpcs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockNetworkingProvider_DescribeVpcs_Call) Return(awsResources []awslib.AwsResource, err error) *mockNetworkingProvider_DescribeVpcs_Call {
	_c.Call.Return(awsResources, err)
	return _c
}

func (_c *mockNetworkingProvider_DescribeVpcs_Call) RunAndReturn(run func(context1 context.Context) ([]awslib.AwsResource, error)) *mockNetworkingProvider_DescribeVpcs_Call {
	_c.Call.Return(run)
	return _c
}
