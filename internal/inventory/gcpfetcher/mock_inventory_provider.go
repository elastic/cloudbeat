// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package gcpfetcher

import (
	context "context"

	inventory "github.com/elastic/cloudbeat/internal/resources/providers/gcplib/inventory"
	mock "github.com/stretchr/testify/mock"
)

// mockInventoryProvider is an autogenerated mock type for the inventoryProvider type
type mockInventoryProvider struct {
	mock.Mock
}

type mockInventoryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInventoryProvider) EXPECT() *mockInventoryProvider_Expecter {
	return &mockInventoryProvider_Expecter{mock: &_m.Mock}
}

// ListAssetTypes provides a mock function with given fields: ctx, assets, assetsCh
func (_m *mockInventoryProvider) ListAssetTypes(ctx context.Context, assets []string, assetsCh chan<- *inventory.ExtendedGcpAsset) {
	_m.Called(ctx, assets, assetsCh)
}

// mockInventoryProvider_ListAssetTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAssetTypes'
type mockInventoryProvider_ListAssetTypes_Call struct {
	*mock.Call
}

// ListAssetTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - assets []string
//   - assetsCh chan<- *inventory.ExtendedGcpAsset
func (_e *mockInventoryProvider_Expecter) ListAssetTypes(ctx interface{}, assets interface{}, assetsCh interface{}) *mockInventoryProvider_ListAssetTypes_Call {
	return &mockInventoryProvider_ListAssetTypes_Call{Call: _e.mock.On("ListAssetTypes", ctx, assets, assetsCh)}
}

func (_c *mockInventoryProvider_ListAssetTypes_Call) Run(run func(ctx context.Context, assets []string, assetsCh chan<- *inventory.ExtendedGcpAsset)) *mockInventoryProvider_ListAssetTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(chan<- *inventory.ExtendedGcpAsset))
	})
	return _c
}

func (_c *mockInventoryProvider_ListAssetTypes_Call) Return() *mockInventoryProvider_ListAssetTypes_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockInventoryProvider_ListAssetTypes_Call) RunAndReturn(run func(context.Context, []string, chan<- *inventory.ExtendedGcpAsset)) *mockInventoryProvider_ListAssetTypes_Call {
	_c.Run(run)
	return _c
}

// newMockInventoryProvider creates a new instance of mockInventoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockInventoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockInventoryProvider {
	mock := &mockInventoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
