{{- if .Values.cloudbeat.deploy -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cloudbeat
  namespace: kube-system
  labels:
    catf: related
    k8s-app: cloudbeat
spec:
  selector:
    matchLabels:
      k8s-app: cloudbeat
      catf: related
  template:
    metadata:
      labels:
        k8s-app: cloudbeat
        catf: related
    spec:
      serviceAccountName: cloudbeat
      terminationGracePeriodSeconds: 30
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: cloudbeat
          image: cloudbeat:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ES_HOST
              value: "elasticsearch-master.kube-system:9200"
            - name: ES_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.serviceAccount.name}}-configmap
                  key: ES_USER
            - name: ES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.serviceAccount.name}}-configmap
                  key: ES_PASSWORD
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              value: cloudbeat-leader
              fieldRef:
              fieldPath: metadata.name
          securityContext:
            runAsUser: 0
            # If using Red Hat OpenShift uncomment this:
            #privileged: true
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: config
              mountPath: /cloudbeat.yml
              readOnly: true
              subPath: cloudbeat.yml
            - name: proc
              mountPath: /hostfs/proc
              readOnly: true
            - name: etc-kubernetes
              mountPath: /hostfs/etc/kubernetes
            - name: var-lib
              mountPath: /hostfs/var/lib
              readOnly: true
            - name: cgroup
              mountPath: /hostfs/sys/fs/cgroup
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: passwd
              mountPath: /hostfs/etc/passwd
              readOnly: true
            - name: group
              mountPath: /hostfs/etc/group
              readOnly: true
            - name: etcsysmd
              mountPath: /hostfs/etc/systemd
              readOnly: true
      initContainers:
      - name: init-es
        image: yauritux/busybox-curl:latest
        command: ['sh', '-c', "until curl -X GET \"http://elasticsearch-master.kube-system:9200/_cat/indices/*?v=true&s=index&pretty\"; do echo waiting for ES; sleep 2; done"]
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: etc-kubernetes
          hostPath:
            path: /etc/kubernetes
        - name: var-lib
          hostPath:
            path: /var/lib
        - name: passwd
          hostPath:
            path: /etc/passwd
        - name: group
          hostPath:
            path: /etc/group
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: varlog
          hostPath:
            path: /var/log
        - name: etcsysmd
          hostPath:
            path: /etc/systemd
        - name: config
          configMap:
            defaultMode: 0640
            name: cloudbeat-daemonset-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudbeat-daemonset-config
  namespace: kube-system
  labels:
    k8s-app: cloudbeat
data:
  cloudbeat.yml: |-
    cloudbeat:
      config:
        v1:
          benchmark: cis_k8s
      type: cloudbeat/cis_k8s
      access_key_id: ${AWS_ACCESS_KEY_ID:no_access_key_was_set}
      secret_access_key: ${AWS_SECRET_ACCESS_KEY:no_secret_was_set}
      # Defines how often an event is sent to the output
      period: 30s
      fetchers:
        - name: kube-api
        - name: process
          directory: "/hostfs"
          processes:
            etcd:
            kube-apiserver:
            kube-controller:
            kube-scheduler:
            kubelet:
              config-file-arguments:
                - config
        - name: file-system
          patterns: [
            "/hostfs/etc/kubernetes/scheduler.conf",
            "/hostfs/etc/kubernetes/controller-manager.conf",
            "/hostfs/etc/kubernetes/admin.conf",
            "/hostfs/etc/kubernetes/kubelet.conf",
            "/hostfs/etc/kubernetes/manifests/etcd.yaml",
            "/hostfs/etc/kubernetes/manifests/kube-apiserver.yaml",
            "/hostfs/etc/kubernetes/manifests/kube-controller-manager.yaml",
            "/hostfs/etc/kubernetes/manifests/kube-scheduler.yaml",
            "/hostfs/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
            "/hostfs/etc/kubernetes/pki/**",
            "/hostfs/var/lib/kubelet/config.yaml",
            "/hostfs/var/lib/etcd",
            "/hostfs/etc/kubernetes/pki"
          ]

      #    # EKS Fetchers configuration
      #      - name: kube-api
      #      - name: process
      #        directory: "/hostfs"
      #        processes:
      #          kubelet:
      #            config-file-arguments:
      #              - config
      #      - name: aws-ecr
      #      - name: aws-elb
      #      - name: file-system
      #        patterns: [
      #          "/hostfs/etc/kubernetes/kubelet/kubelet-config.json",
      #          "/hostfs/var/lib/kubelet/kubeconfig",
      #        ]

    # =================================== Kibana ===================================
    setup.kibana:

      # Kibana Host
      host: "http://host.docker.internal:5601"
    # =============================== Elastic Cloud ================================

    # These settings simplify using Cloudbeat with the Elastic Cloud (https://cloud.elastic.co/).

    # The cloud.id setting overwrites the `output.elasticsearch.hosts` and
    # `setup.kibana.host` options.
    # You can find the `cloud.id` in the Elastic Cloud web UI.
    #cloud.id:

    # The cloud.auth setting overwrites the `output.elasticsearch.username` and
    # `output.elasticsearch.password` settings. The format is `<user>:<pass>`.
    #cloud.auth:

    # ---------------------------- Elasticsearch Output ----------------------------
    output.elasticsearch:
      # Array of hosts to connect to.
      hosts: ${ES_HOST}

      # Protocol - either `http` (default) or `https`.
      protocol: "http"

      # Authentication credentials - either API key or username/password.
      #api_key: "id:api_key"
      username: ${ES_USERNAME}
      password: ${ES_PASSWORD}

      # Enable to allow sending output to older ES versions
      allow_older_versions: true

    # ================================= Processors =================================
    processors:
      - add_host_metadata: ~
      - add_cloud_metadata: ~
      - add_docker_metadata: ~
      - add_cluster_id: ~

    # Sets log level. The default log level is info.
    # Available log levels are: error, warning, info, debug
    logging.level: debug

    # Enable debug output for selected components. To enable all selectors use ["*"]
    # Other available selectors are "beat", "publisher", "service"
    # Multiple selectors can be chained.
    #logging.selectors: ["publisher"]

    # Send all logging output to stderr. The default is false.
    #logging.to_stderr: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudbeat
  namespace: kube-system
  labels:
    k8s-app: cloudbeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloudbeat
  labels:
    k8s-app: cloudbeat
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - namespaces
      - events
      - pods
      - services
    verbs: ["get", "list", "watch"]
  # Enable this rule only if planing to use Kubernetes keystore
  #- apiGroups: [""]
  #  resources:
  #  - secrets
  #  verbs: ["get"]
  - apiGroups: ["extensions"]
    resources:
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources:
      - statefulsets
      - deployments
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources:
      - jobs
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - ""
    resources:
      - nodes/stats
    verbs:
      - get
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cloudbeat-role
  # should be the namespace where cloudbeat is running
  namespace: kube-system
  labels:
    k8s-app: cloudbeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cloudbeat-kubeadm-config
  namespace: kube-system
  labels:
    k8s-app: cloudbeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudbeat
subjects:
  - kind: ServiceAccount
    name: cloudbeat
    namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cloudbeat-role-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: cloudbeat
    namespace: kube-system
roleRef:
  kind: Role
  name: cloudbeat-role
  apiGroup: rbac.authorization.k8s.io
---
# GAP: https://github.com/elastic/cloudbeat/issues/162
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  name: elastic-agent-cluster-leader
  namespace: kube-system
spec:
  holderIdentity: cloudbeat-leader
  leaseDurationSeconds: 15
  renewTime: "1992-04-26T00:00:00.000000Z"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cloudbeat-kubeadm-config
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: cloudbeat
    namespace: kube-system
roleRef:
  kind: Role
  name: cloudbeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
{{- end }}
