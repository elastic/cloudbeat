// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"sync"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"go.uber.org/goleak"
)

func TestVulnerabilityFetcher_FetchInstances(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityFetcher_FetchInstances")
	provider := &mockInstancesProvider{}
	expectedInstances := []ec2.Ec2Instance{
		{Instance: types.Instance{InstanceId: aws.String("instance-1")}},
		{Instance: types.Instance{InstanceId: aws.String("instance-2")}},
	}
	provider.EXPECT().DescribeInstances(mock.Anything).Return(expectedInstances, nil)
	fetcher := NewVulnerabilityFetcher(log, provider)

	ctx := context.TODO()

	wg := sync.WaitGroup{}
	// Test successful fetch
	wg.Add(1)
	go func() {
		defer wg.Done()
		err := fetcher.FetchInstances(ctx)
		assert.NoError(t, err)
	}()

	ch := fetcher.GetChan()
	assert.NotNil(t, ch)

	receivedInstances := make([]ec2.Ec2Instance, 0, len(expectedInstances))
	for in := range ch {
		receivedInstances = append(receivedInstances, in)
	}
	_, ok := <-ch
	assert.False(t, ok)

	assert.ElementsMatch(t, expectedInstances, receivedInstances)
	wg.Wait()

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}

func TestVulnerabilityFetcher_FetchInstances_Cancel(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityFetcher_FetchInstances_Cancel")
	provider := &mockInstancesProvider{}
	expectedInstances := []ec2.Ec2Instance{
		{Instance: types.Instance{InstanceId: aws.String("instance-1")}},
		{Instance: types.Instance{InstanceId: aws.String("instance-2")}},
	}
	provider.EXPECT().DescribeInstances(mock.Anything).Return(expectedInstances, nil)
	fetcher := NewVulnerabilityFetcher(log, provider)

	ctx, cancel := context.WithCancel(context.Background())
	cancel() // Cancel the context immediately

	err := fetcher.FetchInstances(ctx)
	assert.NoError(t, err)

	ch := fetcher.GetChan()
	assert.NotNil(t, ch)

	_, ok := <-ch
	assert.False(t, ok)

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}

func TestVulnerabilityFetcher_FetchInstances_DelayCancel(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityFetcher_FetchInstances_Cancel")
	provider := &mockInstancesProvider{}
	expectedInstances := []ec2.Ec2Instance{
		{Instance: types.Instance{InstanceId: aws.String("instance-1")}},
		{Instance: types.Instance{InstanceId: aws.String("instance-2")}},
	}
	provider.EXPECT().DescribeInstances(mock.Anything).Return(expectedInstances, nil)
	fetcher := NewVulnerabilityFetcher(log, provider)

	ctx, cancel := context.WithCancel(context.Background())
	go func() {
		<-time.After(100 * time.Millisecond)
		cancel() // Cancel the context after 100ms
	}()

	err := fetcher.FetchInstances(ctx)
	assert.NoError(t, err)

	ch := fetcher.GetChan()
	assert.NotNil(t, ch)

	_, ok := <-ch
	assert.False(t, ok)

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}
