// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"fmt"
	"sync"

	"github.com/elastic/beats/v7/libbeat/beat"
	libbeat_aws "github.com/elastic/beats/v7/x-pack/libbeat/common/aws"
	"github.com/elastic/cloudbeat/config"
	"github.com/elastic/cloudbeat/resources/providers/awslib"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityWorker struct {
	log        *logp.Logger
	cfg        *config.Config
	provider   *ec2.Provider
	fetcher    VulnerabilityFetcher
	replicator VulnerabilityReplicator
	verifier   VulnerabilityVerifier
	evaluator  VulnerabilityScanner
	runner     VulnerabilityRunner
	wg         sync.WaitGroup
	region     string
}

func NewVulnerabilityWorker(log *logp.Logger, c *config.Config) (*VulnerabilityWorker, error) {
	log.Debug("VulnerabilityWorker: New")
	awsConfig, err := libbeat_aws.InitializeAWSConfig(c.CloudConfig.AwsCred)
	if err != nil {
		return nil, fmt.Errorf("VulnerabilityWorker: failed to initialize AWS credentials: %w", err)
	}

	provider := ec2.NewEC2Provider(log, "", awsConfig, &awslib.MultiRegionClientFactory[ec2.Client]{})

	fetcher := NewVulnerabilityFetcher(log, provider)
	replicator := NewVulnerabilityReplicator(log, provider)
	verifier := NewVulnerabilityVerifier(log, provider)
	runner, err := NewVulnerabilityRunner(log)
	if err != nil {
		return nil, fmt.Errorf("VulnerabilityWorker: could not get init NewVulnerabilityRunner: %w", err)
	}
	evaluator, err := NewVulnerabilityScanner(log, runner.GetRunner(), c)
	if err != nil {
		return nil, fmt.Errorf("VulnerabilityWorker: could not get init NewVulnerabilityScanner: %w", err)
	}

	return &VulnerabilityWorker{
		log:        log,
		cfg:        c,
		provider:   provider,
		fetcher:    fetcher,
		replicator: replicator,
		verifier:   verifier,
		evaluator:  evaluator,
		runner:     runner,
		wg:         sync.WaitGroup{},
		region:     awsConfig.Region,
	}, nil
}

func (f *VulnerabilityWorker) Run(ctx context.Context) {
	// TODO: Handle deletion of snapshots
	f.log.Info("Starting VulnerabilityWorker.work")
	for {
		select {
		case <-ctx.Done():
			f.log.Info("VulnerabilityWorker.work context canceled")
			return
		default:
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				err := f.fetcher.FetchInstances(ctx, f.region)
				if err != nil {
					f.log.Error("VulnerabilityWorker.work FetchInstances failed: %v", err)
					return
				}
				f.log.Info("VulnerabilityWorker.work FetchInstances finished")
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.replicator.SnapshotInstance(ctx, f.fetcher.GetChan(), f.region)
				f.log.Info("VulnerabilityWorker.work SnapshotInstance finished")
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.verifier.VerifySnapshot(ctx, f.replicator.GetChan(), f.region)
				f.log.Info("VulnerabilityWorker.work VerifySnapshot finished")
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.evaluator.ScanSnapshot(ctx, f.verifier.GetChan())
				f.log.Info("VulnerabilityWorker.work ScanSnapshot finished")
			}()
			f.log.Info("VulnerabilityWorker.work waiting on workers")
			f.wg.Wait()
			f.log.Info("VulnerabilityWorker.work finished waiting on workers")
			return
		}
	}
}

func (f *VulnerabilityWorker) GetChan() chan beat.Event {
	return f.evaluator.GetChan()
}
