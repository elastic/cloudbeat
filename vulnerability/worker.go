// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"fmt"
	"sync"

	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/elastic/cloudbeat/config"
	"github.com/elastic/cloudbeat/resources/providers/awslib"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityWorker struct {
	log           *logp.Logger
	cfg           *config.Config
	provider      *ec2.Provider
	cloudIdentity *awslib.Identity
	fetcher       VulnerabilityFetcher
	replicator    VulnerabilityReplicator
	verifier      VulnerabilityVerifier
	evaluator     VulnerabilityEvaluator
	wg            sync.WaitGroup
}

func NewVulnerabilityWorker(log *logp.Logger, c *config.Config) (*VulnerabilityWorker, error) {
	log.Debug("VulnerabilityWorker: New")
	ctx := context.Background()

	acp := awslib.ConfigProvider{MetadataProvider: awslib.Ec2MetadataProvider{}}
	awsConfig, err := acp.InitializeAWSConfig(ctx, c.CloudConfig.AwsCred)
	if err != nil {
		return nil, fmt.Errorf("VulnerabilityWorker: failed to initialize AWS credentials: %w", err)
	}

	identityProvider := awslib.GetIdentityClient(*awsConfig)
	identity, err := identityProvider.GetIdentity(ctx)
	if err != nil {
		return nil, fmt.Errorf("VulnerabilityWorker: could not get cloud indentity: %w", err)
	}

	provider := ec2.NewEC2Provider(log, *identity.Account, *awsConfig)

	fetcher := NewVulnerabilityFetcher(log, provider)
	replicator := NewVulnerabilityReplicator(log, provider)
	verifier := NewVulnerabilityVerifier(log, provider)
	evaluator := NewVulnerabilityEvaluator(log)

	return &VulnerabilityWorker{
		log:           log,
		cfg:           c,
		provider:      provider,
		cloudIdentity: identity,
		fetcher:       fetcher,
		replicator:    replicator,
		verifier:      verifier,
		evaluator:     evaluator,
		wg:            sync.WaitGroup{},
	}, nil
}

// // TODO: Maybe verify more than one snapshot
// func (f *VulnerabilityWorker) Run(ctx context.Context) error {
// 	f.log.Info("Starting VulnerabilityWorker.Run")
// 	go f.work(ctx)
// 	return nil
// }

func (f *VulnerabilityWorker) Run(ctx context.Context) {
	// TODO: Handle deletion of snapshots
	f.log.Info("Starting VulnerabilityWorker.work")
	for {
		select {
		case <-ctx.Done():
			f.log.Info("VulnerabilityWorker.work context canceled")
			return
		default:
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.fetcher.FetchInstances(ctx)
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.replicator.SnapshotInstance(ctx, f.fetcher.GetChan())
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.verifier.VerifySnapshot(ctx, f.replicator.GetChan())
			}()
			f.wg.Add(1)
			go func() {
				defer f.wg.Done()
				f.evaluator.EvaluateSnapshot(ctx, f.verifier.GetChan())
			}()
			f.wg.Wait()
			return
		}
	}
}

func (f *VulnerabilityWorker) GetChan() chan beat.Event {
	return f.evaluator.GetChan()
}
