// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"testing"
	"time"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	"github.com/elastic/cloudbeat/config"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
)

func TestNewVulnerabilityScanner(t *testing.T) {
	log := logp.NewLogger("TestNewVulnerabilityScanner")
	cfg := &config.Config{}
	seq := time.Now()
	runner, err := artifact.NewRunner(context.Background(), flag.Options{})
	assert.NoError(t, err)
	scanner, err := NewVulnerabilityScanner(log, runner, cfg, seq)
	assert.NoError(t, err)

	assert.NotNil(t, scanner)
	assert.Equal(t, log, scanner.log)
	assert.NotNil(t, scanner.ch)
	assert.Equal(t, cfg, scanner.cfg)
	assert.Equal(t, seq, scanner.seq)
}

func TestVulnerabilityScanner_ScanSnapshot(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityScanner_ScanSnapshot")
	cfg := &config.Config{}
	seq := time.Now()
	runner, err := artifact.NewRunner(context.Background(), flag.Options{})
	assert.NoError(t, err)
	scanner, err := NewVulnerabilityScanner(log, runner, cfg, seq)
	assert.NoError(t, err)

	snapCh := make(chan ec2.EBSSnapshot)

	ctx, cancel := context.WithCancel(context.Background())
	cancel() // Cancel the context immediately

	scanner.ScanSnapshot(ctx, snapCh)

	ch := scanner.GetChan()
	assert.NotNil(t, ch)

	// Assert that the channel is closed
	_, ok := <-scanner.ch
	assert.False(t, ok)

	// go scanner.ScanSnapshot(ctx, cacheDir, snapCh)

	// // Simulate sending snapshots to the channel
	// snap1 := ec2.EBSSnapshot{SnapshotId: "snap1", Region: "us-west-2", VolumeSize: 100, IsEncrypted: true}
	// snapCh <- snap1

	// // Wait for a short duration to allow the scan to complete
	// time.Sleep(100 * time.Millisecond)

	// // Assert that the channel is closed
	// _, ok := <-scanner.ch
	// assert.False(t, ok)
}

// TODO: Implement when scanner is mocked
// func TestVulnerabilityScanner_scan(t *testing.T) {
// 	log := logp.NewLogger("TestVulnerabilityScanner_scan")
// 	cfg := &config.Config{}
// 	seq := time.Now()

// 	scanner := NewVulnerabilityScanner(log, cfg, seq)

// 	cacheDir := "test_cache"
// 	snap := ec2.EBSSnapshot{SnapshotId: "snap1", Region: "us-west-2", VolumeSize: 100, IsEncrypted: true}

// 	ctx := context.Background()

// 	scanner.scan(ctx, cacheDir, snap)

// 	// TODO: Add assertions for the expected behavior of the scan function
// }
