// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"fmt"
	"time"

	"github.com/aquasecurity/trivy-db/pkg/metadata"
	"github.com/elastic/elastic-agent-libs/logp"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
)

type VulnerabilityDBManager struct {
	log *logp.Logger
}

const (
	dbRepository = "ghcr.io/aquasecurity/trivy-db"
	cacheDir     = "/tmp/trivy-cache"
)

func NewVulnerabilityDBManager(log *logp.Logger) VulnerabilityDBManager {
	log.Debug("NewVulnerabilityDBManager: New")

	return VulnerabilityDBManager{
		log: log,
	}
}

func (f VulnerabilityDBManager) Download(ctx context.Context) error {
	opts := flag.Options{
		GlobalOptions: flag.GlobalOptions{
			Timeout:  1 * time.Hour,
			Quiet:    false,
			Debug:    true,
			CacheDir: cacheDir,
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType:      []string{trivy_types.VulnTypeOS, trivy_types.VulnTypeLibrary},
			IgnoreUnfixed: false,
		},
		ScanOptions: flag.ScanOptions{
			Scanners: []trivy_types.Scanner{trivy_types.VulnerabilityScanner},
			RekorURL: "https://rekor.sigstore.dev",
		},
		DBOptions: flag.DBOptions{
			NoProgress:     true,
			DBRepository:   dbRepository,
			DownloadDBOnly: true,
		},
	}
	err := artifact.Run(ctx, opts, artifact.TargetVM)
	if err != nil {
		f.log.Error("VulnerabilityDBManager: checking cache after init error: %w", err)
		err := f.UseCache()
		if err != nil {
			return fmt.Errorf("VulnerabilityDBManager: could not use cache: %w", err)
		}
	}

	return nil
}

func (f VulnerabilityDBManager) UseCache() error {
	client := metadata.NewClient(cacheDir)
	cache, err := client.Get()
	if err != nil {
		return fmt.Errorf("VulnerabilityDBManager: could not find cache: %w", err)
	}

	f.log.Info("VulnerabilityDBManager: using cache: ", cache.Version)
	return nil
}
