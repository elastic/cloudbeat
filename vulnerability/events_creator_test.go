// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	dbTypes "github.com/aquasecurity/trivy-db/pkg/types"
	trivyVul "github.com/aquasecurity/trivy-db/pkg/vulnsrc/vulnerability"
	"github.com/aquasecurity/trivy/pkg/types"
	"github.com/elastic/elastic-agent-libs/logp"
	"testing"
)

var v2Cvss = types.DetectedVulnerability{
	DataSource: &dbTypes.DataSource{
		ID: trivyVul.RedHat,
	},
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v2CvssWithoutSource = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v2CvssWithSourceWithoutData = types.DetectedVulnerability{
	DataSource: &dbTypes.DataSource{
		ID: trivyVul.GHSA,
	},
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v3Cvss = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  7.2,
			},
		},
	},
}

var combinedCvss = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.0,
				V2Score:  3.1,
				V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
			},
			trivyVul.NVD: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.7,
				V2Score:  3.5,
				V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
			},
		},
	},
}

func TestEventsCreator_getCVSSVersion(t *testing.T) {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want string
	}{
		{
			name: "should return v3 version",
			vul:  v3Cvss,
			want: "3.1",
		},
		{
			name: "should return v2 version",
			vul:  v2Cvss,
			want: "2.0",
		},
		{
			name: "should return v3 version from combined",
			vul:  combinedCvss,
			want: "3.1",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := EventsCreator{log: logp.NewLogger("test")}

			if got := e.getCVSSVersion(tt.vul); got != tt.want {
				t.Errorf("getCVSSVersion() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEventsCreator_getCVSSVector(t *testing.T) {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want string
	}{
		{
			name: "should return v3",
			vul:  v3Cvss,
			want: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
		},
		{
			name: "should return redhat v2 vector",
			vul:  v2Cvss,
			want: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
		},
		{
			name: "should return v3",
			vul:  combinedCvss,
			want: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := EventsCreator{log: logp.NewLogger("test")}

			if got := e.getCVSSVector(tt.vul); got != tt.want {
				t.Errorf("getCVSSVector() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEventsCreator_getCVSSScore(t *testing.T) {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want float64
	}{
		{
			name: "should return v3",
			vul:  v3Cvss,
			want: 7.2,
		},
		{
			name: "should return redhat v2 score",
			vul:  v2Cvss,
			want: 3.0,
		},
		{
			name: "should return nvd v2 score",
			vul:  v2CvssWithoutSource,
			want: 3.2,
		},
		{
			name: "should return nvd v2 score as fallback",
			vul:  v2CvssWithSourceWithoutData,
			want: 3.2,
		},
		{
			name: "should return v3",
			vul:  combinedCvss,
			want: 3.7,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := EventsCreator{log: logp.NewLogger("test")}

			if got := e.getCVSSScore(tt.vul); got != tt.want {
				t.Errorf("getCVSSScore() = %v, want %v", got, tt.want)
			}
		})
	}
}
