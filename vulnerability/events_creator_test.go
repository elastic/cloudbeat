// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"sync"
	"testing"
	"time"

	dbTypes "github.com/aquasecurity/trivy-db/pkg/types"
	trivyVul "github.com/aquasecurity/trivy-db/pkg/vulnsrc/vulnerability"
	"github.com/aquasecurity/trivy/pkg/types"
	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"

	"github.com/elastic/cloudbeat/dataprovider"
	"github.com/elastic/cloudbeat/resources/utils/testhelper"
)

var v2Cvss = types.DetectedVulnerability{
	DataSource: &dbTypes.DataSource{
		ID: trivyVul.RedHat,
	},
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v2CvssWithoutSource = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v2CvssWithSourceWithoutData = types.DetectedVulnerability{
	DataSource: &dbTypes.DataSource{
		ID: trivyVul.GHSA,
	},
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
				V2Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
				V2Score:  3.2,
			},
		},
	},
}

var v3Cvss = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.0,
			},
			trivyVul.NVD: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  7.2,
			},
		},
	},
}

var combinedCvss = types.DetectedVulnerability{
	Vulnerability: dbTypes.Vulnerability{
		CVSS: dbTypes.VendorCVSS{
			trivyVul.RedHat: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.0,
				V2Score:  3.1,
				V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
			},
			trivyVul.NVD: dbTypes.CVSS{
				V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
				V3Score:  3.7,
				V2Score:  3.5,
				V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
			},
		},
	},
}

type EventsCreatorTestSuite struct {
	suite.Suite
	cdp     *MockEnricher
	bdp     *dataprovider.MockCommonDataProvider
	creator EventsCreator
}

func TestSuite(t *testing.T) {
	s := new(EventsCreatorTestSuite)
	suite.Run(t, s)
}

func (s *EventsCreatorTestSuite) SetupTest() {
	s.cdp = &MockEnricher{}
	s.bdp = &dataprovider.MockCommonDataProvider{}

	s.creator = EventsCreator{
		log:                testhelper.NewLogger(s.T()),
		cloudDataProvider:  s.bdp,
		commonDataProvider: s.cdp,
		ch:                 make(chan []beat.Event),
	}
}

func (s *EventsCreatorTestSuite) TestCreateEvents_Success() {
	s.bdp.EXPECT().EnrichEvent(mock.Anything, mock.Anything).Return(nil).Times(55)
	s.cdp.EXPECT().EnrichEvent(mock.Anything).Return(nil).Times(55)

	ctx := context.Background()

	scanCh := make(chan []Result)
	go func() {
		for i := 0; i < 10; i++ {
			scanCh <- generateResults(i)
		}
		close(scanCh)
	}()

	var wg sync.WaitGroup
	wg.Add(1)

	ch := s.creator.GetChan()
	s.NotNil(ch)
	go func() {
		defer wg.Done()
		for i := 0; i < 10; i++ {
			events := <-ch
			s.Len(events, i)
		}
	}()

	s.creator.CreateEvents(ctx, scanCh)

	wg.Wait()
	_, ok := <-ch
	s.False(ok)
}

func (s *EventsCreatorTestSuite) TestCreateEvents_Cancel() {
	testhelper.SkipLong(s.T())

	s.bdp.EXPECT().EnrichEvent(mock.Anything, mock.Anything).Return(nil).Times(10)
	s.cdp.EXPECT().EnrichEvent(mock.Anything).Return(nil).Times(10)

	creator := s.creator
	ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
	defer cancel()

	scanCh := make(chan []Result)
	go func() {
		for i := 0; i < 10; i++ {
			scanCh <- []Result{{}}
		}
	}()

	ch := creator.GetChan()
	s.NotNil(ch)

	creator.CreateEvents(ctx, scanCh)

	_, ok := <-ch
	s.False(ok)
}

func (s *EventsCreatorTestSuite) TestGetCVSSVersion() {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want string
	}{
		{
			name: "should return v3 version",
			vul:  v3Cvss,
			want: "3.1",
		},
		{
			name: "should return v2 version",
			vul:  v2Cvss,
			want: "2.0",
		},
		{
			name: "should return v3 version from combined",
			vul:  combinedCvss,
			want: "3.1",
		},
	}
	for _, tt := range tests {
		s.Run(tt.name, func() {
			e := EventsCreator{log: testhelper.NewLogger(s.T())}
			got := e.getCVSSVersion(tt.vul)
			s.Equal(tt.want, got)
		})
	}
}

func (s *EventsCreatorTestSuite) TestGetCVSSVector() {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want string
	}{
		{
			name: "should return v3",
			vul:  v3Cvss,
			want: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
		},
		{
			name: "should return redhat v2 vector",
			vul:  v2Cvss,
			want: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
		},
		{
			name: "should return v3",
			vul:  combinedCvss,
			want: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
		},
	}
	for _, tt := range tests {
		s.Run(tt.name, func() {
			e := EventsCreator{log: testhelper.NewLogger(s.T())}
			got := e.getCVSSVector(tt.vul)
			s.Equal(tt.want, got)
		})
	}
}

func (s *EventsCreatorTestSuite) TestGetCVSSScore() {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want float64
	}{
		{
			name: "should return v3",
			vul:  v3Cvss,
			want: 7.2,
		},
		{
			name: "should return redhat v2 score",
			vul:  v2Cvss,
			want: 3.0,
		},
		{
			name: "should return nvd v2 score",
			vul:  v2CvssWithoutSource,
			want: 3.2,
		},
		{
			name: "should return nvd v2 score as fallback",
			vul:  v2CvssWithSourceWithoutData,
			want: 3.2,
		},
		{
			name: "should return v3",
			vul:  combinedCvss,
			want: 3.7,
		},
	}
	for _, tt := range tests {
		s.Run(tt.name, func() {
			e := EventsCreator{log: testhelper.NewLogger(s.T())}
			got := e.getCVSSScore(tt.vul)
			s.InEpsilon(tt.want, got, 0.001)
			s.InDelta(tt.want, got, 0.001)
		})
	}
}

func (s *EventsCreatorTestSuite) TestGetReference() {
	tests := []struct {
		name string
		vul  types.DetectedVulnerability
		want string
	}{
		{
			name: "CVSS is nil",
			vul: types.DetectedVulnerability{
				Vulnerability: dbTypes.Vulnerability{
					CVSS: nil,
				},
				PrimaryURL:      "https://example.com/primary",
				VulnerabilityID: "someID",
			},
			want: "https://example.com/primary",
		},
		{
			name: "CVSS contains NVD",
			vul: types.DetectedVulnerability{
				Vulnerability: dbTypes.Vulnerability{
					CVSS: dbTypes.VendorCVSS{
						trivyVul.RedHat: dbTypes.CVSS{
							V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
							V2Score:  3.0,
						},
						trivyVul.NVD: dbTypes.CVSS{
							V2Vector: "AV:L/AC:L/Au:N/C:C/I:C/A:C",
							V2Score:  3.2,
						},
					},
				},
				PrimaryURL:      "https://example.com/primary",
				VulnerabilityID: "someID",
			},
			want: "https://nvd.nist.gov/vuln/detail/someID",
		},
		{
			name: "CVSS does not contain NVD",
			vul: types.DetectedVulnerability{
				Vulnerability: dbTypes.Vulnerability{
					CVSS: dbTypes.VendorCVSS{
						trivyVul.RedHat: dbTypes.CVSS{
							V2Vector: "AV:N/AC:M/Au:N/C:V/I:P/A:N",
							V2Score:  3.0,
						},
					},
				},
				PrimaryURL:      "https://example.com/primary",
				VulnerabilityID: "someID",
			},
			want: "https://example.com/primary",
		},
	}

	for _, tt := range tests {
		s.Run(tt.name, func() {
			result := getReference(tt.vul)
			s.Equal(tt.want, result)
		})
	}
}

func generateResults(size int) []Result {
	results := make([]Result, size)
	for i := 0; i < size; i++ {
		results[i] = Result{}
	}
	return results
}
