// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"sync"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"go.uber.org/goleak"
)

func TestVulnerabilityVerifier_VerifySnapshot_Cancel(t *testing.T) {
	logger := logp.NewLogger("TestVulnerabilityVerifier_VerifySnapshot_Cancel")
	provider := &mockSnapshotProvider{}
	provider.EXPECT().DescribeSnapshots(mock.Anything, mock.Anything).Return([]ec2.EBSSnapshot{
		{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted},
		{SnapshotId: "snapshot-2", State: types.SnapshotStateCompleted},
		{SnapshotId: "snapshot-3", State: types.SnapshotStateCompleted},
	}, nil)
	verifier := NewVulnerabilityVerifier(logger, provider)
	verifier.interval = 100 * time.Millisecond

	ctx, cancel := context.WithCancel(context.Background())
	snapCh := make(chan ec2.EBSSnapshot)

	// Test cancellation
	go func() {
		snapCh <- ec2.EBSSnapshot{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted}
		<-time.After(300 * time.Millisecond)
		cancel()
	}()

	verifier.VerifySnapshot(ctx, snapCh)

	ch := verifier.GetChan()
	assert.NotNil(t, ch)

	_, ok := <-ch
	assert.False(t, ok)

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}

func TestVulnerabilityVerifier_verify(t *testing.T) {
	logger := logp.NewLogger("TestVulnerabilityVerifier_verify")
	provider := &mockSnapshotProvider{}
	expectedSnapshots := []ec2.EBSSnapshot{
		{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted},
		{SnapshotId: "snapshot-2", State: types.SnapshotStateCompleted},
	}
	provider.EXPECT().DescribeSnapshots(mock.Anything, mock.Anything).Return(expectedSnapshots, nil)
	verifier := NewVulnerabilityVerifier(logger, provider)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	snapshot := ec2.EBSSnapshot{
		SnapshotId: "test-snapshot-id",
		State:      types.SnapshotStateCompleted,
	}

	ch := verifier.GetChan()
	assert.NotNil(t, ch)

	wg := sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		verifier.verify(ctx, snapshot)
		close(ch)
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		receivedSnapshots := make([]ec2.EBSSnapshot, 0, len(expectedSnapshots))
		for snap := range ch {
			receivedSnapshots = append(receivedSnapshots, snap)
		}

		assert.ElementsMatch(t, expectedSnapshots, receivedSnapshots)
	}()

	wg.Wait()

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}
