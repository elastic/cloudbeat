// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"sync"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
)

type mockProviderVerifier struct {
	snapshots []ec2.EBSSnapshot
	err       error
}

func (p *mockProviderVerifier) DescribeSnapshots(ctx context.Context, snap ec2.EBSSnapshot) ([]ec2.EBSSnapshot, error) {
	return p.snapshots, p.err
}

func TestVulnerabilityVerifier_VerifySnapshot_Cancel(t *testing.T) {
	logger := logp.NewLogger("TestVulnerabilityVerifier_VerifySnapshot_Cancel")
	provider := &mockProviderVerifier{
		snapshots: []ec2.EBSSnapshot{
			{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted},
			{SnapshotId: "snapshot-2", State: types.SnapshotStateCompleted},
		},
		err: nil,
	}
	verifier := NewVulnerabilityVerifier(logger, provider)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	snapCh := make(chan ec2.EBSSnapshot)
	go verifier.VerifySnapshot(ctx, snapCh)

	// Test cancellation
	cancel()

	ch := verifier.GetChan()
	assert.NotNil(t, ch)

	_, ok := <-ch
	assert.False(t, ok)
}

func TestVulnerabilityVerifier_verify(t *testing.T) {
	logger := logp.NewLogger("TestVulnerabilityVerifier_verify")
	provider := &mockProviderVerifier{
		snapshots: []ec2.EBSSnapshot{
			{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted},
			{SnapshotId: "snapshot-2", State: types.SnapshotStateCompleted},
		},
		err: nil,
	}
	verifier := NewVulnerabilityVerifier(logger, provider)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	snapshot := ec2.EBSSnapshot{
		SnapshotId: "test-snapshot-id",
		State:      types.SnapshotStateCompleted,
	}

	ch := verifier.GetChan()
	assert.NotNil(t, ch)

	wg := sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		verifier.verify(ctx, snapshot)
		close(ch)
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		expectedSnapshots := []ec2.EBSSnapshot{
			{SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted},
			{SnapshotId: "snapshot-2", State: types.SnapshotStateCompleted},
		}
		receivedSnapshots := make([]ec2.EBSSnapshot, 0, len(expectedSnapshots))
		for snap := range ch {
			receivedSnapshots = append(receivedSnapshots, snap)
		}

		assert.ElementsMatch(t, expectedSnapshots, receivedSnapshots)
	}()

	wg.Wait()
}
