// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"sync"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"go.uber.org/goleak"
)

func TestVulnerabilityReplicator_SnapshotInstance(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityReplicator_SnapshotInstance")

	// Create a mock provider
	provider := &mockReplicatorProvider{}
	// Assert that the received snapshots match the expected snapshots
	expectedSnapshots := []ec2.EBSSnapshot{
		{Instance: ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-1")},
		}, SnapshotId: "snapshot-1"},
	}
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(expectedSnapshots, nil)

	// Create an instance of VulnerabilityReplicator
	replicator := NewVulnerabilityReplicator(log, provider)

	// Create a context for the test
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Create a channel for sending Ec2Instance objects
	insCh := make(chan ec2.Ec2Instance)

	wg := sync.WaitGroup{}
	// Start the SnapshotInstance goroutine
	wg.Add(1)
	go func() {
		defer wg.Done()
		replicator.SnapshotInstance(ctx, insCh)
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		// Collect the received snapshots from the channel
		var receivedSnapshots []ec2.EBSSnapshot
		for s := range replicator.GetChan() {
			receivedSnapshots = append(receivedSnapshots, s)
		}

		assert.ElementsMatch(t, expectedSnapshots, receivedSnapshots)
	}()

	// Send Ec2Instance data to the channel
	insCh <- ec2.Ec2Instance{
		Instance: types.Instance{InstanceId: aws.String("instance-1")},
	}

	// Close the channel to indicate that no more data will be sent
	close(insCh)
	wg.Wait()

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}

func TestVulnerabilityReplicator_SnapshotInstance_Cancel(t *testing.T) {
	log := logp.NewLogger("TestVulnerabilityReplicator_SnapshotInstance")

	// Create a mock provider
	provider := &mockReplicatorProvider{}
	// Assert that the received snapshots match the expected snapshots
	expectedSnapshots := []ec2.EBSSnapshot{
		{Instance: ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-1")},
		}, SnapshotId: "snapshot-1"},
		{Instance: ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-2")},
		}, SnapshotId: "snapshot-2"},
		{Instance: ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-3")},
		}, SnapshotId: "snapshot-3"},
	}
	provider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(expectedSnapshots, nil)

	// Create an instance of VulnerabilityReplicator
	replicator := NewVulnerabilityReplicator(log, provider)

	// Create a context for the test
	ctx, cancel := context.WithCancel(context.Background())

	// Create a channel for sending Ec2Instance objects
	insCh := make(chan ec2.Ec2Instance)
	go func() {
		// Send Ec2Instance data to the channel
		insCh <- ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-1")},
		}

		<-time.After(100 * time.Millisecond)
		defer cancel()
	}()

	replicator.SnapshotInstance(ctx, insCh)

	ch := replicator.GetChan()
	assert.NotNil(t, ch)

	_, ok := <-ch
	assert.False(t, ok)

	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}
