// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"

	"github.com/elastic/elastic-agent-libs/logp"

	"github.com/elastic/cloudbeat/internal/resources/providers/awslib/ec2"
)

type Cleaner struct {
	log      *logp.Logger
	provider SnapshotCleaner
	ch       chan []ec2.EBSSnapshot
}

type SnapshotCleaner interface {
	DeleteSnapshot(ctx context.Context, snapshot ec2.EBSSnapshot) error
}

func NewVulnerabilityCleaner(log *logp.Logger, provider SnapshotCleaner) Cleaner {
	log.Debug("VulnerabilityCleaner: New")
	return Cleaner{
		log:      log,
		provider: provider,
		ch:       make(chan []ec2.EBSSnapshot, 1),
	}
}

func (f Cleaner) CleanSnapshots(ctx context.Context) {
	f.log.Info("Starting VulnerabilityCleaner.CleanSnapshots")
	defer close(f.ch)
	select {
	case <-ctx.Done():
		f.log.Info("NewVulnerabilityCleaner.CleanSnapshots context canceled")
		return
	case snapshots, ok := <-f.ch:
		if !ok {
			f.log.Info("NewVulnerabilityCleaner.CleanSnapshots channel is closed")
			return
		}

		for _, s := range snapshots {
			err := f.provider.DeleteSnapshot(ctx, s)
			if err != nil {
				f.log.Errorf("NewVulnerabilityCleaner.CleanSnapshots: error deleting snapshot: %s, %v", s.SnapshotId, err)
			}
		}
	}
}

func (f Cleaner) GetChan() chan []ec2.EBSSnapshot {
	return f.ch
}
