package vulnerability

import (
	"context"
	"testing"

	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/stretchr/testify/assert"
	"go.uber.org/goleak"
)

func TestNewVulnerabilityRunner(t *testing.T) {
	log := logp.NewLogger("TestNewVulnerabilityRunner")
	runner, err := NewVulnerabilityRunner(log)
	assert.NoError(t, err)
	assert.NotNil(t, runner)
	assert.NotNil(t, runner.log)
	assert.NotNil(t, runner.runner)
	defer runner.runner.Close(context.Background())
}

func TestGetRunner(t *testing.T) {
	log := logp.NewLogger("TestGetRunner")
	runner, err := NewVulnerabilityRunner(log)
	assert.NoError(t, err)
	assert.NotNil(t, runner)
	assert.Equal(t, runner.runner, runner.GetRunner())
	defer runner.runner.Close(context.Background())
}

func TestRunner_TearDown(t *testing.T) {
	// Verify no goroutines are leaking. Safest to keep this on top of the function.
	// Go defers are implemented as a LIFO stack. This should be the last one to run.
	goleak.VerifyNone(t, goleak.IgnoreCurrent())
}
