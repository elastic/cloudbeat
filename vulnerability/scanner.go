// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"encoding/json"
	"io"
	"os"
	"time"

	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/elastic/elastic-agent-libs/mapstr"

	db_types "github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	ec2_types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

type VulnerabilityScanner struct {
	log *logp.Logger
	// TODO: Change to type that includes snapshot for deletion after evaluation
	ch     chan beat.Event
	runner artifact.Runner
}

// TODO: Take region from config or from snapshot
func NewVulnerabilityScanner(log *logp.Logger, runner artifact.Runner) (VulnerabilityScanner, error) {
	log.Debug("VulnerabilityScanner: New")
	ch := make(chan beat.Event)

	// // TODO: POC REMOVE and pick only what needed
	// opts := flag.Options{
	// 	AWSOptions: flag.AWSOptions{
	// 		// TODO: Take region from config
	// 		Region: "eu-west-1",
	// 	},
	// 	GlobalOptions: flag.GlobalOptions{
	// 		// TODO: Make configurable
	// 		Timeout: 1 * time.Hour,
	// 		Quiet:   false,
	// 		Debug:   true,
	// 		// CacheDir: "/tmp/trivy",
	// 		// CacheDir: "/home/ubuntu/.cache/trivy",
	// 	},
	// 	VulnerabilityOptions: flag.VulnerabilityOptions{
	// 		VulnType:      []string{"os", "library"},
	// 		IgnoreUnfixed: false,
	// 	},
	// 	ScanOptions: flag.ScanOptions{
	// 		// Target: fmt.Sprint("ebs:", *snap.SnapshotId),
	// 		// Target:         "ebs:snap-07a4a228a916368c5",
	// 		// Target:         "file:snap-07a4a228a916368c5",
	// 		SecurityChecks: []string{"vuln"},
	// 		RekorURL:       "https://rekor.sigstore.dev",
	// 	},
	// 	DBOptions: flag.DBOptions{
	// 		// DownloadDBOnly: true,
	// 		// SkipDBUpdate: true,
	// 		DBRepository: "ghcr.io/aquasecurity/trivy-db",
	// 	},
	// 	CacheOptions: flag.CacheOptions{
	// 		CacheBackend: "fs",
	// 		ClearCache:   false,
	// 		CacheTTL:     0,
	// 	},
	// 	// CloudOptions: flag.CloudOptions{
	// 	// 	MaxCacheAge: 0,
	// 	// 	UpdateCache: false,
	// 	// },
	// 	// ReportOptions: flag.ReportOptions{
	// 	// 	Output:     o,
	// 	// 	Format:     "json",
	// 	// 	Severities: []db_types.Severity{0, 1, 2, 3, 4},
	// 	// },
	// }

	// config_str := "{\"ConfigFile\":\"trivy.yaml\",\"ShowVersion\":false,\"Quiet\":false,\"Debug\":false,\"Insecure\":false,\"Timeout\":1800000000000,\"CacheDir\":\"/home/ubuntu/.cache/trivy\",\"GenerateDefaultConfig\":false,\"Region\":\"\",\"Endpoint\":\"\",\"Services\":null,\"Account\":\"\",\"ARN\":\"\",\"ClearCache\":false,\"CacheBackend\":\"fs\",\"CacheTTL\":0,\"RedisCACert\":\"\",\"RedisCert\":\"\",\"RedisKey\":\"\",\"MaxCacheAge\":0,\"UpdateCache\":false,\"Reset\":false,\"DownloadDBOnly\":false,\"SkipDBUpdate\":false,\"NoProgress\":false,\"DBRepository\":\"ghcr.io/aquasecurity/trivy-db\",\"Light\":false,\"Input\":\"\",\"ScanRemovedPkgs\":false,\"Platform\":\"\",\"ClusterContext\":\"\",\"Namespace\":\"\",\"KubeConfig\":\"\",\"Components\":null,\"LicenseFull\":false,\"IgnoredLicenses\":null,\"LicenseRiskThreshold\":0,\"LicenseCategories\":{\"forbidden\":[\"AGPL-1.0\",\"AGPL-3.0\",\"CC-BY-NC-1.0\",\"CC-BY-NC-2.0\",\"CC-BY-NC-2.5\",\"CC-BY-NC-3.0\",\"CC-BY-NC-4.0\",\"CC-BY-NC-ND-1.0\",\"CC-BY-NC-ND-2.0\",\"CC-BY-NC-ND-2.5\",\"CC-BY-NC-ND-3.0\",\"CC-BY-NC-ND-4.0\",\"CC-BY-NC-SA-1.0\",\"CC-BY-NC-SA-2.0\",\"CC-BY-NC-SA-2.5\",\"CC-BY-NC-SA-3.0\",\"CC-BY-NC-SA-4.0\",\"Commons-Clause\",\"Facebook-2-Clause\",\"Facebook-3-Clause\",\"Facebook-Examples\",\"WTFPL\"],\"notice\":[\"AFL-1.1\",\"AFL-1.2\",\"AFL-2.0\",\"AFL-2.1\",\"AFL-3.0\",\"Apache-1.0\",\"Apache-1.1\",\"Apache-2.0\",\"Artistic-1.0-cl8\",\"Artistic-1.0-Perl\",\"Artistic-1.0\",\"Artistic-2.0\",\"BSL-1.0\",\"BSD-2-Clause-FreeBSD\",\"BSD-2-Clause-NetBSD\",\"BSD-2-Clause\",\"BSD-3-Clause-Attribution\",\"BSD-3-Clause-Clear\",\"BSD-3-Clause-LBNL\",\"BSD-3-Clause\",\"BSD-4-Clause\",\"BSD-4-Clause-UC\",\"BSD-Protection\",\"CC-BY-1.0\",\"CC-BY-2.0\",\"CC-BY-2.5\",\"CC-BY-3.0\",\"CC-BY-4.0\",\"FTL\",\"ISC\",\"ImageMagick\",\"Libpng\",\"Lil-1.0\",\"Linux-OpenIB\",\"LPL-1.02\",\"LPL-1.0\",\"MS-PL\",\"MIT\",\"NCSA\",\"OpenSSL\",\"PHP-3.01\",\"PHP-3.0\",\"PIL\",\"Python-2.0\",\"Python-2.0-complete\",\"PostgreSQL\",\"SGI-B-1.0\",\"SGI-B-1.1\",\"SGI-B-2.0\",\"Unicode-DFS-2015\",\"Unicode-DFS-2016\",\"Unicode-TOU\",\"UPL-1.0\",\"W3C-19980720\",\"W3C-20150513\",\"W3C\",\"X11\",\"Xnet\",\"Zend-2.0\",\"zlib-acknowledgement\",\"Zlib\",\"ZPL-1.1\",\"ZPL-2.0\",\"ZPL-2.1\"],\"permissive\":null,\"reciprocal\":[\"APSL-1.0\",\"APSL-1.1\",\"APSL-1.2\",\"APSL-2.0\",\"CDDL-1.0\",\"CDDL-1.1\",\"CPL-1.0\",\"EPL-1.0\",\"EPL-2.0\",\"FreeImage\",\"IPL-1.0\",\"MPL-1.0\",\"MPL-1.1\",\"MPL-2.0\",\"Ruby\"],\"restricted\":[\"BCL\",\"CC-BY-ND-1.0\",\"CC-BY-ND-2.0\",\"CC-BY-ND-2.5\",\"CC-BY-ND-3.0\",\"CC-BY-ND-4.0\",\"CC-BY-SA-1.0\",\"CC-BY-SA-2.0\",\"CC-BY-SA-2.5\",\"CC-BY-SA-3.0\",\"CC-BY-SA-4.0\",\"GPL-1.0\",\"GPL-2.0\",\"GPL-2.0-with-autoconf-exception\",\"GPL-2.0-with-bison-exception\",\"GPL-2.0-with-classpath-exception\",\"GPL-2.0-with-font-exception\",\"GPL-2.0-with-GCC-exception\",\"GPL-3.0\",\"GPL-3.0-with-autoconf-exception\",\"GPL-3.0-with-GCC-exception\",\"LGPL-2.0\",\"LGPL-2.1\",\"LGPL-3.0\",\"NPL-1.0\",\"NPL-1.1\",\"OSL-1.0\",\"OSL-1.1\",\"OSL-2.0\",\"OSL-2.1\",\"OSL-3.0\",\"QPL-1.0\",\"Sleepycat\"],\"unencumbered\":[\"CC0-1.0\",\"Unlicense\",\"0BSD\"]},\"IncludeNonFailures\":false,\"HelmValues\":null,\"HelmValueFiles\":null,\"HelmFileValues\":null,\"HelmStringValues\":null,\"TerraformTFVars\":null,\"SkipPolicyUpdate\":false,\"Trace\":false,\"PolicyPaths\":null,\"DataPaths\":null,\"PolicyNamespaces\":null,\"Token\":\"\",\"TokenHeader\":\"Trivy-Token\",\"ServerAddr\":\"\",\"Listen\":\"\",\"CustomHeaders\":{},\"RepoBranch\":\"\",\"RepoCommit\":\"\",\"RepoTag\":\"\",\"Format\":\"table\",\"ReportFormat\":\"\",\"Template\":\"\",\"DependencyTree\":false,\"ListAllPkgs\":false,\"IgnoreFile\":\".trivyignore\",\"ExitCode\":0,\"IgnorePolicy\":\"\",\"Output\":{},\"Severities\":[0,1,2,3,4],\"Compliance\":\"\",\"ArtifactType\":\"\",\"SBOMFormat\":\"\",\"Target\":\"ebs:snap-1726726362\",\"SkipDirs\":null,\"SkipFiles\":null,\"OfflineScan\":false,\"SecurityChecks\":[\"vuln\"],\"FilePatterns\":null,\"Slow\":false,\"SBOMSources\":null,\"RekorURL\":\"https://rekor.sigstore.dev\",\"SecretConfigPath\":\"trivy-secret.yaml\",\"VulnType\":[\"os\",\"library\"],\"IgnoreUnfixed\":false,\"AppVersion\":\"0.35.0-48-g62b369ee\",\"DisabledAnalyzers\":null}"
	// data := flag.Options{}
	// json.Unmarshal([]byte(config_str), &data)

	// res2B, _ := json.Marshal(data)
	// fmt.Println("JENIA THIS OPTS: ", string(res2B))

	// runner, err := artifact.NewRunner(context.Background(), opts)
	// if err != nil {
	// 	log.Error("VulnerabilityScanner: NewRunner error: ", err)
	// 	return VulnerabilityScanner{}, err
	// }

	return VulnerabilityScanner{
		log:    log,
		ch:     ch,
		runner: runner,
	}, nil
}

func (f VulnerabilityScanner) EvaluateSnapshot(ctx context.Context, snapCh chan ec2_types.Snapshot) {
	f.log.Info("Starting NewVulnerabilityScanner.EvaluateSnapshot")
	defer close(f.ch)
	for {
		select {
		case <-ctx.Done():
			f.log.Info("NewVulnerabilityScanner.EvaluateSnapshot context canceled")
			return
		case data, ok := <-snapCh:
			if !ok {
				f.log.Info("NewVulnerabilityScanner.EvaluateSnapshot channel is closed")
				return
			}
			// TODO: Should we pass the context here? Or should we use a new one?
			// I do not want to cancel the context if one of the evaluation fails
			f.evaluate(context.Background(), data)
		}
	}
}

func (f VulnerabilityScanner) evaluate(ctx context.Context, snap ec2_types.Snapshot) {
	f.log.Info("Starting VulnerabilityScanner.evaluate")
	f.log.Info("JENIA SNAPS3", *snap.Description, *snap.SnapshotId, *snap.Progress, snap.State)
	o, err := os.CreateTemp("", "")
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.TempFile error: ", err)
		return
	}
	defer os.Remove(o.Name())

	opts := flag.Options{
		AWSOptions: flag.AWSOptions{
			// TODO: Take region from config
			Region: "eu-west-1",
		},
		GlobalOptions: flag.GlobalOptions{
			// TODO: Make configurable
			Timeout: 1 * time.Hour,
			Quiet:   false,
			Debug:   true,
			// CacheDir: "/tmp/trivy",
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType:      []string{"os", "library"},
			IgnoreUnfixed: false,
		},
		ScanOptions: flag.ScanOptions{
			// Target: fmt.Sprint("ebs:", *snap.SnapshotId),
			// Target:         "ebs:snap-07a4a228a916368c5",
			Target:         "file:ebs_8g.img",
			SecurityChecks: []string{"vuln"},
			RekorURL:       "https://rekor.sigstore.dev",
		},
		DBOptions: flag.DBOptions{
			// SkipDBUpdate: true,
			DBRepository: "ghcr.io/aquasecurity/trivy-db",
		},
		ReportOptions: flag.ReportOptions{
			Output:     o,
			Format:     "json",
			Severities: []db_types.Severity{0, 1, 2, 3, 4},
		},
	}

	// f.log.Info("VulnerabilityScanner.evaluate.NewRunner")
	// r, err := artifact.NewRunner(ctx, opts)
	// if err != nil {
	// 	f.log.Error("VulnerabilityScanner.evaluate.NewRunner error: ", err)
	// 	return
	// }

	f.log.Info("VulnerabilityScanner.evaluate.ScanVM")
	report, err := f.runner.ScanVM(ctx, opts)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.ScanVM error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.Filter")
	report, err = f.runner.Filter(ctx, opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Filter error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.Report")
	err = f.runner.Report(opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Report error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.jsonFile")
	jsonFile, err := os.Open(o.Name())
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.jsonFile error: ", err)
		return
	}

	defer jsonFile.Close()
	f.log.Info("VulnerabilityScanner.evaluate.ReadAll")
	byteValue, _ := io.ReadAll(jsonFile)
	var result trivy_types.Report
	err = json.Unmarshal([]byte(byteValue), &result)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Unmarshal error: ", err)
		return
	}

	// file, _ := json.MarshalIndent(result, "", " ")
	// _ = os.WriteFile("JENIA_RES_NEW.json", file, 0644)
	// evn, _ := json.Marshal(result)
	// f.log.Info("VulnerabilityScanner.evaluate.JENIARES", string(evn))

	f.ch <- beat.Event{
		Fields: mapstr.M{"result": result},
	}

	f.log.Info("VulnerabilityScanner.evaluate.DONE")
}

func (f VulnerabilityScanner) GetChan() chan beat.Event {
	return f.ch
}
