// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"time"

	"github.com/elastic/beats/v7/libbeat/beat"
	cb_config "github.com/elastic/cloudbeat/config"
	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/elastic/elastic-agent-libs/mapstr"

	db_types "github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	ec2_types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

type CredentialProvider struct {
	AccessKeyID     string
	SecretAccessKey string
}

func (p *CredentialProvider) Retrieve(ctx context.Context) (aws.Credentials, error) {
	return aws.Credentials{
		AccessKeyID:     p.AccessKeyID,
		SecretAccessKey: p.SecretAccessKey,
	}, nil
}

type VulnerabilityScanner struct {
	log *logp.Logger
	// TODO: Change to type that includes snapshot for deletion after evaluation
	ch     chan beat.Event
	runner artifact.Runner
	cfg    *cb_config.Config
}

func NewVulnerabilityScanner(log *logp.Logger, runner artifact.Runner, c *cb_config.Config) (VulnerabilityScanner, error) {
	log.Debug("VulnerabilityScanner: New")
	ch := make(chan beat.Event)

	return VulnerabilityScanner{
		log:    log,
		ch:     ch,
		runner: runner,
		cfg:    c,
	}, nil
}

func (f VulnerabilityScanner) EvaluateSnapshot(ctx context.Context, snapCh chan ec2_types.Snapshot) {
	f.log.Info("Starting NewVulnerabilityScanner.EvaluateSnapshot")
	defer close(f.ch)
	for {
		select {
		case <-ctx.Done():
			f.log.Info("NewVulnerabilityScanner.EvaluateSnapshot context canceled")
			return
		case data, ok := <-snapCh:
			if !ok {
				f.log.Info("NewVulnerabilityScanner.EvaluateSnapshot channel is closed")
				return
			}
			// TODO: Should we pass the context here? Or should we use a new one?
			// I do not want to cancel the context if one of the evaluation fails
			f.evaluate(context.Background(), data)
		}
	}
}

func (f VulnerabilityScanner) evaluate(ctx context.Context, snap ec2_types.Snapshot) {
	f.log.Info("Starting VulnerabilityScanner.evaluate")
	o, err := os.CreateTemp("", "")
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.TempFile error: ", err)
		return
	}
	defer os.Remove(o.Name())

	opts := flag.Options{
		GlobalOptions: flag.GlobalOptions{
			// TODO: Make configurable
			Timeout: 1 * time.Hour,
			Quiet:   false,
			Debug:   true,
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType:      []string{"os", "library"},
			IgnoreUnfixed: false,
		},
		ScanOptions: flag.ScanOptions{
			Target:         fmt.Sprint("ebs:", *snap.SnapshotId),
			SecurityChecks: []string{"vuln"},
			RekorURL:       "https://rekor.sigstore.dev",
			OptFns:         f.getOptFns(),
		},
		DBOptions: flag.DBOptions{
			DBRepository: "ghcr.io/aquasecurity/trivy-db",
		},
		ReportOptions: flag.ReportOptions{
			Output:     o,
			Format:     "json",
			Severities: []db_types.Severity{0, 1, 2, 3, 4},
		},
	}

	f.log.Info("VulnerabilityScanner.evaluate.ScanVM")
	report, err := f.runner.ScanVM(ctx, opts)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.ScanVM error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.Filter")
	report, err = f.runner.Filter(ctx, opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Filter error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.Report")
	err = f.runner.Report(opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Report error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.evaluate.jsonFile")
	jsonFile, err := os.Open(o.Name())
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.jsonFile error: ", err)
		return
	}

	defer jsonFile.Close()
	f.log.Info("VulnerabilityScanner.evaluate.ReadAll")
	byteValue, _ := io.ReadAll(jsonFile)
	var result trivy_types.Report
	err = json.Unmarshal([]byte(byteValue), &result)
	if err != nil {
		f.log.Error("VulnerabilityScanner.evaluate.Unmarshal error: ", err)
		return
	}

	f.ch <- beat.Event{
		Fields: mapstr.M{"result": result},
	}

	f.log.Info("VulnerabilityScanner.evaluate.DONE")
}

func (f VulnerabilityScanner) GetChan() chan beat.Event {
	return f.ch
}

func (f VulnerabilityScanner) getOptFns() []func(*config.LoadOptions) error {
	return func(optFns ...func(*config.LoadOptions) error) []func(*config.LoadOptions) error {
		return optFns
	}(config.WithRegion(f.cfg.CloudConfig.AwsCred.DefaultRegion), config.WithCredentialsProvider(&CredentialProvider{
		AccessKeyID:     f.cfg.CloudConfig.AwsCred.AccessKeyID,
		SecretAccessKey: f.cfg.CloudConfig.AwsCred.SecretAccessKey}))
}
