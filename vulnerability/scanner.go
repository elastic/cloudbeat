// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"time"

	cb_config "github.com/elastic/cloudbeat/config"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"

	db_types "github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/aws/aws-sdk-go-v2/config"
)

type VulnerabilityScanner struct {
	log    *logp.Logger
	ch     chan Result
	runner artifact.Runner
	cfg    *cb_config.Config
	seq    time.Time
}

type Result struct {
	reportResult  trivy_types.Result
	vulnerability trivy_types.DetectedVulnerability
	snapshot      ec2.EBSSnapshot
	seq           time.Time
}

// TODO: Replace sequence with more generic approach
func NewVulnerabilityScanner(log *logp.Logger, runner artifact.Runner, c *cb_config.Config, seq time.Time) (VulnerabilityScanner, error) {
	log.Debug("VulnerabilityScanner: New")
	ch := make(chan Result)

	return VulnerabilityScanner{
		log:    log,
		ch:     ch,
		runner: runner,
		cfg:    c,
		// TODO: Replace sequence with more generic approach
		seq: seq,
	}, nil
}

func (f VulnerabilityScanner) ScanSnapshot(ctx context.Context, snapCh chan ec2.EBSSnapshot) {
	f.log.Info("Starting NewVulnerabilityScanner.ScanSnapshot")
	defer close(f.ch)
	for {
		select {
		case <-ctx.Done():
			f.log.Info("NewVulnerabilityScanner.ScanSnapshot context canceled")
			return
		case data, ok := <-snapCh:
			if !ok {
				f.log.Info("NewVulnerabilityScanner.ScanSnapshot channel is closed")
				return
			}

			f.scan(ctx, data)
		}
	}
}

func (f VulnerabilityScanner) scan(ctx context.Context, snap ec2.EBSSnapshot) {
	f.log.Infof("Starting VulnerabilityScanner.scan, %s", snap.SnapshotId)
	defer func() {
		if r := recover(); r != nil {
			f.log.Errorf("vulnerability scanner recovered from panic: %v", r)
		}
	}()

	o, err := os.CreateTemp("", "")
	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.TempFile error: ", err)
		return
	}
	defer os.Remove(o.Name())

	opts := flag.Options{
		GlobalOptions: flag.GlobalOptions{
			// TODO: Make configurable
			Timeout: 1 * time.Hour,
			Quiet:   false,
			Debug:   true,
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType:      []string{"os", "library"},
			IgnoreUnfixed: false,
		},
		ScanOptions: flag.ScanOptions{
			Target:         fmt.Sprint("ebs:", snap.SnapshotId),
			SecurityChecks: []string{"vuln"},
			RekorURL:       "https://rekor.sigstore.dev",
			OptFns:         f.getOptFns(snap.Region),
		},
		DBOptions: flag.DBOptions{
			SkipDBUpdate: true,
		},
		ReportOptions: flag.ReportOptions{
			Output:     o,
			Format:     "json",
			Severities: []db_types.Severity{0, 1, 2, 3, 4},
		},
	}
	now := time.Now()
	report, err := f.runner.ScanVM(ctx, opts)
	f.log.Infof(
		"VulnerabilityScanner.scan.ScanVM took %s to scan %s, volume size: %d, isEncrypted: %t",
		time.Since(now),
		snap.SnapshotId,
		snap.VolumeSize,
		snap.IsEncrypted,
	)

	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.ScanVM error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.scan.Filter")
	report, err = f.runner.Filter(ctx, opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.Filter error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.scan.Report")
	err = f.runner.Report(opts, report)
	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.Report error: ", err)
		return
	}

	f.log.Info("VulnerabilityScanner.scan.jsonFile")
	jsonFile, err := os.Open(o.Name())
	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.jsonFile error: ", err)
		return
	}

	defer jsonFile.Close()
	f.log.Info("VulnerabilityScanner.scan.ReadAll")
	byteValue, _ := io.ReadAll(jsonFile)
	var unmarshalledReport trivy_types.Report
	err = json.Unmarshal(byteValue, &unmarshalledReport)
	if err != nil {
		f.log.Error("VulnerabilityScanner.scan.Unmarshal error: ", err)
		return
	}

	for _, result := range unmarshalledReport.Results {
		for _, vul := range result.Vulnerabilities {
			// TODO: Replace sequence with more generic approach
			f.ch <- Result{
				reportResult:  result,
				vulnerability: vul,
				snapshot:      snap,
				seq:           f.seq,
			}
		}
	}

	f.log.Info("VulnerabilityScanner.scan.DONE")
}

func (f VulnerabilityScanner) GetChan() chan Result {
	return f.ch
}

func (f VulnerabilityScanner) getOptFns(region string) []func(*config.LoadOptions) error {
	return func(optFns ...func(*config.LoadOptions) error) []func(*config.LoadOptions) error {
		return optFns
	}(config.WithRegion(region))
}
