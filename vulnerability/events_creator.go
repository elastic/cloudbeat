package vulnerability

import (
	"strings"
	"time"

	db_types "github.com/aquasecurity/trivy-db/pkg/types"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/elastic/beats/v7/libbeat/beat"
	libevents "github.com/elastic/beats/v7/libbeat/beat/events"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/cloudbeat/transformer"
	"github.com/elastic/cloudbeat/version"
	"github.com/elastic/elastic-agent-libs/mapstr"
)

type Finding struct {
	Target string                  `json:"target,omitempty"`
	Type   string                  `json:"type,omitempty"`
	Class  trivy_types.ResultClass `json:"class,omitempty"`
	Vul    Vulnerability           `json:"vulnerability,omitempty"`
}

type Vulnerability struct {
	Cvss           db_types.VendorCVSS  `json:"cvss,omitempty"`
	DataSource     *db_types.DataSource `json:"data_source,omitempty"`
	Scanner        Scanner              `json:"scanner,omitempty"`
	Score          Score                `json:"score,omitempty"`
	Package        Package              `json:"package,omitempty"`
	Cwe            []string             `json:"cwe,omitempty"`
	ID             string               `json:"id,omitempty"`
	Title          string               `json:"title,omitempty"`
	Enumeration    string               `json:"enumeration,omitempty"`
	Reference      string               `json:"reference,omitempty"`
	Description    string               `json:"description,omitempty"`
	Severity       string               `json:"severity,omitempty"`
	Classification string               `json:"classification,omitempty"`
	PublishedDate  *time.Time           `json:"published_date,omitempty"`
}

type Package struct {
	FixedVersion string `json:"fixed_version,omitempty"`
	Version      string `json:"version,omitempty"`
	Name         string `json:"name,omitempty"`
}

type Scanner struct {
	Version string `json:"version,omitempty"`
	Vendor  string `json:"vendor,omitempty"`
}

type Score struct {
	Impact  float64 `json:"impact,omitempty"`
	Base    float64 `json:"base,omitempty"`
	Version string  `json:"version,omitempty"`
}

type Resource struct {
	ID   string
	Name string
}

const (
	vulScannerVersion     = "v0.35.0"
	vulScannerVendor      = "Trivy"
	vulScoreSystemClass   = "CVSS"
	vulScoreSource        = "nvd"
	vulScoreSourceVersion = "3.0"
	vulEcsCategory        = "vulnerability"
	vulIndex              = "logs-cloud_security_posture.vulnerabilities-default"
)

func createVulnerabilityEvent(reportResult trivy_types.Result, vul trivy_types.DetectedVulnerability, ins ec2.Ec2Instance) beat.Event {
	timestamp := time.Now()
	cvssScore := getCVSSScore(vul, vulScoreSource)
	return beat.Event{
		// TODO: Maybe configure or get from somewhere else?
		Meta:      mapstr.M{libevents.FieldMetaIndex: vulIndex},
		Timestamp: timestamp.UTC(),
		Fields: mapstr.M{
			"cloudbeat": version.CloudbeatVersion(),
			// TODO: Do we need sequence?
			"event": transformer.BuildECSEvent(timestamp.Unix(), timestamp.UTC(), []string{vulEcsCategory}),
			"resource": Resource{
				ID:   getResourceId(ins),
				Name: getResourceName(ins),
			},
			"finding": Finding{
				Target: reportResult.Target,
				Class:  reportResult.Class,
				Type:   reportResult.Type,
				Vul: Vulnerability{
					Cvss:       vul.CVSS,
					DataSource: vul.DataSource,
					Scanner: Scanner{
						// TODO: Populate with what?
						Version: vulScannerVersion,
						Vendor:  vulScannerVendor,
					},
					Score: Score{
						Impact:  cvssScore,
						Base:    cvssScore,
						Version: vulScoreSourceVersion,
					},
					Package: Package{
						FixedVersion: vul.FixedVersion,
						Name:         vul.PkgName,
						Version:      vul.InstalledVersion,
					},
					Cwe:            vul.CweIDs,
					ID:             vul.VulnerabilityID,
					Title:          vul.Title,
					Enumeration:    getIdentifierType(vul.VulnerabilityID),
					Reference:      vul.PrimaryURL,
					Description:    vul.Description,
					Severity:       vul.Severity,
					Classification: vulScoreSystemClass,
					PublishedDate:  vul.PublishedDate,
				},
			},
		},
	}
}

func getIdentifierType(id string) string {
	return strings.Split(id, "-")[0]
}

func getCVSSScore(vul trivy_types.DetectedVulnerability, source db_types.SourceID) float64 {
	if cvss, ok := vul.CVSS[source]; ok {
		return cvss.V3Score
	}

	return 0
}

func getResourceName(ins ec2.Ec2Instance) string {
	var name string = ""
	for _, tag := range ins.Tags {
		if *tag.Key == "Name" {
			name = *tag.Value
			break
		}
	}
	return name
}

func getResourceId(ins ec2.Ec2Instance) string {
	return strings.Split(*ins.InstanceId, "-")[1]
}
