// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityFetcher struct {
	log      *logp.Logger
	provider *ec2.Provider
	ch       chan types.Instance
}

func NewVulnerabilityFetcher(log *logp.Logger, provider *ec2.Provider) VulnerabilityFetcher {
	log.Debug("VulnerabilityFetcher: New")
	ch := make(chan types.Instance)
	return VulnerabilityFetcher{
		log:      log,
		ch:       ch,
		provider: provider,
	}
}

func (f VulnerabilityFetcher) FetchInstances(ctx context.Context, region string) error {
	defer close(f.ch)
	f.log.Info("Starting VulnerabilityFetcher.FetchInstances")
	for {
		select {
		case <-ctx.Done():
			f.log.Info("VulnerabilityFetcher.FetchInstances context canceled")
			return nil
		default:
			ins, err := f.provider.DescribeInstances(ctx, region)
			if err != nil {
				f.log.Errorf("VulnerabilityFetcher.FetchInstances DescribeInstances failed: %v", err)
				return err
			}
			for _, ins := range ins {
				f.ch <- ins
			}

			f.log.Infof("VulnerabilityFetcher.FetchInstances found %d results", len(ins))
			return nil
		}
	}
}

func (f VulnerabilityFetcher) GetChan() chan types.Instance {
	return f.ch
}
