// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/elastic-agent-libs/logp"
)

type VulnerabilityReplicator struct {
	log      *logp.Logger
	provider *ec2.Provider
	ch       chan types.SnapshotInfo
}

func NewVulnerabilityReplicator(log *logp.Logger, provider *ec2.Provider) VulnerabilityReplicator {
	log.Debug("VulnerabilityReplicator: New")
	ch := make(chan types.SnapshotInfo)
	return VulnerabilityReplicator{
		log:      log,
		ch:       ch,
		provider: provider,
	}
}

func (f VulnerabilityReplicator) SnapshotInstance(ctx context.Context, insCh chan types.Instance, region string) {
	f.log.Info("Starting VulnerabilityReplicator.SnapshotInstance")
	defer close(f.ch)
	for {
		select {
		case <-ctx.Done():
			f.log.Info("VulnerabilityReplicator.SnapshotInstance context canceled")
			return
		case data, ok := <-insCh:
			if !ok {
				f.log.Info("VulnerabilityReplicator.SnapshotInstance channel is closed")
				return
			}
			sp, err := f.provider.CreateSnapshots(ctx, data, region)
			if err != nil {
				f.log.Errorf("VulnerabilityReplicator.SnapshotInstance.CreateSnapshots failed: %v", err)
				continue
			}
			for _, s := range sp {
				f.ch <- s
			}
		}
	}
}

func (f VulnerabilityReplicator) GetChan() chan types.SnapshotInfo {
	return f.ch
}
