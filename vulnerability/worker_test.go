// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"encoding/json"
	"errors"
	"os"
	"sync"
	"testing"
	"time"

	"github.com/aquasecurity/trivy/pkg/flag"
	trivy_types "github.com/aquasecurity/trivy/pkg/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/elastic/beats/v7/libbeat/beat"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"go.uber.org/goleak"

	"github.com/elastic/cloudbeat/config"
	"github.com/elastic/cloudbeat/dataprovider"
	"github.com/elastic/cloudbeat/resources/providers/awslib/ec2"
	"github.com/elastic/cloudbeat/resources/utils/testhelper"
)

type runnerMock struct {
	report trivy_types.Report
	err    error
}

func (s runnerMock) ScanVM(_ context.Context, opts flag.Options) (trivy_types.Report, error) {
	writer, err := os.OpenFile(opts.ReportOptions.Output, os.O_APPEND|os.O_WRONLY, 0o644)
	if err != nil {
		return trivy_types.Report{}, err
	}
	defer func() {
		_ = writer.Close() // ignore error
	}()
	b, err := json.Marshal(s.report)
	if err != nil {
		return trivy_types.Report{}, err
	}
	_, err = writer.Write(b)
	if err != nil {
		return trivy_types.Report{}, err
	}
	return s.report, s.err
}

func (s runnerMock) Filter(context.Context, flag.Options, trivy_types.Report) (trivy_types.Report, error) {
	return s.report, s.err
}

func (s runnerMock) Report(context.Context, flag.Options, trivy_types.Report) error {
	return s.err
}

func (s runnerMock) Close(context.Context) error {
	return s.err
}

func TestNewVulnerabilityWorker(t *testing.T) {
	testhelper.SkipLong(t)

	c := &config.Config{}
	log := testhelper.NewLogger(t)
	bdp := &dataprovider.MockCommonDataProvider{}
	cdp := &dataprovider.MockElasticCommonDataProvider{}

	worker, err := NewVulnerabilityWorker(log, c, bdp, cdp)

	defer goleak.VerifyNone(t, goleak.IgnoreCurrent(), goleak.Cleanup(func(_ int) {
		worker.runner.GetRunner().Close(context.Background())
	}))

	require.NoError(t, err)
	assert.NotNil(t, worker.log)
	assert.NotNil(t, worker.cfg)
	assert.NotNil(t, worker.cleaner)
	assert.NotNil(t, worker.provider)
	assert.NotNil(t, worker.fetcher)
	assert.NotNil(t, worker.replicator)
	assert.NotNil(t, worker.verifier)
	assert.NotNil(t, worker.evaluator)
	assert.NotNil(t, worker.eventsCreator)
	assert.NotNil(t, worker.runner)

	ch := worker.GetChan()
	assert.NotNil(t, ch)
}

func TestVulnerabilityWorker_Run(t *testing.T) {
	testhelper.SkipLong(t)

	defer goleak.VerifyNone(t, goleak.IgnoreCurrent())

	log := testhelper.NewLogger(t)
	c := &config.Config{}
	bdp := &dataprovider.MockCommonDataProvider{}
	cdp := &MockEnricher{}

	bdp.EXPECT().EnrichEvent(mock.Anything, mock.Anything).Return(nil)
	cdp.EXPECT().EnrichEvent(mock.Anything).Return(nil)

	ec := EventsCreator{
		log:                log,
		cloudDataProvider:  bdp,
		commonDataProvider: cdp,
		ch:                 make(chan []beat.Event),
	}

	// Not used runner, just to increase coverage
	runner, err := NewVulnerabilityRunner(log)
	require.NoError(t, err)
	runner.GetRunner().Close(context.Background())

	report := trivy_types.Report{
		Results: []trivy_types.Result{
			{
				Vulnerabilities: []trivy_types.DetectedVulnerability{
					{
						VulnerabilityID:  "CVE-2604-1992",
						PkgName:          "test",
						InstalledVersion: "1.0.0",
						FixedVersion:     "1.0.1",
					},
				},
			},
		},
	}
	actualRunner := &runnerMock{
		report: report,
		err:    nil,
	}
	seq := time.Now()
	scanner, err := NewVulnerabilityScanner(log, actualRunner, c, seq)
	require.NoError(t, err)

	replicatorProvider := &mockReplicatorProvider{}
	expectedSnapshots := []ec2.EBSSnapshot{
		{Instance: ec2.Ec2Instance{
			Instance: types.Instance{InstanceId: aws.String("instance-1")},
		}, SnapshotId: "snapshot-1", Region: "region"},
	}
	replicatorProvider.EXPECT().CreateSnapshots(mock.Anything, mock.Anything).Return(expectedSnapshots, nil)
	replicator := NewVulnerabilityReplicator(log, replicatorProvider)

	fetcherProvider := &mockInstancesProvider{}
	expectedInstances := []*ec2.Ec2Instance{
		{Instance: types.Instance{InstanceId: aws.String("instance-1")}, Region: "region"},
	}
	fetcherProvider.EXPECT().DescribeInstances(mock.Anything).Return(expectedInstances, nil)
	fetcherProvider.EXPECT().DescribeVolumes(mock.Anything, mock.Anything).Return(nil, errors.New("error"))
	fetcher := NewVulnerabilityFetcher(log, fetcherProvider)

	verifierProvider := &mockSnapshotProvider{}
	verifierProvider.EXPECT().DescribeSnapshots(mock.Anything, mock.Anything).Return([]ec2.EBSSnapshot{
		{
			Instance: ec2.Ec2Instance{
				Instance: types.Instance{InstanceId: aws.String("instance-1")},
			},
			SnapshotId: "snapshot-1", State: types.SnapshotStateCompleted, Region: "region",
		},
	}, nil)
	verifier := NewVulnerabilityVerifier(log, verifierProvider)

	cleanerProvider := &MockSnapshotCleaner{}
	cleanerProvider.EXPECT().DeleteSnapshot(mock.Anything, mock.Anything).Return(nil)
	cleaner := NewVulnerabilityCleaner(log, cleanerProvider)

	worker := VulnerabilityWorker{
		log:           log,
		cfg:           c,
		provider:      nil,
		eventsCreator: ec,
		wg:            sync.WaitGroup{},
		runner:        runner,
		evaluator:     scanner,
		replicator:    replicator,
		fetcher:       fetcher,
		cleaner:       cleaner,
		verifier:      verifier,
	}

	ch := worker.GetChan()
	assert.NotNil(t, ch)

	go func() {
		expectedEvents := report.Results[0].Vulnerabilities
		receivedEvents := make([]beat.Event, 0, len(expectedEvents))
		for in := range ch {
			receivedEvents = append(receivedEvents, in...)
		}

		_, ok := <-ch
		assert.False(t, ok)

		assert.Equal(t, len(expectedEvents), len(receivedEvents))

		for i := range receivedEvents {
			ex := expectedEvents[i]
			got := receivedEvents[i]

			got_vulnerability := got.Fields["vulnerability"]
			assert.NotEmpty(t, got_vulnerability)
			got_package := got.Fields["package"]
			assert.NotEmpty(t, got_package)

			assert.Equal(t, ex.PkgName, got_package.(Package).Name)
			assert.Equal(t, ex.FixedVersion, got_package.(Package).FixedVersion)
			assert.Equal(t, ex.InstalledVersion, got_package.(Package).Version)
			assert.Equal(t, ex.VulnerabilityID, got_vulnerability.(Vulnerability).ID)
		}
	}()

	worker.Run(context.Background())
}
