// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package vulnerability

import (
	"context"
	"time"

	"github.com/elastic/elastic-agent-libs/logp"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
)

type VulnerabilityRunner struct {
	log    *logp.Logger
	runner artifact.Runner
}

func NewVulnerabilityRunner(log *logp.Logger) (VulnerabilityRunner, error) {
	log.Debug("NewVulnerabilityRunner: New")
	opts := flag.Options{
		GlobalOptions: flag.GlobalOptions{
			// TODO: Make configurable
			Timeout: 1 * time.Hour,
			Quiet:   false,
			Debug:   true,
		},
		VulnerabilityOptions: flag.VulnerabilityOptions{
			VulnType:      []string{"os", "library"},
			IgnoreUnfixed: false,
		},
		ScanOptions: flag.ScanOptions{
			SecurityChecks: []string{"vuln"},
			RekorURL:       "https://rekor.sigstore.dev",
		},
		DBOptions: flag.DBOptions{
			NoProgress:   true,
			DBRepository: "ghcr.io/aquasecurity/trivy-db",
		},
	}

	runner, err := artifact.NewRunner(context.Background(), opts)
	if err != nil {
		log.Error("NewVulnerabilityRunner: NewRunner error: ", err)
		return VulnerabilityRunner{}, err
	}

	return VulnerabilityRunner{
		log:    log,
		runner: runner,
	}, nil
}

func (f VulnerabilityRunner) GetRunner() artifact.Runner {
	return f.runner
}
