// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package vulnerability

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockSnapshotCleaner is an autogenerated mock type for the snapshotCleaner type
type mockSnapshotCleaner struct {
	mock.Mock
}

type mockSnapshotCleaner_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSnapshotCleaner) EXPECT() *mockSnapshotCleaner_Expecter {
	return &mockSnapshotCleaner_Expecter{mock: &_m.Mock}
}

// DeleteSnapshots provides a mock function with given fields: ctx, ids
func (_m *mockSnapshotCleaner) DeleteSnapshots(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSnapshotCleaner_DeleteSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshots'
type mockSnapshotCleaner_DeleteSnapshots_Call struct {
	*mock.Call
}

// DeleteSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *mockSnapshotCleaner_Expecter) DeleteSnapshots(ctx interface{}, ids interface{}) *mockSnapshotCleaner_DeleteSnapshots_Call {
	return &mockSnapshotCleaner_DeleteSnapshots_Call{Call: _e.mock.On("DeleteSnapshots", ctx, ids)}
}

func (_c *mockSnapshotCleaner_DeleteSnapshots_Call) Run(run func(ctx context.Context, ids []string)) *mockSnapshotCleaner_DeleteSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *mockSnapshotCleaner_DeleteSnapshots_Call) Return(_a0 error) *mockSnapshotCleaner_DeleteSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockSnapshotCleaner interface {
	mock.TestingT
	Cleanup(func())
}

// newMockSnapshotCleaner creates a new instance of mockSnapshotCleaner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockSnapshotCleaner(t mockConstructorTestingTnewMockSnapshotCleaner) *mockSnapshotCleaner {
	mock := &mockSnapshotCleaner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
