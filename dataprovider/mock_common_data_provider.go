// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package dataprovider

import (
	beat "github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"

	types "github.com/elastic/cloudbeat/dataprovider/types"
)

// MockCommonDataProvider is an autogenerated mock type for the CommonDataProvider type
type MockCommonDataProvider struct {
	mock.Mock
}

type MockCommonDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommonDataProvider) EXPECT() *MockCommonDataProvider_Expecter {
	return &MockCommonDataProvider_Expecter{mock: &_m.Mock}
}

// EnrichEvent provides a mock function with given fields: _a0
func (_m *MockCommonDataProvider) EnrichEvent(_a0 *beat.Event) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*beat.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommonDataProvider_EnrichEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrichEvent'
type MockCommonDataProvider_EnrichEvent_Call struct {
	*mock.Call
}

// EnrichEvent is a helper method to define mock.On call
//   - _a0 *beat.Event
func (_e *MockCommonDataProvider_Expecter) EnrichEvent(_a0 interface{}) *MockCommonDataProvider_EnrichEvent_Call {
	return &MockCommonDataProvider_EnrichEvent_Call{Call: _e.mock.On("EnrichEvent", _a0)}
}

func (_c *MockCommonDataProvider_EnrichEvent_Call) Run(run func(_a0 *beat.Event)) *MockCommonDataProvider_EnrichEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*beat.Event))
	})
	return _c
}

func (_c *MockCommonDataProvider_EnrichEvent_Call) Return(_a0 error) *MockCommonDataProvider_EnrichEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

// FetchData provides a mock function with given fields: resource, id
func (_m *MockCommonDataProvider) FetchData(resource string, id string) (types.Data, error) {
	ret := _m.Called(resource, id)

	var r0 types.Data
	if rf, ok := ret.Get(0).(func(string, string) types.Data); ok {
		r0 = rf(resource, id)
	} else {
		r0 = ret.Get(0).(types.Data)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resource, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommonDataProvider_FetchData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchData'
type MockCommonDataProvider_FetchData_Call struct {
	*mock.Call
}

// FetchData is a helper method to define mock.On call
//   - resource string
//   - id string
func (_e *MockCommonDataProvider_Expecter) FetchData(resource interface{}, id interface{}) *MockCommonDataProvider_FetchData_Call {
	return &MockCommonDataProvider_FetchData_Call{Call: _e.mock.On("FetchData", resource, id)}
}

func (_c *MockCommonDataProvider_FetchData_Call) Run(run func(resource string, id string)) *MockCommonDataProvider_FetchData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCommonDataProvider_FetchData_Call) Return(_a0 types.Data, _a1 error) *MockCommonDataProvider_FetchData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockCommonDataProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCommonDataProvider creates a new instance of MockCommonDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCommonDataProvider(t mockConstructorTestingTNewMockCommonDataProvider) *MockCommonDataProvider {
	mock := &MockCommonDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
