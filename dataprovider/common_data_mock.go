// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package dataprovider

import (
	beat "github.com/elastic/beats/v7/libbeat/beat"
	fetching "github.com/elastic/cloudbeat/resources/fetching"

	mock "github.com/stretchr/testify/mock"

	version "github.com/elastic/cloudbeat/version"
)

// MockCommonData is an autogenerated mock type for the CommonData type
type MockCommonData struct {
	mock.Mock
}

type MockCommonData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommonData) EXPECT() *MockCommonData_Expecter {
	return &MockCommonData_Expecter{mock: &_m.Mock}
}

// EnrichEvent provides a mock function with given fields: _a0
func (_m *MockCommonData) EnrichEvent(_a0 beat.Event) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(beat.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommonData_EnrichEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrichEvent'
type MockCommonData_EnrichEvent_Call struct {
	*mock.Call
}

// EnrichEvent is a helper method to define mock.On call
//   - _a0 beat.Event
func (_e *MockCommonData_Expecter) EnrichEvent(_a0 interface{}) *MockCommonData_EnrichEvent_Call {
	return &MockCommonData_EnrichEvent_Call{Call: _e.mock.On("EnrichEvent", _a0)}
}

func (_c *MockCommonData_EnrichEvent_Call) Run(run func(_a0 beat.Event)) *MockCommonData_EnrichEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(beat.Event))
	})
	return _c
}

func (_c *MockCommonData_EnrichEvent_Call) Return(_a0 error) *MockCommonData_EnrichEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetResourceId provides a mock function with given fields: _a0
func (_m *MockCommonData) GetResourceId(_a0 fetching.ResourceMetadata) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(fetching.ResourceMetadata) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommonData_GetResourceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceId'
type MockCommonData_GetResourceId_Call struct {
	*mock.Call
}

// GetResourceId is a helper method to define mock.On call
//   - _a0 fetching.ResourceMetadata
func (_e *MockCommonData_Expecter) GetResourceId(_a0 interface{}) *MockCommonData_GetResourceId_Call {
	return &MockCommonData_GetResourceId_Call{Call: _e.mock.On("GetResourceId", _a0)}
}

func (_c *MockCommonData_GetResourceId_Call) Run(run func(_a0 fetching.ResourceMetadata)) *MockCommonData_GetResourceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fetching.ResourceMetadata))
	})
	return _c
}

func (_c *MockCommonData_GetResourceId_Call) Return(_a0 string) *MockCommonData_GetResourceId_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetVersionInfo provides a mock function with given fields:
func (_m *MockCommonData) GetVersionInfo() version.CloudbeatVersionInfo {
	ret := _m.Called()

	var r0 version.CloudbeatVersionInfo
	if rf, ok := ret.Get(0).(func() version.CloudbeatVersionInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(version.CloudbeatVersionInfo)
	}

	return r0
}

// MockCommonData_GetVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionInfo'
type MockCommonData_GetVersionInfo_Call struct {
	*mock.Call
}

// GetVersionInfo is a helper method to define mock.On call
func (_e *MockCommonData_Expecter) GetVersionInfo() *MockCommonData_GetVersionInfo_Call {
	return &MockCommonData_GetVersionInfo_Call{Call: _e.mock.On("GetVersionInfo")}
}

func (_c *MockCommonData_GetVersionInfo_Call) Run(run func()) *MockCommonData_GetVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommonData_GetVersionInfo_Call) Return(_a0 version.CloudbeatVersionInfo) *MockCommonData_GetVersionInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockCommonData interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCommonData creates a new instance of MockCommonData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCommonData(t mockConstructorTestingTNewMockCommonData) *MockCommonData {
	mock := &MockCommonData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
