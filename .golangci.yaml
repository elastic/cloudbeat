version: "2"
linters:
  enable:
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    - errcheck
    - errname
    - exhaustive
    - exhaustruct
    - exptostd
    - fatcontext
    - gocritic
    - gocyclo
    - gomodguard
    - govet
    - iface
    - ineffassign
    - makezero
    - misspell
    - nilerr
    - nilnesserr
    - nolintlint
    - prealloc
    - predeclared
    - reassign
    - recvcheck
    - revive
    - staticcheck
    - testifylint
    - unconvert
    - unparam
    - unused
    - usetesting
    - wastedassign
    - whitespace
  settings:
    exhaustive:
      default-signifies-exhaustive: true
    exhaustruct:
      include:
        - .*cloudbeat.*fetching.ResourceInfo
        - .*cloudbeat.*fetching.fetchers.*
        # Check that individual benchmarks always have their dependencies initialized
        - .*cloudbeat.*flavors.benchmark.*
        - .*cloudbeat.*governance.Subscription
        - .*cloudbeat.*governance.ManagementGroup
      exclude:
        - .*cloudbeat.*fetching.fetchers.k8s.FileCommonData
        - .*cloudbeat.*fetching.fetchers.k8s.ProcCommonData
        - .*cloudbeat.*fetching.fetchers.*<anonymous>
        - .*cloudbeat.*flavors.benchmark.*<anonymous>
    gocritic:
      settings:
        ifElseChain:
          minThreshold: 3
    gomodguard:
      blocked:
        modules:
          - github.com/pkg/errors:
              recommendations:
                - errors
              reason: Package is deprecated
    govet:
      disable:
        - fieldalignment
      enable-all: true
      settings:
        printf:
          funcs:
            - Infof
            - Debugf
            - Warnf
            - Errorf
            - Fatalf
            - Panicf
            - DPanicf
    prealloc:
      simple: true
      range-loops: true
      for-loops: false
    revive:
      enable-all-rules: true
      rules:
        - name: cognitive-complexity
          arguments:
            - 30
        - name: cyclomatic
          arguments:
            - 15
        - name: unhandled-error
          arguments:
            - bytes.Buffer.WriteString # Always returns nil error
        # blank-imports: Warns about blank imports that are not in the main package
        # This is a useful rule for detecting unused imports and side-effect imports
        # Note: This may require careful review of blank imports for side effects
        - name: blank-imports
        # confusing-naming: Warns about methods with names that differ only by capitalization
        # This is generally a good practice but can be too restrictive for existing APIs
        # Keeping disabled to avoid breaking changes to public interfaces
        - name: confusing-naming
          disabled: true
        # exported: Requires comments for exported functions/types
        # This would require massive documentation changes across the codebase
        # Keeping disabled to avoid forcing documentation of all exported identifiers
        - name: exported
          disabled: true
        # function-length: Enforces maximum function length
        # This would require refactoring many existing functions
        # Keeping disabled to avoid forcing architectural changes
        - name: function-length
          disabled: true
        # get-return: Warns about getters that return more than one value
        # This is a good practice for getter methods to keep them simple
        # Enabling as violations are usually easy to fix
        - name: get-return
        # import-alias-naming: Enforces naming conventions for import aliases
        # This can be helpful for consistency but may require many changes
        # Keeping disabled to avoid forcing import alias changes across codebase
        - name: import-alias-naming
          disabled: true
        # import-shadowing: Warns about imports that shadow package names
        # This is a good practice and violations are usually easy to fix
        # Enabling as it helps avoid confusing code
        - name: import-shadowing
        # unchecked-type-assertion: Warns about type assertions without checking the second return value
        # This is important for runtime safety and should be enabled
        # May require some fixes but improves code safety
        - name: unchecked-type-assertion
        # var-naming: Enforces variable naming conventions
        # This can be quite pedantic and require many changes to existing code
        # Keeping disabled to avoid forcing variable name changes across codebase
        - name: var-naming
          disabled: true
        # add-constant: Suggests adding constants for repeated values
        # Disabled as agreed - can be overly pedantic and force unnecessary constants
        - name: add-constant
          disabled: true
        # bare-return: Warns about bare returns in functions with named return values
        # Disabled as agreed - bare returns can be acceptable in short functions
        - name: bare-return
          disabled: true
        # line-length-limit: Enforces maximum line length
        # Disabled as agreed - handled by other formatters and can be too restrictive
        - name: line-length-limit
          disabled: true
        # max-public-structs: Limits the number of public structs per file
        # Disabled as agreed - can be too restrictive for legitimate use cases
        - name: max-public-structs
          disabled: true
        # unused-receiver: Warns about unused receivers in methods
        # Disabled as agreed - can flag legitimate interface implementations
        - name: unused-receiver
          disabled: true
        # enforce-map-style: Enforces consistent map initialization style
        # This rule helps maintain consistency but can be quite pedantic
        # Disabled to avoid forcing style changes across large codebase
        - name: enforce-map-style
          disabled: true
        # enforce-slice-style: Enforces consistent slice initialization style  
        # This rule helps maintain consistency but can be quite pedantic
        # Disabled to avoid forcing style changes across large codebase
        - name: enforce-slice-style
          disabled: true
    staticcheck:
      checks:
        - "all"
        - "-QF1008"
        - "-ST1000"
        - "-ST1003"
        - "-ST1016"
        - "-ST1020"
        - "-ST1021"
        - "-ST1022"
    unused:
      field-writes-are-uses: false
      exported-fields-are-used: false
      local-variables-are-used: false
    usetesting:
      os-setenv: true
      os-temp-dir: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - prealloc
        path: _test\.go
      - linters:
          - prealloc
        path: resources/utils/testhelper/*.go
      # logp deprecated setup functions but has no alternative to observing logs in tests
      - linters:
          - staticcheck
        text: "SA1019: logp.(Development|Testing)Setup"
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gci
    - gofmt
  settings:
    gci:
      sections:
        - standard
        - default
        - prefix(github.com/elastic/cloudbeat)
      custom-order: false
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
