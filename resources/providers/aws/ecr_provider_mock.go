// Code generated by mockery v2.10.4. DO NOT EDIT.

package aws

import (
	context "context"

	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	mock "github.com/stretchr/testify/mock"
)

// MockedEcrRepositoryDescriber is an autogenerated mock type for the EcrRepositoryDescriber type
type MockedEcrRepositoryDescriber struct {
	mock.Mock
}

type MockEcrRepositoryDescriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockedEcrRepositoryDescriber) EXPECT() *MockEcrRepositoryDescriber_Expecter {
	return &MockEcrRepositoryDescriber_Expecter{mock: &_m.Mock}
}

// DescribeRepositories provides a mock function with given fields: ctx, repoNames
func (_m *MockedEcrRepositoryDescriber) DescribeRepositories(ctx context.Context, repoNames []string) ([]ecr.Repository, error) {
	ret := _m.Called(ctx, repoNames)

	var r0 []ecr.Repository
	if rf, ok := ret.Get(0).(func(context.Context, []string) []ecr.Repository); ok {
		r0 = rf(ctx, repoNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ecr.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, repoNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEcrRepositoryDescriber_DescribeRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRepositories'
type MockEcrRepositoryDescriber_DescribeRepositories_Call struct {
	*mock.Call
}

// DescribeRepositories is a helper method to define mock.On call
//  - ctx context.Context
//  - repoNames []string
func (_e *MockEcrRepositoryDescriber_Expecter) DescribeRepositories(ctx interface{}, repoNames interface{}) *MockEcrRepositoryDescriber_DescribeRepositories_Call {
	return &MockEcrRepositoryDescriber_DescribeRepositories_Call{Call: _e.mock.On("DescribeRepositories", ctx, repoNames)}
}

func (_c *MockEcrRepositoryDescriber_DescribeRepositories_Call) Run(run func(ctx context.Context, repoNames []string)) *MockEcrRepositoryDescriber_DescribeRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockEcrRepositoryDescriber_DescribeRepositories_Call) Return(_a0 []ecr.Repository, _a1 error) *MockEcrRepositoryDescriber_DescribeRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
