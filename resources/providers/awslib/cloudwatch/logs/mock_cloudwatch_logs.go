// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package logs

import (
	context "context"

	types "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
	mock "github.com/stretchr/testify/mock"
)

// MockCloudwatchLogs is an autogenerated mock type for the CloudwatchLogs type
type MockCloudwatchLogs struct {
	mock.Mock
}

type MockCloudwatchLogs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudwatchLogs) EXPECT() *MockCloudwatchLogs_Expecter {
	return &MockCloudwatchLogs_Expecter{mock: &_m.Mock}
}

// DescribeMetricFilters provides a mock function with given fields: ctx, region, logGroup
func (_m *MockCloudwatchLogs) DescribeMetricFilters(ctx context.Context, region *string, logGroup string) ([]types.MetricFilter, error) {
	ret := _m.Called(ctx, region, logGroup)

	var r0 []types.MetricFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, string) ([]types.MetricFilter, error)); ok {
		return rf(ctx, region, logGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, string) []types.MetricFilter); ok {
		r0 = rf(ctx, region, logGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MetricFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, string) error); ok {
		r1 = rf(ctx, region, logGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudwatchLogs_DescribeMetricFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFilters'
type MockCloudwatchLogs_DescribeMetricFilters_Call struct {
	*mock.Call
}

// DescribeMetricFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - region *string
//   - logGroup string
func (_e *MockCloudwatchLogs_Expecter) DescribeMetricFilters(ctx interface{}, region interface{}, logGroup interface{}) *MockCloudwatchLogs_DescribeMetricFilters_Call {
	return &MockCloudwatchLogs_DescribeMetricFilters_Call{Call: _e.mock.On("DescribeMetricFilters", ctx, region, logGroup)}
}

func (_c *MockCloudwatchLogs_DescribeMetricFilters_Call) Run(run func(ctx context.Context, region *string, logGroup string)) *MockCloudwatchLogs_DescribeMetricFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(string))
	})
	return _c
}

func (_c *MockCloudwatchLogs_DescribeMetricFilters_Call) Return(_a0 []types.MetricFilter, _a1 error) *MockCloudwatchLogs_DescribeMetricFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudwatchLogs_DescribeMetricFilters_Call) RunAndReturn(run func(context.Context, *string, string) ([]types.MetricFilter, error)) *MockCloudwatchLogs_DescribeMetricFilters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudwatchLogs creates a new instance of MockCloudwatchLogs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudwatchLogs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudwatchLogs {
	mock := &MockCloudwatchLogs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
