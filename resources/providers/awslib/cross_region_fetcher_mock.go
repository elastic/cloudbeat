// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package awslib

import mock "github.com/stretchr/testify/mock"

// MockCrossRegionFetcher is an autogenerated mock type for the CrossRegionFetcher type
type MockCrossRegionFetcher[T interface{}] struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: fetcher
func (_m *MockCrossRegionFetcher[T]) Fetch(fetcher func(T) ([]AwsResource, error)) ([]AwsResource, error) {
	ret := _m.Called(fetcher)

	var r0 []AwsResource
	if rf, ok := ret.Get(0).(func(func(T) ([]AwsResource, error)) []AwsResource); ok {
		r0 = rf(fetcher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AwsResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(T) ([]AwsResource, error)) error); ok {
		r1 = rf(fetcher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionsClientMap provides a mock function with given fields:
func (_m *MockCrossRegionFetcher[T]) GetMultiRegionsClientMap() map[string]T {
	ret := _m.Called()

	var r0 map[string]T
	if rf, ok := ret.Get(0).(func() map[string]T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]T)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockCrossRegionFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCrossRegionFetcher creates a new instance of MockCrossRegionFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCrossRegionFetcher[T interface{}](t mockConstructorTestingTNewMockCrossRegionFetcher) *MockCrossRegionFetcher[T] {
	mock := &MockCrossRegionFetcher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
