// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.24.0. DO NOT EDIT.

package awslib

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockElbLoadBalancerDescriber is an autogenerated mock type for the ElbLoadBalancerDescriber type
type MockElbLoadBalancerDescriber struct {
	mock.Mock
}

type MockElbLoadBalancerDescriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockElbLoadBalancerDescriber) EXPECT() *MockElbLoadBalancerDescriber_Expecter {
	return &MockElbLoadBalancerDescriber_Expecter{mock: &_m.Mock}
}

// DescribeLoadBalancer provides a mock function with given fields: ctx, balancersNames
func (_m *MockElbLoadBalancerDescriber) DescribeLoadBalancer(ctx context.Context, balancersNames []string) (ElbLoadBalancerDescriptions, error) {
	ret := _m.Called(ctx, balancersNames)

	var r0 ElbLoadBalancerDescriptions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (ElbLoadBalancerDescriptions, error)); ok {
		return rf(ctx, balancersNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) ElbLoadBalancerDescriptions); ok {
		r0 = rf(ctx, balancersNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ElbLoadBalancerDescriptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, balancersNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLoadBalancer'
type MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call struct {
	*mock.Call
}

// DescribeLoadBalancer is a helper method to define mock.On call
//   - ctx context.Context
//   - balancersNames []string
func (_e *MockElbLoadBalancerDescriber_Expecter) DescribeLoadBalancer(ctx interface{}, balancersNames interface{}) *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call {
	return &MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call{Call: _e.mock.On("DescribeLoadBalancer", ctx, balancersNames)}
}

func (_c *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call) Run(run func(ctx context.Context, balancersNames []string)) *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call) Return(_a0 ElbLoadBalancerDescriptions, _a1 error) *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call) RunAndReturn(run func(context.Context, []string) (ElbLoadBalancerDescriptions, error)) *MockElbLoadBalancerDescriber_DescribeLoadBalancer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockElbLoadBalancerDescriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockElbLoadBalancerDescriber creates a new instance of MockElbLoadBalancerDescriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockElbLoadBalancerDescriber(t mockConstructorTestingTNewMockElbLoadBalancerDescriber) *MockElbLoadBalancerDescriber {
	mock := &MockElbLoadBalancerDescriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
