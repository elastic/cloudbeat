// Code generated by mockery v2.13.1. DO NOT EDIT.

package awslib

import (
	aws "github.com/aws/aws-sdk-go-v2/aws"
	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"
)

// MockCrossRegionUtil is an autogenerated mock type for the CrossRegionUtil type
type MockCrossRegionUtil[T interface{}] struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: fetcher
func (_m *MockCrossRegionUtil[T]) Fetch(fetcher func(T) ([]AwsResource, error)) ([]AwsResource, error) {
	ret := _m.Called(fetcher)

	var r0 []AwsResource
	if rf, ok := ret.Get(0).(func(func(T) ([]AwsResource, error)) []AwsResource); ok {
		r0 = rf(fetcher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AwsResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(T) ([]AwsResource, error)) error); ok {
		r1 = rf(fetcher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionsClientMap provides a mock function with given fields:
func (_m *MockCrossRegionUtil[T]) GetMultiRegionsClientMap() map[string]T {
	ret := _m.Called()

	var r0 map[string]T
	if rf, ok := ret.Get(0).(func() map[string]T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]T)
		}
	}

	return r0
}

// NewMultiRegionClients provides a mock function with given fields: client, cfg, factory, log
func (_m *MockCrossRegionUtil[T]) NewMultiRegionClients(client DescribeCloudRegions, cfg aws.Config, factory func(aws.Config) T, log *logp.Logger) *MultiRegionWrapper[T] {
	ret := _m.Called(client, cfg, factory, log)

	var r0 *MultiRegionWrapper[T]
	if rf, ok := ret.Get(0).(func(DescribeCloudRegions, aws.Config, func(aws.Config) T, *logp.Logger) *MultiRegionWrapper[T]); ok {
		r0 = rf(client, cfg, factory, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MultiRegionWrapper[T])
		}
	}

	return r0
}

type mockConstructorTestingTNewMockCrossRegionUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCrossRegionUtil creates a new instance of MockCrossRegionUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCrossRegionUtil[T interface{}](t mockConstructorTestingTNewMockCrossRegionUtil) *MockCrossRegionUtil[T] {
	mock := &MockCrossRegionUtil[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
