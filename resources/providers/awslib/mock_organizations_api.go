// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package awslib

import (
	context "context"

	organizations "github.com/aws/aws-sdk-go-v2/service/organizations"
	mock "github.com/stretchr/testify/mock"
)

// mockOrganizationsAPI is an autogenerated mock type for the organizationsAPI type
type mockOrganizationsAPI struct {
	mock.Mock
}

type mockOrganizationsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOrganizationsAPI) EXPECT() *mockOrganizationsAPI_Expecter {
	return &mockOrganizationsAPI_Expecter{mock: &_m.Mock}
}

// DescribeOrganizationalUnit provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockOrganizationsAPI) DescribeOrganizationalUnit(_a0 context.Context, _a1 *organizations.DescribeOrganizationalUnitInput, _a2 ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizations.DescribeOrganizationalUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.DescribeOrganizationalUnitOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeOrganizationalUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganizationsAPI_DescribeOrganizationalUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeOrganizationalUnit'
type mockOrganizationsAPI_DescribeOrganizationalUnit_Call struct {
	*mock.Call
}

// DescribeOrganizationalUnit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *organizations.DescribeOrganizationalUnitInput
//   - _a2 ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) DescribeOrganizationalUnit(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	return &mockOrganizationsAPI_DescribeOrganizationalUnit_Call{Call: _e.mock.On("DescribeOrganizationalUnit",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) Run(run func(_a0 context.Context, _a1 *organizations.DescribeOrganizationalUnitInput, _a2 ...func(*organizations.Options))) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*organizations.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*organizations.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*organizations.DescribeOrganizationalUnitInput), variadicArgs...)
	})
	return _c
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) Return(_a0 *organizations.DescribeOrganizationalUnitOutput, _a1 error) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganizationsAPI_DescribeOrganizationalUnit_Call) RunAndReturn(run func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error)) *mockOrganizationsAPI_DescribeOrganizationalUnit_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockOrganizationsAPI) ListAccounts(_a0 context.Context, _a1 *organizations.ListAccountsInput, _a2 ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizations.ListAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) *organizations.ListAccountsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganizationsAPI_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type mockOrganizationsAPI_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *organizations.ListAccountsInput
//   - _a2 ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) ListAccounts(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockOrganizationsAPI_ListAccounts_Call {
	return &mockOrganizationsAPI_ListAccounts_Call{Call: _e.mock.On("ListAccounts",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) Run(run func(_a0 context.Context, _a1 *organizations.ListAccountsInput, _a2 ...func(*organizations.Options))) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*organizations.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*organizations.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*organizations.ListAccountsInput), variadicArgs...)
	})
	return _c
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) Return(_a0 *organizations.ListAccountsOutput, _a1 error) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganizationsAPI_ListAccounts_Call) RunAndReturn(run func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error)) *mockOrganizationsAPI_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListParents provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockOrganizationsAPI) ListParents(_a0 context.Context, _a1 *organizations.ListParentsInput, _a2 ...func(*organizations.Options)) (*organizations.ListParentsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizations.ListParentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) (*organizations.ListParentsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) *organizations.ListParentsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListParentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganizationsAPI_ListParents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParents'
type mockOrganizationsAPI_ListParents_Call struct {
	*mock.Call
}

// ListParents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *organizations.ListParentsInput
//   - _a2 ...func(*organizations.Options)
func (_e *mockOrganizationsAPI_Expecter) ListParents(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockOrganizationsAPI_ListParents_Call {
	return &mockOrganizationsAPI_ListParents_Call{Call: _e.mock.On("ListParents",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockOrganizationsAPI_ListParents_Call) Run(run func(_a0 context.Context, _a1 *organizations.ListParentsInput, _a2 ...func(*organizations.Options))) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*organizations.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*organizations.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*organizations.ListParentsInput), variadicArgs...)
	})
	return _c
}

func (_c *mockOrganizationsAPI_ListParents_Call) Return(_a0 *organizations.ListParentsOutput, _a1 error) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganizationsAPI_ListParents_Call) RunAndReturn(run func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) (*organizations.ListParentsOutput, error)) *mockOrganizationsAPI_ListParents_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOrganizationsAPI creates a new instance of mockOrganizationsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOrganizationsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOrganizationsAPI {
	mock := &mockOrganizationsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
