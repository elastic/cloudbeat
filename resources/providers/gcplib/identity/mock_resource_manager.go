// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.24.0. DO NOT EDIT.

package gcplib

import (
	context "context"

	cloudresourcemanager "google.golang.org/api/cloudresourcemanager/v3"

	mock "github.com/stretchr/testify/mock"
)

// MockResourceManager is an autogenerated mock type for the ResourceManager type
type MockResourceManager struct {
	mock.Mock
}

type MockResourceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceManager) EXPECT() *MockResourceManager_Expecter {
	return &MockResourceManager_Expecter{mock: &_m.Mock}
}

// foldersGet provides a mock function with given fields: _a0, _a1
func (_m *MockResourceManager) foldersGet(_a0 context.Context, _a1 string) (*cloudresourcemanager.Folder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cloudresourcemanager.Folder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cloudresourcemanager.Folder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cloudresourcemanager.Folder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudresourcemanager.Folder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceManager_foldersGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'foldersGet'
type MockResourceManager_foldersGet_Call struct {
	*mock.Call
}

// foldersGet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockResourceManager_Expecter) foldersGet(_a0 interface{}, _a1 interface{}) *MockResourceManager_foldersGet_Call {
	return &MockResourceManager_foldersGet_Call{Call: _e.mock.On("foldersGet", _a0, _a1)}
}

func (_c *MockResourceManager_foldersGet_Call) Run(run func(_a0 context.Context, _a1 string)) *MockResourceManager_foldersGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceManager_foldersGet_Call) Return(_a0 *cloudresourcemanager.Folder, _a1 error) *MockResourceManager_foldersGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceManager_foldersGet_Call) RunAndReturn(run func(context.Context, string) (*cloudresourcemanager.Folder, error)) *MockResourceManager_foldersGet_Call {
	_c.Call.Return(run)
	return _c
}

// organizationsGet provides a mock function with given fields: _a0, _a1
func (_m *MockResourceManager) organizationsGet(_a0 context.Context, _a1 string) (*cloudresourcemanager.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cloudresourcemanager.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cloudresourcemanager.Organization, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cloudresourcemanager.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudresourcemanager.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceManager_organizationsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'organizationsGet'
type MockResourceManager_organizationsGet_Call struct {
	*mock.Call
}

// organizationsGet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockResourceManager_Expecter) organizationsGet(_a0 interface{}, _a1 interface{}) *MockResourceManager_organizationsGet_Call {
	return &MockResourceManager_organizationsGet_Call{Call: _e.mock.On("organizationsGet", _a0, _a1)}
}

func (_c *MockResourceManager_organizationsGet_Call) Run(run func(_a0 context.Context, _a1 string)) *MockResourceManager_organizationsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceManager_organizationsGet_Call) Return(_a0 *cloudresourcemanager.Organization, _a1 error) *MockResourceManager_organizationsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceManager_organizationsGet_Call) RunAndReturn(run func(context.Context, string) (*cloudresourcemanager.Organization, error)) *MockResourceManager_organizationsGet_Call {
	_c.Call.Return(run)
	return _c
}

// organizationsSearch provides a mock function with given fields: _a0
func (_m *MockResourceManager) organizationsSearch(_a0 context.Context) (*cloudresourcemanager.Organization, error) {
	ret := _m.Called(_a0)

	var r0 *cloudresourcemanager.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*cloudresourcemanager.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *cloudresourcemanager.Organization); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudresourcemanager.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceManager_organizationsSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'organizationsSearch'
type MockResourceManager_organizationsSearch_Call struct {
	*mock.Call
}

// organizationsSearch is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockResourceManager_Expecter) organizationsSearch(_a0 interface{}) *MockResourceManager_organizationsSearch_Call {
	return &MockResourceManager_organizationsSearch_Call{Call: _e.mock.On("organizationsSearch", _a0)}
}

func (_c *MockResourceManager_organizationsSearch_Call) Run(run func(_a0 context.Context)) *MockResourceManager_organizationsSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockResourceManager_organizationsSearch_Call) Return(_a0 *cloudresourcemanager.Organization, _a1 error) *MockResourceManager_organizationsSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceManager_organizationsSearch_Call) RunAndReturn(run func(context.Context) (*cloudresourcemanager.Organization, error)) *MockResourceManager_organizationsSearch_Call {
	_c.Call.Return(run)
	return _c
}

// projectsGet provides a mock function with given fields: _a0, _a1
func (_m *MockResourceManager) projectsGet(_a0 context.Context, _a1 string) (*cloudresourcemanager.Project, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cloudresourcemanager.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cloudresourcemanager.Project, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cloudresourcemanager.Project); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudresourcemanager.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceManager_projectsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'projectsGet'
type MockResourceManager_projectsGet_Call struct {
	*mock.Call
}

// projectsGet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockResourceManager_Expecter) projectsGet(_a0 interface{}, _a1 interface{}) *MockResourceManager_projectsGet_Call {
	return &MockResourceManager_projectsGet_Call{Call: _e.mock.On("projectsGet", _a0, _a1)}
}

func (_c *MockResourceManager_projectsGet_Call) Run(run func(_a0 context.Context, _a1 string)) *MockResourceManager_projectsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceManager_projectsGet_Call) Return(_a0 *cloudresourcemanager.Project, _a1 error) *MockResourceManager_projectsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceManager_projectsGet_Call) RunAndReturn(run func(context.Context, string) (*cloudresourcemanager.Project, error)) *MockResourceManager_projectsGet_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockResourceManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockResourceManager creates a new instance of MockResourceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockResourceManager(t mockConstructorTestingTNewMockResourceManager) *MockResourceManager {
	mock := &MockResourceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
