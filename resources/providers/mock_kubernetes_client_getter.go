// Code generated by mockery v2.13.1. DO NOT EDIT.

package providers

import (
	kubernetes "github.com/elastic/elastic-agent-autodiscover/kubernetes"
	logp "github.com/elastic/elastic-agent-libs/logp"
	client_gokubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"
)

// MockKubernetesClientGetter is an autogenerated mock type for the KubernetesClientGetter type
type MockKubernetesClientGetter struct {
	mock.Mock
}

type MockKubernetesClientGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubernetesClientGetter) EXPECT() *MockKubernetesClientGetter_Expecter {
	return &MockKubernetesClientGetter_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function with given fields: log, kubeConfig, options
func (_m *MockKubernetesClientGetter) GetClient(log *logp.Logger, kubeConfig string, options kubernetes.KubeClientOptions) (client_gokubernetes.Interface, error) {
	ret := _m.Called(log, kubeConfig, options)

	var r0 client_gokubernetes.Interface
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, kubernetes.KubeClientOptions) client_gokubernetes.Interface); ok {
		r0 = rf(log, kubeConfig, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client_gokubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logp.Logger, string, kubernetes.KubeClientOptions) error); ok {
		r1 = rf(log, kubeConfig, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKubernetesClientGetter_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockKubernetesClientGetter_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//  - log *logp.Logger
//  - kubeConfig string
//  - options kubernetes.KubeClientOptions
func (_e *MockKubernetesClientGetter_Expecter) GetClient(log interface{}, kubeConfig interface{}, options interface{}) *MockKubernetesClientGetter_GetClient_Call {
	return &MockKubernetesClientGetter_GetClient_Call{Call: _e.mock.On("GetClient", log, kubeConfig, options)}
}

func (_c *MockKubernetesClientGetter_GetClient_Call) Run(run func(log *logp.Logger, kubeConfig string, options kubernetes.KubeClientOptions)) *MockKubernetesClientGetter_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string), args[2].(kubernetes.KubeClientOptions))
	})
	return _c
}

func (_c *MockKubernetesClientGetter_GetClient_Call) Return(_a0 client_gokubernetes.Interface, _a1 error) *MockKubernetesClientGetter_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockKubernetesClientGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKubernetesClientGetter creates a new instance of MockKubernetesClientGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKubernetesClientGetter(t mockConstructorTestingTNewMockKubernetesClientGetter) *MockKubernetesClientGetter {
	mock := &MockKubernetesClientGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
