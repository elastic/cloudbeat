// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.24.0. DO NOT EDIT.

package fetchersManager

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStop is an autogenerated mock type for the Stop type
type MockStop struct {
	mock.Mock
}

type MockStop_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStop) EXPECT() *MockStop_Expecter {
	return &MockStop_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockStop) Execute(_a0 context.Context, _a1 time.Duration) {
	_m.Called(_a0, _a1)
}

// MockStop_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStop_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 time.Duration
func (_e *MockStop_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockStop_Execute_Call {
	return &MockStop_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockStop_Execute_Call) Run(run func(_a0 context.Context, _a1 time.Duration)) *MockStop_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockStop_Execute_Call) Return() *MockStop_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStop_Execute_Call) RunAndReturn(run func(context.Context, time.Duration)) *MockStop_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStop interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStop creates a new instance of MockStop. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStop(t mockConstructorTestingTNewMockStop) *MockStop {
	mock := &MockStop{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
