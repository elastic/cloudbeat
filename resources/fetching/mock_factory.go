// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.24.0. DO NOT EDIT.

package fetching

import (
	config "github.com/elastic/elastic-agent-libs/config"
	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"
)

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

type MockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactory) EXPECT() *MockFactory_Expecter {
	return &MockFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFactory) Create(_a0 *logp.Logger, _a1 *config.C, _a2 chan ResourceInfo) (Fetcher, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 Fetcher
	var r1 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, *config.C, chan ResourceInfo) (Fetcher, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(*logp.Logger, *config.C, chan ResourceInfo) Fetcher); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Fetcher)
		}
	}

	if rf, ok := ret.Get(1).(func(*logp.Logger, *config.C, chan ResourceInfo) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *logp.Logger
//   - _a1 *config.C
//   - _a2 chan ResourceInfo
func (_e *MockFactory_Expecter) Create(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockFactory_Create_Call {
	return &MockFactory_Create_Call{Call: _e.mock.On("Create", _a0, _a1, _a2)}
}

func (_c *MockFactory_Create_Call) Run(run func(_a0 *logp.Logger, _a1 *config.C, _a2 chan ResourceInfo)) *MockFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(*config.C), args[2].(chan ResourceInfo))
	})
	return _c
}

func (_c *MockFactory_Create_Call) Return(_a0 Fetcher, _a1 error) *MockFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFactory_Create_Call) RunAndReturn(run func(*logp.Logger, *config.C, chan ResourceInfo) (Fetcher, error)) *MockFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFactory(t mockConstructorTestingTNewMockFactory) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
