#!/usr/bin/env groovy
@Library('apm@current') _
pipeline {
  agent { label 'linux && immutable && debian-11' }
  environment {
    VAULT_ADDR=credentials('vault-addr')
    VAULT_ROLE_ID=credentials('apm-vault-role-id')
    VAULT_SECRET_ID=credentials('apm-vault-secret-id')
    REPO = 'cloudbeat'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    // NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = 'internal-ci-artifacts'
    JOB_GCS_CREDENTIALS = 'internal-ci-gcs-plugin'
    // CODECOV_SECRET = 'secret/apm-team/ci/cloudbeat-codecov'
    // ITS_PIPELINE = 'apm-integration-tests-selector-mbp/main'
    DIAGNOSTIC_INTERVAL = "${params.DIAGNOSTIC_INTERVAL}"
    ES_LOG_LEVEL = "${params.ES_LOG_LEVEL}"
    // DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
    // DOCKER_IMAGE = "${env.DOCKER_REGISTRY}/observability-ci/cloudbeat"
    // ONLY_DOCS = "false"
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '100', artifactNumToKeepStr: '30', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  // triggers {
  //   issueCommentTrigger("(${obltGitHubComments()}|^run\\W+(?:the\\W+)?(hey-apm|package|arm)\\W+tests|^/test|^/hey-apm|^/package)")
  // }
  parameters {
    booleanParam(name: 'Run_As_Main_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on main branch.')
    booleanParam(name: 'arm_ci', defaultValue: true, description: 'Enable ARM build')
    booleanParam(name: 'linux_ci', defaultValue: true, description: 'Enable Linux build')
    booleanParam(name: 'osx_ci', defaultValue: true, description: 'Enable OSX CI')
    booleanParam(name: 'windows_ci', defaultValue: true, description: 'Enable Windows CI')
    booleanParam(name: 'intake_ci', defaultValue: true, description: 'Enable test')
    booleanParam(name: 'test_ci', defaultValue: true, description: 'Enable test')
    booleanParam(name: 'test_sys_env_ci', defaultValue: true, description: 'Enable system and environment test')
    booleanParam(name: 'bench_ci', defaultValue: true, description: 'Enable benchmarks')
    booleanParam(name: 'release_ci', defaultValue: true, description: 'Enable build the release packages')
    booleanParam(name: 'its_ci', defaultValue: true, description: 'Enable async ITs')
    string(name: 'DIAGNOSTIC_INTERVAL', defaultValue: "0", description: 'Elasticsearch detailed logging every X seconds')
    string(name: 'ES_LOG_LEVEL', defaultValue: "error", description: 'Elasticsearch error level')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout') {
      environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        HOME = "${env.WORKSPACE}"
      }
      // options { skipDefaultCheckout() }
      steps {
        // pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", branch: 'jenkins-mage-package',
          repo: 'git@github.com:elastic/cloudbeat.git', credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
          shallow: false, reference: "/var/lib/jenkins/.git-references/${REPO}.git")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        // script {
        //   dir("${BASE_DIR}"){
        //     def regexps =[
        //       "^_beats.*",
        //       "^cloudbeat.yml",
        //       "^cloudbeat.docker.yml",
        //       "^magefile.go",
        //       "^ingest.*",
        //       "^packaging.*",
        //       "^vendor/github.com/elastic/beats.*"
        //     ]
        //     withGoEnv(){
        //       setEnvVar('APM_SERVER_VERSION', sh(label: 'Get beat version', script: 'make get-version', returnStdout: true)?.trim())
        //     }
        //     env.BEATS_UPDATED = isGitRegionMatch(patterns: regexps)
        //     // Skip all the stages except docs for PR's with asciidoc changes only
        //     whenTrue(isPR()) {
        //       setEnvVar('ONLY_DOCS', isGitRegionMatch(patterns: [ '.*\\.asciidoc' ], comparator: 'regexp', shouldMatchAll: true))
        //     }
        //   }
        // }
      }
    }
    /**
    Updating generated files for Beat.
    Checks the GO environment.
    Checks the Python environment.
    Checks YAML files are generated.
    Validate that all updates were committed.
    */
    stage('Intake') {
      options { skipDefaultCheckout() }
      environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        HOME = "${env.WORKSPACE}"
      }
      // when {
      //   beforeAgent true
      //   allOf {
      //     expression { return params.intake_ci }
      //     expression { return env.ONLY_DOCS == "false" }
      //   }
      // }
      steps {
        // withGithubNotify(context: 'Intake') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'Run intake', script: './.ci/scripts/intake.sh')
            }
          }
        }
      // }
    }
    stage('Build and Test'){
      failFast false
      parallel {
        /**
        Build on a linux environment.
        */
        stage('linux build') {
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            allOf {
              expression { return params.linux_ci }
            }
          }
          steps {
            // withGithubNotify(context: 'Build - Linux') {
              deleteDir()
              unstash 'source'
              dir(BASE_DIR){
                withMageEnv(){
                  retry(2) { // Retry in case there are any errors to avoid temporary glitches
                    sleep randomNumber(min: 5, max: 10)
                    sh(label: 'Linux build', script: './.ci/scripts/build.sh')
                  }
                }
              // }
            }
          }
        }
        /**
          Run unit tests and report junit results.
        */
        stage('Unit Test') {
          agent { label 'linux && immutable && debian-11' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin"
            HOME = "${env.WORKSPACE}"
            TEST_COVERAGE = "true"
          }
          when {
            beforeAgent true
            allOf {
              expression { return params.test_ci }
            }
          }
          steps {
            // withGithubNotify(context: 'Unit Tests', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                withMageEnv(){
                  sh(label: 'Run Unit tests', script: './.ci/scripts/unit-test.sh')
                }
              }
          }
        // post {
        //   always {
        //     dir("${BASE_DIR}/build"){
        //       publishHTML(target: [
        //         allowMissing: true,
        //         keepAll: true,
        //         reportDir: ".",
        //         reportFiles: 'TEST-*.html',
        //         reportName: 'Coverage-Sourcecode-Files',
        //         reportTitles: 'Coverage'])
        //       cobertura(autoUpdateHealth: false,
        //         autoUpdateStability: false,
        //         coberturaReportFile: "TEST-*_cov.xml",
        //         conditionalCoverageTargets: '70, 0, 0',
        //         failNoReports: false,
        //         failUnhealthy: false,
        //         failUnstable: false,
        //         lineCoverageTargets: '80, 0, 0',
        //         maxNumberOfBuilds: 0,
        //         methodCoverageTargets: '80, 0, 0',
        //         onlyStable: false,
        //         sourceEncoding: 'ASCII',
        //         zoomCoverageChart: false)
        //       junit(allowEmptyResults: true,
        //           keepLongStdio: true,
        //           testResults: "TEST-*.xml")
        //     }
        //     codecov(repo: env.REPO, basedir: "${BASE_DIR}", secret: "${CODECOV_SECRET}")
        //   }
        // }
        }
        /**
        Packages Artifacts & Publishes release
        */
        stage('Package&Publish') {
          agent { label 'linux && immutable && debian-11' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin"
            HOME = "${env.WORKSPACE}"
            SNAPSHOT = "true"
          }
          when {
            beforeAgent true
            allOf {
              expression { return params.release_ci }
              // expression { return env.ONLY_DOCS == "false" }
              // anyOf {
              //   branch 'main'
              //   branch pattern: '\\d+\\.\\d+', comparator: 'REGEXP'
              //   tag pattern: 'v\\d+\\.\\d+\\.\\d+.*', comparator: 'REGEXP'
              //   expression { return isPR() && env.BEATS_UPDATED != "false" }
              //   expression { return env.GITHUB_COMMENT?.contains('package tests') || env.GITHUB_COMMENT?.contains('/package')}
              //   expression { return params.Run_As_Main_Branch }
              // }
            }
          }
          stages {
            stage('Package') {
              steps {
                withGithubNotify(context: 'Package') {
                  deleteDir()
                  unstash 'source'
                  
                  dir("${BASE_DIR}"){
                    withMageEnv(){
                      sh(label: 'Build packages', script: './.ci/scripts/package.sh')
                      // dockerLogin(secret: env.DOCKER_SECRET, registry: env.DOCKER_REGISTRY)
                      // sh(label: 'Package & Push', script: "./.ci/scripts/package-docker-snapshot.sh ${env.GIT_BASE_COMMIT} ${env.DOCKER_IMAGE}")
                    }
                  }
                }
              }
            }
            stage('Publish') {
              environment {
                BUCKET_URI = """${isPR() ? "gs://${JOB_GCS_BUCKET}/cloudbeat/pull-requests/pr-${env.CHANGE_ID}" : "gs://${JOB_GCS_BUCKET}/cloudbeat/snapshots"}"""
              }
              steps {
                // Upload files to the default location
                googleStorageUpload(bucket: "${BUCKET_URI}",
                  credentialsId: "${JOB_GCS_CREDENTIALS}",
                  pathPrefix: "${BASE_DIR}/build/distributions/",
                  pattern: "${BASE_DIR}/build/distributions/**/*",
                  sharedPublicly: true,
                  showInline: true)

                // Copy those files to another location with the sha commit to test them afterward.
                googleStorageUpload(bucket: "gs://${JOB_GCS_BUCKET}/commits/${env.GIT_BASE_COMMIT}",
                  credentialsId: "${JOB_GCS_CREDENTIALS}",
                  pathPrefix: "${BASE_DIR}/build/distributions/",
                  pattern: "${BASE_DIR}/build/distributions/**/*",
                  sharedPublicly: true,
                  showInline: true)
              }
            }
          } // Package&Publish stages
        } // Package&Publish
      } // build&test stages
    } // build&test
  } // stages
  post {
    success {
    //   writeFile(file: 'beats-tester.properties',
    //             text: """\
    //             ## To be consumed by the beats-tester pipeline
    //             COMMIT=${env.GIT_BASE_COMMIT}
    //             APM_URL_BASE=https://storage.googleapis.com/${env.JOB_GCS_BUCKET}/commits/${env.GIT_BASE_COMMIT}
    //             VERSION=${env.APM_SERVER_VERSION}-SNAPSHOT""".stripIndent()) // stripIdent() requires '''/
    //   archiveArtifacts artifacts: 'beats-tester.properties'
      sh 'echo test'
    }
    // cleanup {
    //   notifyBuildResult()
    // }
  }
}