// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.13.1. DO NOT EDIT.

package leaderelection

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockK8SLeaderElectionService is an autogenerated mock type for the K8SLeaderElectionService type
type MockK8SLeaderElectionService struct {
	mock.Mock
}

type MockK8SLeaderElectionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8SLeaderElectionService) EXPECT() *MockK8SLeaderElectionService_Expecter {
	return &MockK8SLeaderElectionService_Expecter{mock: &_m.Mock}
}

// IsLeader provides a mock function with given fields:
func (_m *MockK8SLeaderElectionService) IsLeader() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockK8SLeaderElectionService_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type MockK8SLeaderElectionService_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
func (_e *MockK8SLeaderElectionService_Expecter) IsLeader() *MockK8SLeaderElectionService_IsLeader_Call {
	return &MockK8SLeaderElectionService_IsLeader_Call{Call: _e.mock.On("IsLeader")}
}

func (_c *MockK8SLeaderElectionService_IsLeader_Call) Run(run func()) *MockK8SLeaderElectionService_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockK8SLeaderElectionService_IsLeader_Call) Return(_a0 bool) *MockK8SLeaderElectionService_IsLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockK8SLeaderElectionService) Run(ctx context.Context) {
	_m.Called(ctx)
}

// MockK8SLeaderElectionService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockK8SLeaderElectionService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockK8SLeaderElectionService_Expecter) Run(ctx interface{}) *MockK8SLeaderElectionService_Run_Call {
	return &MockK8SLeaderElectionService_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockK8SLeaderElectionService_Run_Call) Run(run func(ctx context.Context)) *MockK8SLeaderElectionService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockK8SLeaderElectionService_Run_Call) Return() *MockK8SLeaderElectionService_Run_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockK8SLeaderElectionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockK8SLeaderElectionService creates a new instance of MockK8SLeaderElectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockK8SLeaderElectionService(t mockConstructorTestingTNewMockK8SLeaderElectionService) *MockK8SLeaderElectionService {
	mock := &MockK8SLeaderElectionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
