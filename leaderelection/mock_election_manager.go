// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Config is put into a different package to prevent cyclic imports in case
// it is needed in several locations

// Code generated by mockery v2.13.1. DO NOT EDIT.

package leaderelection

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockElectionManager is an autogenerated mock type for the ElectionManager type
type MockElectionManager struct {
	mock.Mock
}

type MockElectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockElectionManager) EXPECT() *MockElectionManager_Expecter {
	return &MockElectionManager_Expecter{mock: &_m.Mock}
}

// IsLeader provides a mock function with given fields:
func (_m *MockElectionManager) IsLeader() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockElectionManager_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type MockElectionManager_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
func (_e *MockElectionManager_Expecter) IsLeader() *MockElectionManager_IsLeader_Call {
	return &MockElectionManager_IsLeader_Call{Call: _e.mock.On("IsLeader")}
}

func (_c *MockElectionManager_IsLeader_Call) Run(run func()) *MockElectionManager_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockElectionManager_IsLeader_Call) Return(_a0 bool) *MockElectionManager_IsLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

// Run provides a mock function with given fields: onNewLeader
func (_m *MockElectionManager) Run(onNewLeader func(context.Context) error) error {
	ret := _m.Called(onNewLeader)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context) error) error); ok {
		r0 = rf(onNewLeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElectionManager_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockElectionManager_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//  - onNewLeader func(context.Context) error
func (_e *MockElectionManager_Expecter) Run(onNewLeader interface{}) *MockElectionManager_Run_Call {
	return &MockElectionManager_Run_Call{Call: _e.mock.On("Run", onNewLeader)}
}

func (_c *MockElectionManager_Run_Call) Run(run func(onNewLeader func(context.Context) error)) *MockElectionManager_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context) error))
	})
	return _c
}

func (_c *MockElectionManager_Run_Call) Return(_a0 error) *MockElectionManager_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockElectionManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockElectionManager creates a new instance of MockElectionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockElectionManager(t mockConstructorTestingTNewMockElectionManager) *MockElectionManager {
	mock := &MockElectionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
