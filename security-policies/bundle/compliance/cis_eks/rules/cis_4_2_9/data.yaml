metadata:
  id: db58a1e4-de58-5899-bee8-f6ced89d6f80
  name: Minimize the admission of containers with capabilities assigned
  profile_applicability: '* Level 2'
  description: Do not generally permit containers with capabilities
  rationale: |-
    Containers run with a default set of capabilities as assigned by the Container Runtime.
    Capabilities are parts of the rights generally granted on a Linux system to the root user.

    In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.
  audit: |-
    Get the set of PSPs with the following command:

    ```
    kubectl get psp
    ```

    For each PSP, check whether capabilities have been forbidden:

    ```
    kubectl get psp <name> -o=jsonpath='{.spec.requiredDropCapabilities}'
    ```
  remediation: |-
    Review the use of capabilites in applications runnning on your cluster.
    Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.
  impact: Pods with containers require capabilities to operate will not be permitted.
  default_value: |
    By default, PodSecurityPolicies are not defined.
  references: |-
    1. https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies
    2. https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/
  section: Pod Security Policies
  version: '1.0'
  tags:
  - CIS
  - EKS
  - CIS 4.2.9
  - Pod Security Policies
  benchmark:
    name: CIS Amazon Elastic Kubernetes Service (EKS)
    version: v1.0.1
    id: cis_eks
    rule_number: 4.2.9
    posture_type: kspm
