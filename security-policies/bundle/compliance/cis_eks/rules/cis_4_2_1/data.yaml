metadata:
  id: cd05adf8-d0fe-54b6-b1a0-93cf02bcec72
  name: Minimize the admission of privileged containers
  profile_applicability: '* Level 1'
  description: |-
    Do not generally permit containers to be run with the `securityContext.privileged` flag set to `true`.
  rationale: |-
    Privileged containers have access to all Linux Kernel capabilities and devices.
    A container running with full privileges can do almost everything that the host can do.
    This flag exists to allow special use-cases, like manipulating the network stack and accessing devices.


    There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers.


    If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.
  audit: |-
    Get the set of PSPs with the following command:

    ```
    kubectl get psp
    ```

    For each PSP, check whether privileged is enabled:

    ```
    kubectl get psp -o json
    ```

    Verify that there is at least one PSP which does not return `true`.

    `kubectl get psp <name> -o=jsonpath='{.spec.privileged}'`
  remediation: |-
    Create a PSP as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.
  impact: 'Pods defined with `spec.containers[].securityContext.privileged: true`
    will not be permitted.'
  default_value: |
    By default, when you provision an EKS cluster, a pod security policy called
    eks.privileged is automatically created. The manifest for that policy appears below:
    ```
    apiVersion: extensions/v1beta1
    kind: PodSecurityPolicy
    metadata:
    annotations:
    kubernetes.io/description: privileged allows full unrestricted access to
    pod features,
    as if the PodSecurityPolicy controller was not enabled.
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    labels:
    eks.amazonaws.com/component: pod-security-policy
    kubernetes.io/cluster-service: "true"
    name: eks.privileged
    spec:
    allowPrivilegeEscalation: true
    allowedCapabilities:
    - '*'
    fsGroup:
    rule: RunAsAny
    hostIPC: true
    hostNetwork: true
    hostPID: true
    hostPorts:
    - max: 65535
    min: 0
    privileged: true
    runAsUser:
    rule: RunAsAny
    seLinux:
    rule: RunAsAny
    supplementalGroups:
    rule: RunAsAny
    volumes:
    - '*'
    ```
  references: |-
    1. https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies
    2. https://aws.github.io/aws-eks-best-practices/pods/#restrict-the-containers-that-can-run-as-privileged
  section: Pod Security Policies
  version: '1.0'
  tags:
  - CIS
  - EKS
  - CIS 4.2.1
  - Pod Security Policies
  benchmark:
    name: CIS Amazon Elastic Kubernetes Service (EKS)
    version: v1.0.1
    id: cis_eks
    rule_number: 4.2.1
    posture_type: kspm
