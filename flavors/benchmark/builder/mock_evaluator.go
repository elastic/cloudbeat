// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.37.1. DO NOT EDIT.

package builder

import (
	context "context"

	evaluator "github.com/elastic/cloudbeat/evaluator"
	fetching "github.com/elastic/cloudbeat/resources/fetching"

	mock "github.com/stretchr/testify/mock"
)

// MockEvaluator is an autogenerated mock type for the Evaluator type
type MockEvaluator struct {
	mock.Mock
}

type MockEvaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvaluator) EXPECT() *MockEvaluator_Expecter {
	return &MockEvaluator_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function with given fields: ctx, resource
func (_m *MockEvaluator) Eval(ctx context.Context, resource fetching.ResourceInfo) (evaluator.EventData, error) {
	ret := _m.Called(ctx, resource)

	var r0 evaluator.EventData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, fetching.ResourceInfo) (evaluator.EventData, error)); ok {
		return rf(ctx, resource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, fetching.ResourceInfo) evaluator.EventData); ok {
		r0 = rf(ctx, resource)
	} else {
		r0 = ret.Get(0).(evaluator.EventData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, fetching.ResourceInfo) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvaluator_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type MockEvaluator_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - ctx context.Context
//   - resource fetching.ResourceInfo
func (_e *MockEvaluator_Expecter) Eval(ctx interface{}, resource interface{}) *MockEvaluator_Eval_Call {
	return &MockEvaluator_Eval_Call{Call: _e.mock.On("Eval", ctx, resource)}
}

func (_c *MockEvaluator_Eval_Call) Run(run func(ctx context.Context, resource fetching.ResourceInfo)) *MockEvaluator_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(fetching.ResourceInfo))
	})
	return _c
}

func (_c *MockEvaluator_Eval_Call) Return(_a0 evaluator.EventData, _a1 error) *MockEvaluator_Eval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvaluator_Eval_Call) RunAndReturn(run func(context.Context, fetching.ResourceInfo) (evaluator.EventData, error)) *MockEvaluator_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEvaluator creates a new instance of MockEvaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvaluator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvaluator {
	mock := &MockEvaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
