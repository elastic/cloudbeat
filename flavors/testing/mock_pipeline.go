// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package testing

import (
	beat "github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"
)

// MockPipeline is an autogenerated mock type for the Pipeline type
type MockPipeline struct {
	mock.Mock
}

type MockPipeline_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPipeline) EXPECT() *MockPipeline_Expecter {
	return &MockPipeline_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *MockPipeline) Connect() (beat.Client, error) {
	ret := _m.Called()

	var r0 beat.Client
	if rf, ok := ret.Get(0).(func() beat.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(beat.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipeline_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockPipeline_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockPipeline_Expecter) Connect() *MockPipeline_Connect_Call {
	return &MockPipeline_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockPipeline_Connect_Call) Run(run func()) *MockPipeline_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPipeline_Connect_Call) Return(_a0 beat.Client, _a1 error) *MockPipeline_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ConnectWith provides a mock function with given fields: _a0
func (_m *MockPipeline) ConnectWith(_a0 beat.ClientConfig) (beat.Client, error) {
	ret := _m.Called(_a0)

	var r0 beat.Client
	if rf, ok := ret.Get(0).(func(beat.ClientConfig) beat.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(beat.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(beat.ClientConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipeline_ConnectWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectWith'
type MockPipeline_ConnectWith_Call struct {
	*mock.Call
}

// ConnectWith is a helper method to define mock.On call
//   - _a0 beat.ClientConfig
func (_e *MockPipeline_Expecter) ConnectWith(_a0 interface{}) *MockPipeline_ConnectWith_Call {
	return &MockPipeline_ConnectWith_Call{Call: _e.mock.On("ConnectWith", _a0)}
}

func (_c *MockPipeline_ConnectWith_Call) Run(run func(_a0 beat.ClientConfig)) *MockPipeline_ConnectWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(beat.ClientConfig))
	})
	return _c
}

func (_c *MockPipeline_ConnectWith_Call) Return(_a0 beat.Client, _a1 error) *MockPipeline_ConnectWith_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockPipeline interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPipeline creates a new instance of MockPipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPipeline(t mockConstructorTestingTNewMockPipeline) *MockPipeline {
	mock := &MockPipeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
