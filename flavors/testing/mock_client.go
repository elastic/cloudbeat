// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package testing

import (
	beat "github.com/elastic/beats/v7/libbeat/beat"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(_a0 error) *MockClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// Publish provides a mock function with given fields: _a0
func (_m *MockClient) Publish(_a0 beat.Event) {
	_m.Called(_a0)
}

// MockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 beat.Event
func (_e *MockClient_Expecter) Publish(_a0 interface{}) *MockClient_Publish_Call {
	return &MockClient_Publish_Call{Call: _e.mock.On("Publish", _a0)}
}

func (_c *MockClient_Publish_Call) Run(run func(_a0 beat.Event)) *MockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(beat.Event))
	})
	return _c
}

func (_c *MockClient_Publish_Call) Return() *MockClient_Publish_Call {
	_c.Call.Return()
	return _c
}

// PublishAll provides a mock function with given fields: _a0
func (_m *MockClient) PublishAll(_a0 []beat.Event) {
	_m.Called(_a0)
}

// MockClient_PublishAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAll'
type MockClient_PublishAll_Call struct {
	*mock.Call
}

// PublishAll is a helper method to define mock.On call
//   - _a0 []beat.Event
func (_e *MockClient_Expecter) PublishAll(_a0 interface{}) *MockClient_PublishAll_Call {
	return &MockClient_PublishAll_Call{Call: _e.mock.On("PublishAll", _a0)}
}

func (_c *MockClient_PublishAll_Call) Run(run func(_a0 []beat.Event)) *MockClient_PublishAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]beat.Event))
	})
	return _c
}

func (_c *MockClient_PublishAll_Call) Return() *MockClient_PublishAll_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
