name: Destroy Expired Environment

on:
  # TODO: check if workflow_dispatch is needed
  workflow_dispatch:
  # TODO: remove pull_request after debugging
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+"
    types: [opened, synchronize, reopened]

  # Schedule to run every day at 00:00 UTC
  schedule:
    - cron: '0 0 * * *'

jobs:
  envs_to_destroy:
    runs-on: ubuntu-latest
    outputs:
      matrix_deployments: ${{ steps.get_expired_envs.outputs.deployments }}
      env_found: ${{ steps.get_expired_envs.outputs.expired_env_found }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Hermit Environment
        uses: ./.github/actions/hermit
        with:
          init-tools: 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - name: Get expired environments
        id: get_expired_envs
        run: |
          .ci/scripts/get_expired_envs.sh

  destroy_environment:
    # TODO: Uncomment after debugging env_to_destroy action
    # uses: ./.github/workflows/destroy-environment.yml
    # needs: ["envs_to_destroy"]
    # strategy:
    #   fail-fast: false
    #   max-parallel: 1 # Destroy environments one by one
    #   matrix: ${{fromJson(needs.envs_to_destroy.outputs.matrix)}}
    # with:
    #   prefix: ${{ matrix.deployment_name }}

    # TODO: Remove after debugging env_to_destroy action
    runs-on: ubuntu-latest
    needs: ["envs_to_destroy"]
    # Only run if there are environments to destroy
    if: ${{ needs.envs_to_destroy.outputs.env_found == 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 1 # Destroy environments one by one
      matrix:
        deployment_name: ${{fromJson(needs.envs_to_destroy.outputs.matrix_deployments)}}
    steps:
      - name: Print environment to destroy
        env:
          DEPLOYMENT_TO_DESTROY: '${{ matrix.deployment_name }}'
        run: |
          echo "Destroying environment: ${DEPLOYMENT_TO_DESTROY}"
