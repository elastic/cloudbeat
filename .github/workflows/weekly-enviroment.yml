
name: Weekly environment deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: choice
        options:
          - weekly environment
      logLevel:
        description: 'Log level'
        required: true
        default: 'INFO'
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - WARN
          - ERROR

env:
  WORKING_DIR: deploy/weekly-environment
  SCRIPTS_DIR: deploy/weekly-environment/scripts/benchmarks/kspm_vanilla
  TF_VAR_ec_api_key: ${{ secrets.TF_VAR_EC_API_KEY }}
  TF_VAR_environment: ${{ github.event.inputs.logLevel }}
  TF_LOG: ${{ github.event.inputs.logLevel }}

jobs:
  terraform:
    name: Deploy KSPM/CSPM cloud environment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: 1.3.5
           terraform_wrapper: false

#      - name: Terraform fmt
#        id: fmt
#        run: terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        run: terraform init -no-color
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Deploy Elastic Cloud
#        id: apply
#        run: terraform apply --auto-approve
#
#      - name: Set terraform output as env variable
#        id: kibana_url
#        run: |
#          echo "KIBANA_URL=$(terraform output kibana_url)" >> $GITHUB_ENV
#
#      - name: Set sensitive terraform output as env variable
#        id: set_sensitive_output
#        run: |
#          export ELASTICSEARCH_USERNAME=$(terraform output elasticsearch_username)
#          echo "::add-mask::$ELASTICSEARCH_USERNAME"
#          echo "ELASTICSEARCH_USERNAME=$ELASTICSEARCH_USERNAME" >> $GITHUB_ENV
#
#          export ELASTICSEARCH_PASSWORD=$(terraform output elasticsearch_password)
#          echo "::add-mask::$ELASTICSEARCH_PASSWORD"
#          echo "ELASTICSEARCH_PASSWORD=$ELASTICSEARCH_PASSWORD" >> $GITHUB_ENV
#
#      - name: Install KSPM vanilla integration
#        id: install_vanilla_integration
#        working-directory: ${{ env.SCRIPTS_DIR }}
#        run: |
#          ./install-kspm-vanilla-integration.sh ${{ env.KIBANA_URL }} ${{ env.ELASTICSEARCH_PASSWORD }}
#
#      - name: Show manifest file
#        id: manifest_file
#        working-directory: ${{ env.SCRIPTS_DIR }}
#        run: |
#          cat manifest.yaml
#
#      - name: Replace the agent image
#        id: replace_agent_image
#        working-directory: ${{ env.SCRIPTS_DIR }}
#        run: |
#          cp manifest.yaml manifest-2.yaml
#          sed -i '' "s/^\( *image: *\).*/\1ofir_image/" manifest-2.yaml
#          cat manifest-2.yaml
#          diff manifest.yaml manifest-2.yaml
#
      - name: Create new file
        run: |
          touch from_ci.txt

      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: "ec2-13-51-85-190.eu-north-1.compute.amazonaws.com"
          username: "ubuntu"
          port: "22"
          key: ${{ secrets.EC2_SECRET }}
          source: "from_ci.txt"
          target: "test"
        continue-on-error: true

#      - name: Copy file to EC2
#        uses: appleboy/scp-action@master
#        env:
#          HOST: ${{ secrets.EC2_PUBLIC_IP }}
#          USERNAME: "ubuntu"
#          KEY: ${{ secrets.EC2_SECRET }}
#        with:
#          source: "from_ci.txt"
#          target: "."
#          strip_components: 1
      - name: Deploy KSPM vanilla Agent to EC2
        id: deploy_ksmp
        working-directory: ${{ env.SCRIPTS_DIR }}
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_SECRET: ${{ secrets.EC2_SECRET }}
        run: |
          pwd
          echo {{ secrets.EC2_SECRET }} > weekly-key.pem
          chmod 600 weekly-key.pem
          ll

#          touch from_ci.txt
#          ll
#          echo "ofirrrr"
#          cat weekly-key.pem
#          chmod 600 weekly-key.pem
#          ssh-keygen -y -f weekly-key.pem
#          scp -i weekly-key.pem -o StrictHostKeyChecking=no from_ci.txt "ubuntu@ec2-13-51-85-190.eu-north-1.compute.amazonaws.com:~/."

#          scp -i ${{ secrets.EC2_SECRET }} -o StrictHostKeyChecking=no from_ci_1.txt "ubuntu@${EC2_PUBLIC_IP}:~/."
#
#          scp -i "$EC2_SECRET" -o StrictHostKeyChecking=no manifest.yaml "ubuntu@${EC2_PUBLIC_IP}:~/."
#          ssh -i "$EC2_SECRET" -o StrictHostKeyChecking=no "ubuntu@${EC2_PUBLIC_IP}" "ls -l"

#      # Once https://github.com/slackapi/slack-github-action/issues/84 will be resolved we can push the payload to a different file
#      - name: Send custom JSON data to Slack workflow
#        id: slack
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          payload: |
#            {
#              "text": "A new deployment job has been triggered",
#              "attachments": [
#                {
#                  "color": "#36a64f",
#                  "fields": [
#                    {
#                      "title": "Environment",
#                      "value": "${{ github.event.inputs.environment }}",
#                      "short": true
#                    },
#                    {
#                      "title": "Log level",
#                      "value": "${{ github.event.inputs.logLevel }}",
#                      "short": true
#                    },
#                    {
#                      "title": "Kibana URL",
#                      "value": ${{ env.KIBANA_URL }},
#                      "short": false
#                    },
#                    {
#                      "title": "ElasticSearch username",
#                      "value": ${{ env.ELASTICSEARCH_USERNAME }},
#                      "short": false
#                    },
#                    {
#                      "title": "ElasticSearch password",
#                      "value": ${{ env.ELASTICSEARCH_PASSWORD }},
#                      "short": false
#                    }
#                  ]
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
