name: Weekly environment deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: choice
        options:
          - weekly environment
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - WARN
          - ERROR

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CONTAINER_SUFFIX: ${{ github.run_id }}
  AWS_REGION: eu-north-1
  KUBE_NAMESPACE: kube-system
  WORKING_DIR: deploy/cloud
  ENVIRONMENT: "weekly-environment"
  TF_VAR_ec_api_key: ${{ secrets.TF_VAR_EC_API_KEY }}
  TF_VAR_environment: ${{ github.event.inputs.logLevel }}
  TF_VAR_eks_region: eu-north-1
  TF_LOG: ${{ github.event.inputs.logLevel }}

jobs:
  terraform:
    name: Deploy KSPM/CSPM cloud environment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: 1.3.5
           terraform_wrapper: false

#      - name: Terraform fmt
#        id: fmt
#        run: terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
      - name: Terraform Init
        id: init
        run: terraform init -no-color

      - name: Deploy EKS cluster and Elastic Cloud
        id: apply
        run: terraform apply --auto-approve -target "module.ec_deployment" -target "null_resource.rules" -target "null_resource.store_local_dashboard" -target "module.eks"

      - name: Create IAM role for EKS
        id: kspm
        run: terraform apply --auto-approve -target "module.api" -target "module.iam_eks_role"

      - name : Deploy EC2 instance to run Cloudbeat on vanilla cluster
        id: ec2
        run: terraform apply --auto-approve -target "module.aws_ec2_with_agent"

      - name: Deploy agent on EKS
        id: eks
        run: terraform apply --auto-approve

      - name: Set terraform output as env variable
        id: kibana_url
        run: |
          echo "KIBANA_URL=$(terraform output kibana_url)" >> $GITHUB_ENV

      - name: Set sensitive terraform output as env variable
        id: set_sensitive_output
        run: |
          export ELASTICSEARCH_USERNAME=$(terraform output elasticsearch_username)
          echo "::add-mask::$ELASTICSEARCH_USERNAME"
          echo "ELASTICSEARCH_USERNAME=$ELASTICSEARCH_USERNAME" >> $GITHUB_ENV

          export ELASTICSEARCH_PASSWORD=$(terraform output elasticsearch_password)
          echo "::add-mask::ELASTICSEARCH_PASSWORD"
          echo "ELASTICSEARCH_PASSWORD=$ELASTICSEARCH_PASSWORD" >> $GITHUB_ENV

          export EC2_PRIVATE_KEY=$(terraform output ec2_private_key)
          echo "::add-mask::EC2_PRIVATE_KEY"
          echo "EC2_PRIVATE_KEY=$EC2_PRIVATE_KEY" >> $GITHUB_ENV


      - name: Deploy Agents
        id: deploy_ec2_instance
        run: |
          terraform apply -auto-approve -no-color

      # Once https://github.com/slackapi/slack-github-action/issues/84 will be resolved we can push the payload to a different file
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "A new deployment job has been triggered",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Benchmark",
                      "value": "${{ github.event.inputs.benchmark }}",
                      "short": true
                    },
                    {
                      "title": "Alerts",
                      "value": "${{ github.event.inputs.alerts }}",
                      "short": true
                    },
                    {
                      "title": "Log level",
                      "value": "${{ github.event.inputs.logLevel }}",
                      "short": true
                    },
                    {
                      "title": "Kibana URL",
                      "value": ${{ env.KIBANA_URL }},
                      "short": true
                    },
                    {
                      "title": "ElasticSearch username",
                      "value": ${{ env.ELASTICSEARCH_USERNAME }},
                      "short": true
                    },
                    {
                      "title": "ElasticSearch password",
                      "value": ${{ env.ELASTICSEARCH_PASSWORD }},
                      "short": true
                    },
                    {
                      "title": "EC2 private key",
                      "value": ${{ env.EC2_PRIVATE_KEY }},
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
