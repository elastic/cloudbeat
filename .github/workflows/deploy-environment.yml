name: Deploy QA environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy
        type: choice
        options:
          - staging.found.no
          - cloud.elastic.co
      EC_API_KEY:
        type: string
        description: Elastic's cloud API key
        required: true
      deployment_name:
        type: string
        description: |
          Name your environment (Only a-zA-Z0-9 and `-`).
          For example: john-8-8-0-bc3-May11'
        required: true
      stack_version:
        type: string
        description: |
          Elastic's stack version. (e.g., 8.8.0, 8.8.0-SNAPSHOT, latest).
          Optional, defaults is latest.
          For BC, enter only version without additions/commit sha
      agent_docker_image_override:
        description: Agent's image. Optional, defaults to stack release.
        type: string

env:
  WORKING_DIR: deploy/cloud
  EC_API_KEY: ${{ github.event.inputs.EC_API_KEY }}
  EC_ENDPOINT: ${{ github.event.inputs.environment == 'staging.found.no' && 'https://staging.found.no' || ''}}
  TF_VAR_ess_region: ${{ github.event.inputs.environment == 'staging.found.no' && 'gcp-us-central1' || 'gcp-us-west2'}}
  TF_VAR_deployment_name: ${{ github.event.inputs.deployment_name }}
  TF_VAR_stack_version: ${{ github.event.inputs.stack_version == '' && 'latest' || github.event.inputs.stack_version}}
  TF_VAR_agent_docker_image_override: ${{ github.event.inputs.agent_docker_image_override }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    name: Run terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%s)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Init Hermit
        run: ./bin/hermit env -r >> $GITHUB_ENV
        working-directory: ./

      - name: Terraform Init
        run: terraform init -no-color

      - name: Deploy Elastic Cloud
        run: |
          terraform apply -target "module.ec_deployment" -target "null_resource.rules" -target "null_resource.store_local_dashboard" -target "module.eks"
          terraform apply --auto-approve -target "module.aws_ec2_with_agent"
          terraform apply --auto-approve -target "module.apps"
          terraform apply --auto-approve -target "module.api" -target "module.iam_eks_role"
          terraform apply --auto-approve

      - name: Save tfstate
        env:
          SUB_BUCKET_NAME: ${{ github.event.inputs.deployment_name }}-${{ steps.date.outputs.date }}
        run: |
          aws s3 cp ./terraform.tfstate "s3://private-deployments-tfstate/$SUB_BUCKET_NAME/terraform.tfstate"
