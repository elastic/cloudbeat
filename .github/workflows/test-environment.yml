name: Sanity tests

on:
  # Ability to execute on demand
  workflow_dispatch:
    inputs:
      deployment_name:
        type: string
        description: |
          Name your environment (Only a-zA-Z0-9 and `-`).
          For example: john-8-7-2-June01'
        required: true
      elk-stack-version:
        required: true
        description: "Elastic Cloud stack version"
        default: "8.7.2-SNAPSHOT"
      ess-region:
        required: true
        description: "Elastic Cloud deployment region"
        default: "gcp-us-west2"
      cleanup-env:
        description: "Boolean: Cleanup resources after provision"
        default: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "eu-west-3"
  TF_VAR_ec_api_key: ${{ secrets.CI_EC_API_KEY }}
  WORKING_DIR: deploy/test-environments

jobs:
  Setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    outputs:
      stack-version: ${{ steps.set-input-vars.outputs.stack-version }}
      ess-region: ${{ steps.set-input-vars.outputs.ess-region }}
      deployment-name: ${{ steps.set-input-vars.outputs.deployment-name }}
      tf-folder-date: ${{ steps.gen-tf-name.outputs.tf-folder-date}}
    steps:
      - id: set-input-vars
        if: github.event_name == 'workflow_dispatch'
        env:
          ELK_VERSION: ${{ github.event.inputs.elk-stack-version }}
          ESS_REGION: ${{ github.event.inputs.ess-region }}
          DEPLOYMENT_NAME: ${{ github.event.inputs.deployment_name }}
        run: |
          echo "stack-version=${{ env.ELK_VERSION }}" >> $GITHUB_OUTPUT
          echo "ess-region=${{ env.ESS_REGION }}" >> $GITHUB_OUTPUT
          echo "deployment-name=${{ env.DEPLOYMENT_NAME }}" >> $GITHUB_OUTPUT
      - id: gen-tf-name
        run: |
          echo "tf-folder-date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

  Deploy:
    needs: ["Setup"]
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    env:
      TF_VAR_stack_version: ${{ needs.Setup.outputs.stack-version }}
      TF_VAR_ess_region: ${{ needs.Setup.outputs.ess-region }}
      TF_STATE_FOLDER: ${{ needs.Setup.outputs.tf-folder-date }}
      DEPLOYMENT_NAME: ${{ needs.Setup.outputs.deployment-name }}
      S3_BASE_BUCKET: "s3://tf-state-bucket-test-infra"
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Init Hermit
        run: ./bin/hermit env -r >> $GITHUB_ENV
        working-directory: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Provision Test Environment (EC + EC2 K8s + EC2 CSPM)
        id: apply
        if: success()
        run: |
          terraform apply --auto-approve -var="deployment_name=${{ env.DEPLOYMENT_NAME }}"

      - name: Set Environment Output
        id: env-output
        run: |
          echo "KIBANA_URL=$(terraform output kibana_url)" >> $GITHUB_ENV
          echo "ES_USER=$(terraform output elasticsearch_username)" >> $GITHUB_ENV
          echo "ES_PASSWORD=$(terraform output elasticsearch_password)" >> $GITHUB_ENV
          echo "EC2_CSPM=$(terraform output ec2_cspm_ssh_cmd)" >> $GITHUB_ENV
          echo "EC2_KSPM=$(terraform output ec2_kspm_ssh_cmd)" >> $GITHUB_ENV
          echo "EC2_CSPM_KEY=$(terraform output ec2_cspm_key)" >> $GITHUB_ENV
          echo "EC2_KSPM_KEY=$(terraform output ec2_kspm_key)" >> $GITHUB_ENV

      - name: Upload tf state
        if: always()
        env:
          S3_BUCKET: "${{ env.S3_BASE_BUCKET }}/${{ env.DEPLOYMENT_NAME }}_${{ env.TF_STATE_FOLDER }}"
        run: |
          aws s3 cp "./terraform.tfstate" "${{ env.S3_BUCKET }}/terraform.tfstate"
          aws s3 cp "${{ env.EC2_CSPM_KEY }}" "${{ env.S3_BUCKET }}/cspm.pem"
          aws s3 cp "${{ env.EC2_KSPM_KEY }}" "${{ env.S3_BUCKET }}/kspm.pem"

      # Placeholder action that need to be replaced by the following:
      # # Tests execution
      # - name: Sleep action
      #   if: success()
      #   run: |
      #     sleep 300

      - name: Cleanup Environment
        if: github.event.inputs.cleanup-env == 'true'
        run: |
          terraform destroy --auto-approve
