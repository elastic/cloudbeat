name: sanity workflow

on:
  # Ability to execute on demand
  workflow_dispatch:
    inputs:
      elk-stack-version:
        required: true
        description: "Specify version ELK stack version to deploy"
        default: "8.8.0-SNAPSHOT"
      ess-region:
        required: false
        description: "Specify deployment region"
        default: "gcp-us-west2"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "eu-west-3"
  TF_VAR_ec_api_key: ${{ secrets.CI_EC_API_KEY }}
  EC_DEPLOYMENT: "module.ec_deployment"
  WORKING_DIR: deploy/cloud

jobs:
  Setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    outputs:
      stack-version: ${{ steps.set-elk-vars.outputs.stack-version }}
      ess-region: ${{ steps.set-elk-vars.outputs.ess-region }}
      tf-state: ${{ steps.gen-tf-name.outputs.tf-file}}
    steps:
      - id: set-elk-vars
        if: github.event_name == 'workflow_dispatch'
        env:
          ELK_VERSION: ${{ github.event.inputs.elk-stack-version }}
          ESS_REGION: ${{ github.event.inputs.ess-region }}
        run: |
          echo "stack-version=${{ env.ELK_VERSION }}" >> $GITHUB_OUTPUT
          echo "ess-region=${{ env.ESS_REGION }}" >> $GITHUB_OUTPUT
      - id: gen-tf-name
        run: |
          echo "tf-file=terraform_$(date +'%Y-%m-%d_%H-%M-%S').tfstate" >> $GITHUB_OUTPUT
  
  Deploy:
    needs: ["Setup"]
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Init Hermit
        run: ./bin/hermit env -r >> $GITHUB_ENV
        working-directory: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Provision Elastic Cloud
        id: apply
        env:
          TF_VAR_stack_version: ${{ needs.Setup.outputs.stack-version }}
          TF_VAR_ess_region: ${{ needs.Setup.outputs.ess-region }}
          TF_STATE_FILE: ${{ needs.Setup.outputs.tf-state }}
        run: |
          terraform apply --auto-approve \
            -target ${{ env.EC_DEPLOYMENT }} \
            -state=${{ env.TF_STATE_FILE}}

      - name: Upload tf state
        if: success()
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: "tf-state-bucket-test-infra"
        with:
          args: --acl private --follow-symlinks --delete --exclude '*.tf' --exclude 'terraform.tfstate*' --exclude '.git/*' --exclude '.github/*' --exclude '.vscode/*'

      - name: Sleep action
        if: success()
        run: |
          sleep 300

      - name: Cleanup Environment
        if: always()
        env:
          TF_VAR_stack_version: ${{ needs.Setup.outputs.stack-version }}
          TF_VAR_ess_region: ${{ needs.Setup.outputs.ess-region }}
          TF_STATE_FILE: ${{ needs.Setup.outputs.tf-state }}
        run: |
          terraform destroy --auto-approve \
            -target ${{env.EC_DEPLOYMENT }} \
            -state=${{ env.TF_STATE_FILE }}
