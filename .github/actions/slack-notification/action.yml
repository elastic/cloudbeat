name: Send Slack Notification
description: Get Vault credentials and send a Slack notification
inputs:
  vault-url:
    description: 'Vault URL'
    required: true
  vault-role-id:
    description: 'Vault role ID'
    required: true
  vault-secret-id:
    description: 'Vault secret ID'
    required: true
  slack-channel:
    description: 'Slack channel'
    required: false
    default: '#csp-qa-alerts'
  slack-message:
    description: 'Slack message'
    required: false
  slack-payload:
    description: 'Slack payload'
    required: false
  mask-secrets:
    description: 'True if the secrets are masked in logs'
    required: false
    default: 'true'
  url-encoded:
    description: 'True if the message is URL encoded'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Get Vault credentials
      uses: hashicorp/vault-action@v2.7.4
      with:
        url: ${{ inputs.vault-url }}
        roleId: ${{ inputs.vault-role-id }}
        secretId: ${{ inputs.vault-secret-id }}
        method: approle
        secrets: |
          secret/csp-team/ci/cloud-security-test-envs-webhook slack-webhook | SLACK_WEBHOOK_URL

    - name: Prepare Slack data
      id: prepare-slack-data
      shell: bash
      env:
        MESSAGE: ${{ inputs.slack-message }}
        PAYLOAD: ${{ inputs.slack-payload }}
        MASK: ${{ inputs.mask-secrets }}
        URL_ENCODED: ${{ inputs.url-encoded }}
      run: |
        python3 ${{ github.action_path }}/slack_payload.py

    - name: Send Slack notification
      id: send-slack-notification
      uses: slackapi/slack-github-action@v1.24.0
      env:
        # Replace webhook with bot token after Slack app approval
        # SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      with:
        channel-id: ${{ inputs.slack-channel }}
        payload: |
          ${{ steps.prepare-slack-data.outputs.payload }}
