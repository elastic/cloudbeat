// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerateScopeName(t *testing.T) {
	const (
		modulePath      = "example.com/mymodule"
		pkgName         = "mypackage"
		expectedContent = `// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// Code generated by go generate; DO NOT EDIT.
package mypackage

const scopeName = "example.com/mymodule/mypackage"
`
	)

	tmpDir := t.TempDir()

	// Create a go.mod file
	goModContent := fmt.Sprintf("module %s\n", modulePath)
	err := os.WriteFile(filepath.Join(tmpDir, "go.mod"), []byte(goModContent), 0644)
	require.NoError(t, err)

	// Create a package subdirectory
	pkgDir := filepath.Join(tmpDir, pkgName)
	err = os.Mkdir(pkgDir, 0755)
	require.NoError(t, err)

	// Create a dummy Go file
	dummyGoFile := filepath.Join(pkgDir, "dummy.go")
	err = os.WriteFile(dummyGoFile, []byte("package mypackage"), 0644)
	require.NoError(t, err)

	// Set environment variables
	t.Setenv("GOFILE", dummyGoFile)
	t.Setenv("GOPACKAGE", pkgName)

	// Run the main function
	main()

	// Check that the scope.go file was created
	scopeGoFile := filepath.Join(pkgDir, "scope.go")
	_, err = os.Stat(scopeGoFile)
	require.NoError(t, err, "scope.go should be created")

	// Check the content of the scope.go file
	content, err := os.ReadFile(scopeGoFile)
	require.NoError(t, err)

	require.Equal(t, expectedContent, string(content))
}
